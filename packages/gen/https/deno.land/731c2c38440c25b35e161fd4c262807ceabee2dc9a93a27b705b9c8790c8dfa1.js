import { rsa_oaep_encrypt, rsa_pkcs1_encrypt, rsa_oaep_decrypt, rsa_pkcs1_decrypt } from "./src/rsa.ts";
import { ber_decode, ber_simple } from "./src/basic_encoding_rule.ts";
import { base64_to_binary, get_key_size, str2bytes } from "./src/helper.ts";
export class RSA {
    static encrypt(message, key, options) {
        if (!key.e)
            throw "Invalid RSA key";
        const computedOptions = { hash: "sha1", padding: "oaep", ...options };
        const computedMessage = typeof message === "string" ? str2bytes(message) : message;
        if (computedOptions.padding === "oaep") {
            return rsa_oaep_encrypt(key.length, key.n, key.e, computedMessage, computedOptions.hash);
        }
        else if (computedOptions.padding === "pkcs1") {
            return rsa_pkcs1_encrypt(key.length, key.n, key.e, computedMessage);
        }
        throw "Invalid parameters";
    }
    static decrypt(ciper, key, options) {
        if (!key.d)
            throw "Invalid RSA key";
        const computedOptions = { hash: "sha1", padding: "oaep", ...options };
        if (computedOptions.padding === "oaep") {
            return rsa_oaep_decrypt(key.length, key.n, key.d, ciper, computedOptions.hash);
        }
        else if (computedOptions.padding === "pkcs1") {
            return rsa_pkcs1_decrypt(key.length, key.n, key.d, ciper);
        }
        throw "Invalid parameters";
    }
    static parseKey(key) {
        if (key.indexOf("-----BEGIN RSA PRIVATE KEY-----") === 0) {
            const trimmedKey = key.substr(31, key.length - 61);
            const parseKey = ber_simple(ber_decode(base64_to_binary(trimmedKey)));
            return {
                n: parseKey[1],
                d: parseKey[3],
                e: parseKey[2],
                length: get_key_size(parseKey[1])
            };
        }
        else if (key.indexOf("-----BEGIN PUBLIC KEY-----") === 0) {
            const trimmedKey = key.substr(26, key.length - 51);
            const parseKey = ber_simple(ber_decode(base64_to_binary(trimmedKey)));
            return {
                length: get_key_size(parseKey[1][0][0]),
                n: parseKey[1][0][0],
                e: parseKey[1][0][1],
            };
        }
        throw "Invalid key format";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnNhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cHM6Ly9kZW5vLmxhbmQveC9nb2RfY3J5cHRvQHYwLjIuMC9yc2EudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWdCNUUsTUFBTSxPQUFPLEdBQUc7SUFDZCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQTRCLEVBQUUsR0FBVyxFQUFFLE9BQTRCO1FBQ3BGLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUFFLE1BQU0saUJBQWlCLENBQUM7UUFFcEMsTUFBTSxlQUFlLEdBQWMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLEVBQUUsQ0FBQztRQUNqRixNQUFNLGVBQWUsR0FBRyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBRW5GLElBQUksZUFBZSxDQUFDLE9BQU8sS0FBSyxNQUFNLEVBQUU7WUFDdEMsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxlQUFlLEVBQUUsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFGO2FBQU0sSUFBSSxlQUFlLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTtZQUM5QyxPQUFPLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMs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