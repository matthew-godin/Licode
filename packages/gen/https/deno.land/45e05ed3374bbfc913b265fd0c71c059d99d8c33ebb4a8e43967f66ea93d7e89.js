import { xor } from "../util.ts";
import { encryptWithPublicKey } from "./crypt.ts";
let scramble, password;
function start(scramble_, password_) {
    scramble = scramble_;
    password = password_;
    return { done: false, next: authMoreResponse };
}
function authMoreResponse(packet) {
    let AuthStatusFlags;
    (function (AuthStatusFlags) {
        AuthStatusFlags[AuthStatusFlags["FullAuth"] = 4] = "FullAuth";
        AuthStatusFlags[AuthStatusFlags["FastPath"] = 3] = "FastPath";
    })(AuthStatusFlags || (AuthStatusFlags = {}));
    const REQUEST_PUBLIC_KEY = 0x02;
    const statusFlag = packet.body.skip(1).readUint8();
    let authMoreData, done = true, next, quickRead = false;
    if (statusFlag === AuthStatusFlags.FullAuth) {
        authMoreData = new Uint8Array([REQUEST_PUBLIC_KEY]);
        done = false;
        next = encryptWithKey;
    }
    if (statusFlag === AuthStatusFlags.FastPath) {
        done = false;
        quickRead = true;
        next = terminate;
    }
    return { done, next, quickRead, data: authMoreData };
}
function encryptWithKey(packet) {
    const publicKey = parsePublicKey(packet);
    const len = password.length;
    let passwordBuffer = new Uint8Array(len + 1);
    for (let n = 0; n < len; n++) {
        passwordBuffer[n] = password.charCodeAt(n);
    }
    passwordBuffer[len] = 0x00;
    const encryptedPassword = encrypt(passwordBuffer, scramble, publicKey);
    return { done: false, next: terminate, data: encryptedPassword };
}
function parsePublicKey(packet) {
    return packet.body.skip(1).readNullTerminatedString();
}
function encrypt(password, scramble, key) {
    const stage1 = xor(password, scramble);
    const encrypted = encryptWithPublicKey(key, stage1);
    return encrypted;
}
function terminate() {
    return { done: true };
}
export { start };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZ19zaGEyX3Bhc3N3b3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2FjaGluZ19zaGEyX3Bhc3N3b3JkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBU2xELElBQUksUUFBb0IsRUFBRSxRQUFnQixDQUFDO0FBQzNDLFNBQVMsS0FBSyxDQUFDLFNBQXFCLEVBQUUsU0FBaUI7SUFDckQsUUFBUSxHQUFHLFNBQVMsQ0FBQztJQUNyQixRQUFRLEdBQUcsU0FBUyxDQUFDO0lBQ3JCLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUFDO0FBQ2pELENBQUM7QUFDRCxTQUFTLGdCQUFnQixDQUFDLE1BQXFCO0lBQzdDLElBQVcsZUFHVjtJQUhELFdBQVcsZUFBZTtRQUN4Qiw2REFBZSxDQUFBO1FBQ2YsNkRBQWUsQ0FBQTtJQUNqQixDQUFDLEVBSFUsZUFBZSxLQUFmLGVBQWUsUUFHekI7SUFDRCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQztJQUNoQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuRCxJQUFJLFlBQVksRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3ZELElBQUksVUFBVSxLQUFLLGVBQWUsQ0FBQyxRQUFRLEVBQUU7UUFDM0MsWUFBWSxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ3BELElBQUksR0FBRyxLQUFLLENBQUM7UUFDYixJQUFJLEdBQUcsY0FBYyxDQUFDO0tBQ3ZCO0lBQ0QsSUFBSSxVQUFVLEtBQUssZUFBZSxDQUFDLFFBQVEsRUFBRTtRQUMzQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsU0FBUyxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLEdBQUcsU0FBUyxDQUFDO0tBQ2xCO0lBQ0QsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQztBQUN2RCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsTUFBcUI7SUFDM0MsTUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDNUIsSUFBSSxjQUFjLEdBQWUsSUFBSSxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDNUIsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUM7SUFDRCxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBRTNCLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQztBQUNuRSxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsTUFBcUI7SUFDM0MsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0FBQ3hELENBQUM7QUFDRCxTQUFTLE9BQU8sQ0FDZCxRQUFvQixFQUNwQixRQUFvQixFQUNwQixHQUFXO0lBRVgsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2QyxNQUFNLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVELFNBQVMsU0FBUztJQUNoQixPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ3hCLENBQUM7QUFFRCxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMifQ==