import { Query, ResultType, templateStringToQuery, } from "./query.ts";
import { isTemplateString } from "../utils/utils.ts";
import { PostgresError, TransactionError } from "../client/error.ts";
export class Savepoint {
    name;
    #instance_count = 0;
    #release_callback;
    #update_callback;
    constructor(name, update_callback, release_callback) {
        this.name = name;
        this.#release_callback = release_callback;
        this.#update_callback = update_callback;
    }
    get instances() {
        return this.#instance_count;
    }
    async release() {
        if (this.#instance_count === 0) {
            throw new Error("This savepoint has no instances to release");
        }
        await this.#release_callback(this.name);
        --this.#instance_count;
    }
    async update() {
        await this.#update_callback(this.name);
        ++this.#instance_count;
    }
}
export class Transaction {
    name;
    #client;
    #executeQuery;
    #isolation_level;
    #read_only;
    #savepoints = [];
    #snapshot;
    #updateClientLock;
    constructor(name, options, client, execute_query_callback, update_client_lock_callback) {
        this.name = name;
        this.#client = client;
        this.#executeQuery = execute_query_callback;
        this.#isolation_level = options?.isolation_level ?? "read_committed";
        this.#read_only = options?.read_only ?? false;
        this.#snapshot = options?.snapshot;
        this.#updateClientLock = update_client_lock_callback;
    }
    get isolation_level() {
        return this.#isolation_level;
    }
    get savepoints() {
        return this.#savepoints;
    }
    #assertTransactionOpen() {
        if (this.#client.session.current_transaction !== this.name) {
            throw new Error(`This transaction has not been started yet, make sure to use the "begin" method to do so`);
        }
    }
    #resetTransaction() {
        this.#savepoints = [];
    }
    async begin() {
        if (this.#client.session.current_transaction !== null) {
            if (this.#client.session.current_transaction === this.name) {
                throw new Error("This transaction is already open");
            }
            throw new Error(`This client already has an ongoing transaction "${this.#client.session.current_transaction}"`);
        }
        let isolation_level;
        switch (this.#isolation_level) {
            case "read_committed": {
                isolation_level = "READ COMMITTED";
                break;
            }
            case "repeatable_read": {
                isolation_level = "REPEATABLE READ";
                break;
            }
            case "serializable": {
                isolation_level = "SERIALIZABLE";
                break;
            }
            default:
                throw new Error(`Unexpected isolation level "${this.#isolation_level}"`);
        }
        let permissions;
        if (this.#read_only) {
            permissions = "READ ONLY";
        }
        else {
            permissions = "READ WRITE";
        }
        let snapshot = "";
        if (this.#snapshot) {
            snapshot = `SET TRANSACTION SNAPSHOT '${this.#snapshot}'`;
        }
        try {
            await this.#client.queryArray(`BEGIN ${permissions} ISOLATION LEVEL ${isolation_level};${snapshot}`);
        }
        catch (e) {
            if (e instanceof PostgresError) {
                throw new TransactionError(this.name, e);
            }
            else {
                throw e;
            }
        }
        this.#updateClientLock(this.name);
    }
    async commit(options) {
        this.#assertTransactionOpen();
        const chain = options?.chain ?? false;
        try {
            await this.queryArray(`COMMIT ${chain ? "AND CHAIN" : ""}`);
        }
        catch (e) {
            if (e instanceof PostgresError) {
                throw new TransactionError(this.name, e);
            }
            else {
                throw e;
            }
        }
        this.#resetTransaction();
        if (!chain) {
            this.#updateClientLock(null);
        }
    }
    getSavepoint(name) {
        return this.#savepoints.find((sv) => sv.name === name.toLowerCase());
    }
    getSavepoints() {
        return this.#savepoints
            .filter(({ instances }) => instances > 0)
            .map(({ name }) => name);
    }
    async getSnapshot() {
        this.#assertTransactionOpen();
        const { rows } = await this.queryObject `SELECT PG_EXPORT_SNAPSHOT() AS SNAPSHOT;`;
        return rows[0].snapshot;
    }
    async queryArray(query_template_or_config, ...args) {
        this.#assertTransactionOpen();
        let query;
        if (typeof query_template_or_config === "string") {
            query = new Query(query_template_or_config, ResultType.ARRAY, args);
        }
        else if (isTemplateString(query_template_or_config)) {
            query = templateStringToQuery(query_template_or_config, args, ResultType.ARRAY);
        }
        else {
            query = new Query(query_template_or_config, ResultType.ARRAY);
        }
        try {
            return await this.#executeQuery(query);
        }
        catch (e) {
            if (e instanceof PostgresError) {
                await this.commit();
                throw new TransactionError(this.name, e);
            }
            else {
                throw e;
            }
        }
    }
    async queryObject(query_template_or_config, ...args) {
        this.#assertTransactionOpen();
        let query;
        if (typeof query_template_or_config === "string") {
            query = new Query(query_template_or_config, ResultType.OBJECT, args[0]);
        }
        else if (isTemplateString(query_template_or_config)) {
            query = templateStringToQuery(query_template_or_config, args, ResultType.OBJECT);
        }
        else {
            query = new Query(query_template_or_config, ResultType.OBJECT);
        }
        try {
            return await this.#executeQuery(query);
        }
        catch (e) {
            if (e instanceof PostgresError) {
                await this.commit();
                throw new TransactionError(this.name, e);
            }
            else {
                throw e;
            }
        }
    }
    async rollback(savepoint_or_options) {
        this.#assertTransactionOpen();
        let savepoint_option;
        if (typeof savepoint_or_options === "string" ||
            savepoint_or_options instanceof Savepoint) {
            savepoint_option = savepoint_or_options;
        }
        else {
            savepoint_option =
                savepoint_or_options?.savepoint;
        }
        let savepoint_name;
        if (savepoint_option instanceof Savepoint) {
            savepoint_name = savepoint_option.name;
        }
        else if (typeof savepoint_option === "string") {
            savepoint_name = savepoint_option.toLowerCase();
        }
        let chain_option = false;
        if (typeof savepoint_or_options === "object") {
            chain_option = savepoint_or_options?.chain ??
                false;
        }
        if (chain_option && savepoint_name) {
            throw new Error("The chain option can't be used alongside a savepoint on a rollback operation");
        }
        if (typeof savepoint_option !== "undefined") {
            const ts_savepoint = this.#savepoints.find(({ name }) => name === savepoint_name);
            if (!ts_savepoint) {
                throw new Error(`There is no "${savepoint_name}" savepoint registered in this transaction`);
            }
            if (!ts_savepoint.instances) {
                throw new Error(`There are no savepoints of "${savepoint_name}" left to rollback to`);
            }
            await this.queryArray(`ROLLBACK TO ${savepoint_name}`);
            return;
        }
        try {
            await this.queryArray(`ROLLBACK ${chain_option ? "AND CHAIN" : ""}`);
        }
        catch (e) {
            if (e instanceof PostgresError) {
                await this.commit();
                throw new TransactionError(this.name, e);
            }
            else {
                throw e;
            }
        }
        this.#resetTransaction();
        if (!chain_option) {
            this.#updateClientLock(null);
        }
    }
    async savepoint(name) {
        this.#assertTransactionOpen();
        if (!/^[a-zA-Z_]{1}[\w]{0,62}$/.test(name)) {
            if (!Number.isNaN(Number(name[0]))) {
                throw new Error("The savepoint name can't begin with a number");
            }
            if (name.length > 63) {
                throw new Error("The savepoint name can't be longer than 63 characters");
            }
            throw new Error("The savepoint name can only contain alphanumeric characters");
        }
        name = name.toLowerCase();
        let savepoint = this.#savepoints.find((sv) => sv.name === name);
        if (savepoint) {
            try {
                await savepoint.update();
            }
            catch (e) {
                if (e instanceof PostgresError) {
                    await this.commit();
                    throw new TransactionError(this.name, e);
                }
                else {
                    throw e;
                }
            }
        }
        else {
            savepoint = new Savepoint(name, async (name) => {
                await this.queryArray(`SAVEPOINT ${name}`);
            }, async (name) => {
                await this.queryArray(`RELEASE SAVEPOINT ${name}`);
            });
            try {
                await savepoint.update();
            }
            catch (e) {
                if (e instanceof PostgresError) {
                    await this.commit();
                    throw new TransactionError(this.name, e);
                }
                else {
                    throw e;
                }
            }
            this.#savepoints.push(savepoint);
        }
        return savepoint;
    }
}
//# sourceMappingURL=data:application/json;base64,