import { base64 } from "../deps.ts";
const defaultNonceSize = 16;
const text_encoder = new TextEncoder();
var AuthenticationState;
(function (AuthenticationState) {
    AuthenticationState[AuthenticationState["Init"] = 0] = "Init";
    AuthenticationState[AuthenticationState["ClientChallenge"] = 1] = "ClientChallenge";
    AuthenticationState[AuthenticationState["ServerChallenge"] = 2] = "ServerChallenge";
    AuthenticationState[AuthenticationState["ClientResponse"] = 3] = "ClientResponse";
    AuthenticationState[AuthenticationState["ServerResponse"] = 4] = "ServerResponse";
    AuthenticationState[AuthenticationState["Failed"] = 5] = "Failed";
})(AuthenticationState || (AuthenticationState = {}));
export var Reason;
(function (Reason) {
    Reason["BadMessage"] = "server sent an ill-formed message";
    Reason["BadServerNonce"] = "server sent an invalid nonce";
    Reason["BadSalt"] = "server specified an invalid salt";
    Reason["BadIterationCount"] = "server specified an invalid iteration count";
    Reason["BadVerifier"] = "server sent a bad verifier";
    Reason["Rejected"] = "rejected by server";
})(Reason || (Reason = {}));
function assert(cond) {
    if (!cond) {
        throw new Error("Scram protocol assertion failed");
    }
}
function assertValidScramString(str) {
    const unsafe = /[^\x21-\x7e]/;
    if (unsafe.test(str)) {
        throw new Error("scram username/password is currently limited to safe ascii characters");
    }
}
async function computeScramSignature(message, raw_key) {
    const key = await crypto.subtle.importKey("raw", raw_key, { name: "HMAC", hash: "SHA-256" }, false, ["sign"]);
    return new Uint8Array(await crypto.subtle.sign({ name: "HMAC", hash: "SHA-256" }, key, text_encoder.encode(message)));
}
function computeScramProof(signature, key) {
    const digest = new Uint8Array(signature.length);
    for (let i = 0; i < digest.length; i++) {
        digest[i] = signature[i] ^ key[i];
    }
    return digest;
}
async function deriveKeySignatures(password, salt, iterations) {
    const pbkdf2_password = await crypto.subtle.importKey("raw", text_encoder.encode(password), "PBKDF2", false, ["deriveBits", "deriveKey"]);
    const key = await crypto.subtle.deriveKey({
        hash: "SHA-256",
        iterations,
        name: "PBKDF2",
        salt,
    }, pbkdf2_password, { name: "HMAC", hash: "SHA-256" }, false, ["sign"]);
    const client = new Uint8Array(await crypto.subtle.sign("HMAC", key, text_encoder.encode("Client Key")));
    const server = new Uint8Array(await crypto.subtle.sign("HMAC", key, text_encoder.encode("Server Key")));
    const stored = new Uint8Array(await crypto.subtle.digest("SHA-256", client));
    return { client, server, stored };
}
function escape(str) {
    return str
        .replace(/=/g, "=3D")
        .replace(/,/g, "=2C");
}
function generateRandomNonce(size) {
    return base64.encode(crypto.getRandomValues(new Uint8Array(size)));
}
function parseScramAttributes(message) {
    const attrs = {};
    for (const entry of message.split(",")) {
        const pos = entry.indexOf("=");
        if (pos < 1) {
            throw new Error(Reason.BadMessage);
        }
        const key = entry.substr(0, pos);
        const value = entry.substr(pos + 1);
        attrs[key] = value;
    }
    return attrs;
}
export class Client {
    #auth_message;
    #client_nonce;
    #key_signatures;
    #password;
    #server_nonce;
    #state;
    #username;
    constructor(username, password, nonce) {
        assertValidScramString(password);
        assertValidScramString(username);
        this.#auth_message = "";
        this.#client_nonce = nonce ?? generateRandomNonce(defaultNonceSize);
        this.#password = password;
        this.#state = AuthenticationState.Init;
        this.#username = escape(username);
    }
    composeChallenge() {
        assert(this.#state === AuthenticationState.Init);
        try {
            const header = "n,,";
            const challenge = `n=${this.#username},r=${this.#client_nonce}`;
            const message = header + challenge;
            this.#auth_message += challenge;
            this.#state = AuthenticationState.ClientChallenge;
            return message;
        }
        catch (e) {
            this.#state = AuthenticationState.Failed;
            throw e;
        }
    }
    async receiveChallenge(challenge) {
        assert(this.#state === AuthenticationState.ClientChallenge);
        try {
            const attrs = parseScramAttributes(challenge);
            const nonce = attrs.r;
            if (!attrs.r || !attrs.r.startsWith(this.#client_nonce)) {
                throw new Error(Reason.BadServerNonce);
            }
            this.#server_nonce = nonce;
            let salt;
            if (!attrs.s) {
                throw new Error(Reason.BadSalt);
            }
            try {
                salt = base64.decode(attrs.s);
            }
            catch {
                throw new Error(Reason.BadSalt);
            }
            const iterCount = parseInt(attrs.i) | 0;
            if (iterCount <= 0) {
                throw new Error(Reason.BadIterationCount);
            }
            this.#key_signatures = await deriveKeySignatures(this.#password, salt, iterCount);
            this.#auth_message += "," + challenge;
            this.#state = AuthenticationState.ServerChallenge;
        }
        catch (e) {
            this.#state = AuthenticationState.Failed;
            throw e;
        }
    }
    async composeResponse() {
        assert(this.#state === AuthenticationState.ServerChallenge);
        assert(this.#key_signatures);
        assert(this.#server_nonce);
        try {
            const responseWithoutProof = `c=biws,r=${this.#server_nonce}`;
            this.#auth_message += "," + responseWithoutProof;
            const proof = base64.encode(computeScramProof(await computeScramSignature(this.#auth_message, this.#key_signatures.stored), this.#key_signatures.client));
            const message = `${responseWithoutProof},p=${proof}`;
            this.#state = AuthenticationState.ClientResponse;
            return message;
        }
        catch (e) {
            this.#state = AuthenticationState.Failed;
            throw e;
        }
    }
    async receiveResponse(response) {
        assert(this.#state === AuthenticationState.ClientResponse);
        assert(this.#key_signatures);
        try {
            const attrs = parseScramAttributes(response);
            if (attrs.e) {
                throw new Error(attrs.e ?? Reason.Rejected);
            }
            const verifier = base64.encode(await computeScramSignature(this.#auth_message, this.#key_signatures.server));
            if (attrs.v !== verifier) {
                throw new Error(Reason.BadVerifier);
            }
            this.#state = AuthenticationState.ServerResponse;
        }
        catch (e) {
            this.#state = AuthenticationState.Failed;
            throw e;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,