import { Connection } from "./connection/connection.ts";
import { createParams, } from "./connection/connection_params.ts";
import { Query, ResultType, templateStringToQuery, } from "./query/query.ts";
import { Transaction } from "./query/transaction.ts";
import { isTemplateString } from "./utils/utils.ts";
export class QueryClient {
    #connection;
    #terminated = false;
    #transaction = null;
    constructor(connection) {
        this.#connection = connection;
    }
    get connected() {
        return this.#connection.connected;
    }
    get session() {
        return {
            current_transaction: this.#transaction,
            pid: this.#connection.pid,
            tls: this.#connection.tls,
            transport: this.#connection.transport,
        };
    }
    #assertOpenConnection() {
        if (this.#terminated) {
            throw new Error("Connection to the database has been terminated");
        }
    }
    async closeConnection() {
        if (this.connected) {
            await this.#connection.end();
        }
        this.resetSessionMetadata();
    }
    createTransaction(name, options) {
        this.#assertOpenConnection();
        return new Transaction(name, options, this, this.#executeQuery.bind(this), (name) => {
            this.#transaction = name;
        });
    }
    async connect() {
        if (!this.connected) {
            await this.#connection.startup(false);
            this.#terminated = false;
        }
    }
    async end() {
        await this.closeConnection();
        this.#terminated = true;
    }
    #executeQuery(query) {
        return this.#connection.query(query);
    }
    queryArray(query_template_or_config, ...args) {
        this.#assertOpenConnection();
        if (this.#transaction !== null) {
            throw new Error(`This connection is currently locked by the "${this.#transaction}" transaction`);
        }
        let query;
        if (typeof query_template_or_config === "string") {
            query = new Query(query_template_or_config, ResultType.ARRAY, args[0]);
        }
        else if (isTemplateString(query_template_or_config)) {
            query = templateStringToQuery(query_template_or_config, args, ResultType.ARRAY);
        }
        else {
            query = new Query(query_template_or_config, ResultType.ARRAY);
        }
        return this.#executeQuery(query);
    }
    queryObject(query_template_or_config, ...args) {
        this.#assertOpenConnection();
        if (this.#transaction !== null) {
            throw new Error(`This connection is currently locked by the "${this.#transaction}" transaction`);
        }
        let query;
        if (typeof query_template_or_config === "string") {
            query = new Query(query_template_or_config, ResultType.OBJECT, args[0]);
        }
        else if (isTemplateString(query_template_or_config)) {
            query = templateStringToQuery(query_template_or_config, args, ResultType.OBJECT);
        }
        else {
            query = new Query(query_template_or_config, ResultType.OBJECT);
        }
        return this.#executeQuery(query);
    }
    resetSessionMetadata() {
        this.#transaction = null;
    }
}
export class Client extends QueryClient {
    constructor(config) {
        super(new Connection(createParams(config), async () => {
            await this.closeConnection();
        }));
    }
}
export class PoolClient extends QueryClient {
    #release;
    constructor(config, releaseCallback) {
        super(new Connection(config, async () => {
            await this.closeConnection();
        }));
        this.#release = releaseCallback;
    }
    release() {
        this.#release();
        this.resetSessionMetadata();
    }
}
//# sourceMappingURL=data:application/json;base64,