import { MySQLClient } from "../deps.ts";
import { AbstractClient } from "./AbstractClient.ts";
import { COL_CREATED_AT, COL_FILE_NAME, MAX_FILE_NAME_LENGTH, TABLE_MIGRATIONS, } from "../consts.ts";
import { NessieError } from "../cli/errors.ts";
export class ClientMySQL extends AbstractClient {
    #clientOptions;
    dialect = "mysql";
    #QUERY_TRANSACTION_START = `START TRANSACTION;`;
    #QUERY_TRANSACTION_COMMIT = `COMMIT;`;
    #QUERY_TRANSACTION_ROLLBACK = `ROLLBACK;`;
    #QUERY_MIGRATION_TABLE_EXISTS = `SELECT * FROM information_schema.tables WHERE table_name = '${TABLE_MIGRATIONS}' LIMIT 1;`;
    #QUERY_CREATE_MIGRATION_TABLE = `CREATE TABLE ${TABLE_MIGRATIONS} (id bigint UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, ${COL_FILE_NAME} varchar(${MAX_FILE_NAME_LENGTH}) NOT NULL UNIQUE, ${COL_CREATED_AT} datetime NOT NULL DEFAULT CURRENT_TIMESTAMP);`;
    #QUERY_UPDATE_TIMESTAMPS = `UPDATE ${TABLE_MIGRATIONS} SET ${COL_FILE_NAME} = CONCAT(FROM_UNIXTIME(CAST(substring_index(${COL_FILE_NAME}, '-', 1) AS SIGNED) / 1000, '%Y%m%d%H%i%S'), substring(file_name, instr( file_name,'-'))) WHERE CAST(substring_index(${COL_FILE_NAME}, '-', 1) AS SIGNED) < 1672531200000;`;
    constructor(connectionOptions) {
        super({ client: new MySQLClient() });
        this.#clientOptions = connectionOptions;
    }
    async prepare() {
        await this.client.connect(this.#clientOptions);
        const queryResult = await this.query(this.#QUERY_MIGRATION_TABLE_EXISTS);
        const migrationTableExists = queryResult?.[0]?.length > 0;
        if (!migrationTableExists) {
            await this.query(this.#QUERY_CREATE_MIGRATION_TABLE);
            console.info("Database setup complete");
        }
    }
    async updateTimestamps() {
        await this.client.connect(this.#clientOptions);
        const queryResult = await this.query(this.#QUERY_MIGRATION_TABLE_EXISTS);
        const migrationTableExists = queryResult?.[0]?.length > 0;
        if (migrationTableExists) {
            await this.query(this.#QUERY_TRANSACTION_START);
            try {
                await this.query(this.#QUERY_UPDATE_TIMESTAMPS);
                await this.query(this.#QUERY_TRANSACTION_COMMIT);
                console.info("Updated timestamps");
            }
            catch (e) {
                await this.query(this.#QUERY_TRANSACTION_ROLLBACK);
                throw e;
            }
        }
    }
    async query(query) {
        if (typeof query === "string")
            query = this.splitAndTrimQueries(query);
        const ra = [];
        for await (const qs of query) {
            try {
                if (qs.trim().toLowerCase().startsWith("select") ||
                    qs.trim().toLowerCase().startsWith("show")) {
                    ra.push(await this.client.query(qs));
                }
                else {
                    ra.push(await this.client.execute(qs));
                }
            }
            catch (e) {
                if (e?.message === "Query was empty") {
                    ra.push(undefined);
                }
                else {
                    throw new NessieError(query + "\n" + e + "\n" + ra.join("\n"));
                }
            }
        }
        return ra;
    }
    async close() {
        await this.client.close();
    }
    async migrate(amount) {
        const latestMigration = await this.query(this.QUERY_GET_LATEST);
        await this._migrate(amount, latestMigration?.[0]?.[0]?.[COL_FILE_NAME], this.query.bind(this));
    }
    async rollback(amount) {
        const allMigrations = await this.query(this.QUERY_GET_ALL);
        const parsedMigrations = allMigrations?.[0].map((el) => el?.[COL_FILE_NAME]);
        await this._rollback(amount, parsedMigrations, this.query.bind(this));
    }
    async seed(matcher) {
        await this._seed(matcher);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpZW50TXlTUUwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDbGllbnRNeVNRTC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFzQixNQUFNLFlBQVksQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFPckQsT0FBTyxFQUNMLGNBQWMsRUFDZCxhQUFhLEVBQ2Isb0JBQW9CLEVBQ3BCLGdCQUFnQixHQUNqQixNQUFNLGNBQWMsQ0FBQztBQUN0QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFLL0MsTUFBTSxPQUFPLFdBQVksU0FBUSxjQUEyQjtJQUMxRCxjQUFjLENBQXFCO0lBQ25DLE9BQU8sR0FBZSxPQUFPLENBQUM7SUFFOUIsd0JBQXdCLEdBQUcsb0JBQW9CLENBQUM7SUFDaEQseUJBQXlCLEdBQUcsU0FBUyxDQUFDO0lBQ3RDLDJCQUEyQixHQUFHLFdBQVcsQ0FBQztJQUUxQyw2QkFBNkIsR0FDM0IsK0RBQStELGdCQUFnQixZQUFZLENBQUM7SUFFOUYsNkJBQTZCLEdBQzNCLGdCQUFnQixnQkFBZ0IsNkRBQTZELGFBQWEsWUFBWSxvQkFBb0Isc0JBQXNCLGNBQWMsZ0RBQWdELENBQUM7SUFFak8sd0JBQXdCLEdBQ3RCLFVBQVUsZ0JBQWdCLFFBQVEsYUFBYSxnREFBZ0QsYUFBYSx5SEFBeUgsYUFBYSx1Q0FBdUMsQ0FBQztJQUU1UixZQUFZLGlCQUFxQztRQUMvQyxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQztJQUMxQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU87UUFDWCxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMvQyxNQUFNLFdBQVcs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