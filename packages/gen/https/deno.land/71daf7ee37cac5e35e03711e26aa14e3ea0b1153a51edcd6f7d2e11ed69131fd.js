import { Context } from "./context.ts";
import { assert, STATUS_TEXT } from "./deps.ts";
import { hasNativeHttp, HttpServerNative, NativeRequest, } from "./http_server_native.ts";
import { HttpServerStd } from "./http_server_std.ts";
import { KeyStack } from "./keyStack.ts";
import { compose } from "./middleware.ts";
import { cloneState } from "./structured_clone.ts";
import { isConn } from "./util.ts";
const ADDR_REGEXP = /^\[?([^\]]*)\]?:([0-9]{1,5})$/;
export class ApplicationErrorEvent extends ErrorEvent {
    context;
    constructor(eventInitDict) {
        super("error", eventInitDict);
        this.context = eventInitDict.context;
    }
}
function logErrorListener({ error, context }) {
    if (error instanceof Error) {
        console.error(`[uncaught oak error]: ${error.name} - ${error.message}`);
    }
    else {
        console.error(`[uncaught oak error]\n`, error);
    }
    if (context) {
        console.error(`\nrequest:`, {
            url: context.request.url.toString(),
            method: context.request.method,
            hasBody: context.request.hasBody,
        });
        console.error(`response:`, {
            status: context.response.status,
            type: context.response.type,
            hasBody: !!context.response.body,
            writable: context.response.writable,
        });
    }
    if (error instanceof Error && error.stack) {
        console.error(`\n${error.stack.split("\n").slice(1).join("\n")}`);
    }
}
export class ApplicationListenEvent extends Event {
    hostname;
    port;
    secure;
    serverType;
    constructor(eventInitDict) {
        super("listen", eventInitDict);
        this.hostname = eventInitDict.hostname;
        this.port = eventInitDict.port;
        this.secure = eventInitDict.secure;
        this.serverType = eventInitDict.serverType;
    }
}
export class Application extends EventTarget {
    #composedMiddleware;
    #contextState;
    #eventHandler;
    #keys;
    #middleware = [];
    #serverConstructor;
    get keys() {
        return this.#keys;
    }
    set keys(keys) {
        if (!keys) {
            this.#keys = undefined;
            return;
        }
        else if (Array.isArray(keys)) {
            this.#keys = new KeyStack(keys);
        }
        else {
            this.#keys = keys;
        }
    }
    proxy;
    state;
    constructor(options = {}) {
        super();
        const { state, keys, proxy, serverConstructor = hasNativeHttp() ? HttpServerNative : HttpServerStd, contextState = "clone", logErrors = true, } = options;
        this.proxy = proxy ?? false;
        this.keys = keys;
        this.state = state ?? {};
        this.#serverConstructor = serverConstructor;
        this.#contextState = contextState;
        if (logErrors) {
            this.addEventListener("error", logErrorListener);
        }
    }
    #getComposed() {
        if (!this.#composedMiddleware) {
            this.#composedMiddleware = compose(this.#middleware);
        }
        return this.#composedMiddleware;
    }
    #getContextState() {
        switch (this.#contextState) {
            case "alias":
                return this.state;
            case "clone":
                return cloneState(this.state);
            case "empty":
                return {};
            case "prototype":
                return Object.create(this.state);
        }
    }
    #handleError(context, error) {
        if (!(error instanceof Error)) {
            error = new Error(`non-error thrown: ${JSON.stringify(error)}`);
        }
        const { message } = error;
        this.dispatchEvent(new ApplicationErrorEvent({ context, message, error }));
        if (!context.response.writable) {
            return;
        }
        for (const key of context.response.headers.keys()) {
            context.response.headers.delete(key);
        }
        if (error.headers && error.headers instanceof Headers) {
            for (const [key, value] of error.headers) {
                context.response.headers.set(key, value);
            }
        }
        context.response.type = "text";
        const status = context.response.status =
            Deno.errors && error instanceof Deno.errors.NotFound
                ? 404
                : error.status && typeof error.status === "number"
                    ? error.status
                    : 500;
        context.response.body = error.expose
            ? error.message
            : STATUS_TEXT.get(status);
    }
    async #handleRequest(request, secure, state) {
        const context = new Context(this, request, this.#getContextState(), secure);
        let resolve;
        const handlingPromise = new Promise((res) => resolve = res);
        state.handling.add(handlingPromise);
        if (!state.closing && !state.closed) {
            try {
                await this.#getComposed()(context);
            }
            catch (err) {
                this.#handleError(context, err);
            }
        }
        if (context.respond === false) {
            context.response.destroy();
            resolve();
            state.handling.delete(handlingPromise);
            return;
        }
        let closeResources = true;
        let response;
        try {
            if (request instanceof NativeRequest) {
                closeResources = false;
                response = await context.response.toDomResponse();
            }
            else {
                response = await context.response.toServerResponse();
            }
        }
        catch (err) {
            this.#handleError(context, err);
            if (request instanceof NativeRequest) {
                response = await context.response.toDomResponse();
            }
            else {
                response = await context.response.toServerResponse();
            }
        }
        assert(response);
        try {
            await request.respond(response);
        }
        catch (err) {
            this.#handleError(context, err);
        }
        finally {
            context.response.destroy(closeResources);
            resolve();
            state.handling.delete(handlingPromise);
            if (state.closing) {
                state.server.close();
                state.closed = true;
            }
        }
    }
    addEventListener(type, listener, options) {
        super.addEventListener(type, listener, options);
    }
    fetchEventHandler({ proxy = true, secure = true } = {}) {
        if (this.#eventHandler) {
            return this.#eventHandler;
        }
        this.proxy = proxy;
        return this.#eventHandler = {
            handleEvent: async (requestEvent) => {
                let resolve;
                let reject;
                const responsePromise = new Promise((res, rej) => {
                    resolve = res;
                    reject = rej;
                });
                const respondedPromise = requestEvent.respondWith(responsePromise);
                const response = await this.handle(requestEvent.request, undefined, secure);
                if (response) {
                    resolve(response);
                }
                else {
                    reject(new Error("No response returned from app handler."));
                }
                try {
                    await respondedPromise;
                }
                catch (error) {
                    this.dispatchEvent(new ApplicationErrorEvent({ error }));
                }
            },
        };
    }
    handle = (async (request, secureOrConn, secure = false) => {
        if (!this.#middleware.length) {
            throw new TypeError("There is no middleware to process requests.");
        }
        let contextRequest;
        if (request instanceof Request) {
            assert(isConn(secureOrConn) || typeof secureOrConn === "undefined");
            contextRequest = new NativeRequest({
                request,
                respondWith() {
                    return Promise.resolve(undefined);
                },
            }, { conn: secureOrConn });
        }
        else {
            assert(typeof secureOrConn === "boolean" ||
                typeof secureOrConn === "undefined");
            secure = secureOrConn ?? false;
            contextRequest = request;
        }
        const context = new Context(this, contextRequest, this.#getContextState(), secure);
        try {
            await this.#getComposed()(context);
        }
        catch (err) {
            this.#handleError(context, err);
        }
        if (context.respond === false) {
            context.response.destroy();
            return;
        }
        try {
            const response = contextRequest instanceof NativeRequest
                ? await context.response.toDomResponse()
                : await context.response.toServerResponse();
            context.response.destroy(false);
            return response;
        }
        catch (err) {
            this.#handleError(context, err);
            throw err;
        }
    });
    async listen(options) {
        if (!this.#middleware.length) {
            throw new TypeError("There is no middleware to process requests.");
        }
        if (typeof options === "string") {
            const match = ADDR_REGEXP.exec(options);
            if (!match) {
                throw TypeError(`Invalid address passed: "${options}"`);
            }
            const [, hostname, portStr] = match;
            options = { hostname, port: parseInt(portStr, 10) };
        }
        const server = new this.#serverConstructor(this, options);
        const { signal } = options;
        const state = {
            closed: false,
            closing: false,
            handling: new Set(),
            server,
        };
        if (signal) {
            signal.addEventListener("abort", () => {
                if (!state.handling.size) {
                    server.close();
                    state.closed = true;
                }
                state.closing = true;
            });
        }
        const { hostname, port, secure = false } = options;
        const serverType = server instanceof HttpServerStd
            ? "std"
            : server instanceof HttpServerNative
                ? "native"
                : "custom";
        this.dispatchEvent(new ApplicationListenEvent({ hostname, port, secure, serverType }));
        try {
            for await (const request of server) {
                this.#handleRequest(request, secure, state);
            }
            await Promise.all(state.handling);
        }
        catch (error) {
            const message = error instanceof Error
                ? error.message
                : "Application Error";
            this.dispatchEvent(new ApplicationErrorEvent({ message, error }));
        }
    }
    use(...middleware) {
        this.#middleware.push(...middleware);
        this.#composedMiddleware = undefined;
        return this;
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        const { keys, proxy, state } = this;
        return `${this.constructor.name} ${inspect({ "#middleware": this.#middleware, keys, proxy, state })}`;
    }
}
//# sourceMappingURL=data:application/json;base64,