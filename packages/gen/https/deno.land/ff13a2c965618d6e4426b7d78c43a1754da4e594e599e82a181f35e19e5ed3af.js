import { AsyncIterableReader } from "./async_iterable_reader.ts";
import { contentType, readerFromStreamReader, Status, STATUS_TEXT, } from "./deps.ts";
import { DomResponse } from "./http_server_native.ts";
import { BODY_TYPES, encodeUrl, isAsyncIterable, isHtml, isReader, isRedirectStatus, readableStreamFromReader, Uint8ArrayTransformStream, } from "./util.ts";
export const REDIRECT_BACK = Symbol("redirect backwards");
const encoder = new TextEncoder();
function toUint8Array(body) {
    let bodyText;
    if (BODY_TYPES.includes(typeof body)) {
        bodyText = String(body);
    }
    else {
        bodyText = JSON.stringify(body);
    }
    return encoder.encode(bodyText);
}
async function convertBodyToBodyInit(body, type) {
    let result;
    if (BODY_TYPES.includes(typeof body)) {
        result = String(body);
        type = type ?? (isHtml(result) ? "html" : "text/plain");
    }
    else if (isReader(body)) {
        result = readableStreamFromReader(body);
    }
    else if (ArrayBuffer.isView(body) || body instanceof ArrayBuffer ||
        body instanceof Blob || body instanceof URLSearchParams) {
        result = body;
    }
    else if (body instanceof ReadableStream) {
        result = body.pipeThrough(new Uint8ArrayTransformStream());
    }
    else if (body instanceof FormData) {
        result = body;
        type = "multipart/form-data";
    }
    else if (body && typeof body === "object") {
        result = JSON.stringify(body);
        type = type ?? "json";
    }
    else if (typeof body === "function") {
        const result = body.call(null);
        return convertBodyToBodyInit(await result, type);
    }
    else if (body) {
        throw new TypeError("Response body was set but could not be converted.");
    }
    return [result, type];
}
async function convertBodyToStdBody(body, type) {
    let result;
    if (BODY_TYPES.includes(typeof body)) {
        const bodyText = String(body);
        result = encoder.encode(bodyText);
        type = type ?? (isHtml(bodyText) ? "html" : "text/plain");
    }
    else if (body instanceof Uint8Array || isReader(body)) {
        result = body;
    }
    else if (body instanceof ReadableStream) {
        result = readerFromStreamReader(body.pipeThrough(new Uint8ArrayTransformStream()).getReader());
    }
    else if (isAsyncIterable(body)) {
        result = new AsyncIterableReader(body, toUint8Array);
    }
    else if (body && typeof body === "object") {
        result = encoder.encode(JSON.stringify(body));
        type = type ?? "json";
    }
    else if (typeof body === "function") {
        const result = body.call(null);
        return convertBodyToStdBody(await result, type);
    }
    else if (body) {
        throw new TypeError("Response body was set but could not be converted.");
    }
    return [result, type];
}
export class Response {
    #body;
    #bodySet = false;
    #domResponse;
    #headers = new Headers();
    #request;
    #resources = [];
    #serverResponse;
    #status;
    #type;
    #writable = true;
    async #getBodyInit() {
        const [body, type] = await convertBodyToBodyInit(this.body, this.type);
        this.type = type;
        return body;
    }
    async #getStdBody() {
        const [body, type] = await convertBodyToStdBody(this.body, this.type);
        this.type = type;
        return body;
    }
    #setContentType() {
        if (this.type) {
            const contentTypeString = contentType(this.type);
            if (contentTypeString && !this.headers.has("Content-Type")) {
                this.headers.append("Content-Type", contentTypeString);
            }
        }
    }
    get body() {
        return this.#body;
    }
    set body(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#bodySet = true;
        this.#body = value;
    }
    get headers() {
        return this.#headers;
    }
    set headers(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#headers = value;
    }
    get status() {
        if (this.#status) {
            return this.#status;
        }
        return this.body != null
            ? Status.OK
            : this.#bodySet
                ? Status.NoContent
                : Status.NotFound;
    }
    set status(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#status = value;
    }
    get type() {
        return this.#type;
    }
    set type(value) {
        if (!this.#writable) {
            throw new Error("The response is not writable.");
        }
        this.#type = value;
    }
    get writable() {
        return this.#writable;
    }
    constructor(request) {
        this.#request = request;
    }
    addResource(rid) {
        this.#resources.push(rid);
    }
    destroy(closeResources = true) {
        this.#writable = false;
        this.#body = undefined;
        this.#serverResponse = undefined;
        this.#domResponse = undefined;
        if (closeResources) {
            for (const rid of this.#resources) {
                Deno.close(rid);
            }
        }
    }
    redirect(url, alt = "/") {
        if (url === REDIRECT_BACK) {
            url = this.#request.headers.get("Referer") ?? String(alt);
        }
        else if (typeof url === "object") {
            url = String(url);
        }
        this.headers.set("Location", encodeUrl(url));
        if (!this.status || !isRedirectStatus(this.status)) {
            this.status = Status.Found;
        }
        if (this.#request.accepts("html")) {
            url = encodeURI(url);
            this.type = "text/html; charset=utf-8";
            this.body = `Redirecting to <a href="${url}">${url}</a>.`;
            return;
        }
        this.type = "text/plain; charset=utf-8";
        this.body = `Redirecting to ${url}.`;
    }
    async toDomResponse() {
        if (this.#domResponse) {
            return this.#domResponse;
        }
        const bodyInit = await this.#getBodyInit();
        this.#setContentType();
        const { headers } = this;
        if (!(bodyInit ||
            headers.has("Content-Type") ||
            headers.has("Content-Length"))) {
            headers.append("Content-Length", "0");
        }
        this.#writable = false;
        const status = this.status;
        const responseInit = {
            headers,
            status,
            statusText: STATUS_TEXT.get(status),
        };
        return this.#domResponse = new DomResponse(bodyInit, responseInit);
    }
    async toServerResponse() {
        if (this.#serverResponse) {
            return this.#serverResponse;
        }
        const body = await this.#getStdBody();
        this.#setContentType();
        const { headers } = this;
        if (!(body ||
            headers.has("Content-Type") ||
            headers.has("Content-Length"))) {
            headers.append("Content-Length", "0");
        }
        this.#writable = false;
        return this.#serverResponse = {
            body,
            headers,
            status: this.status,
        };
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        const { body, headers, status, type, writable } = this;
        return `${this.constructor.name} ${inspect({ body, headers, status, type, writable })}`;
    }
}
//# sourceMappingURL=data:application/json;base64,