import { PoolClient } from "./client.ts";
import { createParams, } from "./connection/connection_params.ts";
import { DeferredAccessStack } from "./utils/deferred.ts";
export class Pool {
    #available_connections;
    #connection_params;
    #ended = false;
    #lazy;
    #ready;
    #size;
    get available() {
        if (!this.#available_connections) {
            return 0;
        }
        return this.#available_connections.available;
    }
    get size() {
        if (!this.#available_connections) {
            return 0;
        }
        return this.#available_connections.size;
    }
    constructor(connection_params, size, lazy = false) {
        this.#connection_params = createParams(connection_params);
        this.#lazy = lazy;
        this.#size = size;
        this.#ready = this.#initialize();
    }
    async connect() {
        if (this.#ended) {
            this.#ready = this.#initialize();
        }
        await this.#ready;
        return this.#available_connections.pop();
    }
    async end() {
        if (this.#ended) {
            throw new Error("Pool connections have already been terminated");
        }
        await this.#ready;
        while (this.available > 0) {
            const client = await this.#available_connections.pop();
            await client.end();
        }
        this.#available_connections = undefined;
        this.#ended = true;
    }
    async #initialize() {
        const initialized = this.#lazy ? 0 : this.#size;
        const clients = Array.from({ length: this.#size }, async (_e, index) => {
            const client = new PoolClient(this.#connection_params, () => this.#available_connections.push(client));
            if (index < initialized) {
                await client.connect();
            }
            return client;
        });
        this.#available_connections = new DeferredAccessStack(await Promise.all(clients), (client) => client.connect(), (client) => client.connected);
        this.#ended = false;
    }
    async initialized() {
        if (!this.#available_connections) {
            return 0;
        }
        return await this.#available_connections.initialized();
    }
}
//# sourceMappingURL=data:application/json;base64,