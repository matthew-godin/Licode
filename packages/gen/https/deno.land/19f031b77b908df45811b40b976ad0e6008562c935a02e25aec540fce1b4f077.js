import { PostgreSQLClient } from "../deps.ts";
import { AbstractClient } from "./AbstractClient.ts";
import { COL_CREATED_AT, COL_FILE_NAME, MAX_FILE_NAME_LENGTH, TABLE_MIGRATIONS, } from "../consts.ts";
import { NessieError } from "../cli/errors.ts";
export class ClientPostgreSQL extends AbstractClient {
    dialect = "pg";
    #QUERY_TRANSACTION_START = `BEGIN TRANSACTION;`;
    #QUERY_TRANSACTION_COMMIT = `COMMIT TRANSACTION;`;
    #QUERY_TRANSACTION_ROLLBACK = `ROLLBACK TRANSACTION;`;
    #QUERY_MIGRATION_TABLE_EXISTS = `SELECT to_regclass('${TABLE_MIGRATIONS}');`;
    #QUERY_CREATE_MIGRATION_TABLE = `CREATE TABLE ${TABLE_MIGRATIONS} (id bigserial PRIMARY KEY, ${COL_FILE_NAME} varchar(${MAX_FILE_NAME_LENGTH}) UNIQUE, ${COL_CREATED_AT} timestamp (0) default current_timestamp);`;
    #QUERY_UPDATE_TIMESTAMPS = `UPDATE ${TABLE_MIGRATIONS} SET ${COL_FILE_NAME} = to_char(to_timestamp(CAST(SPLIT_PART(${COL_FILE_NAME}, '-', 1) AS BIGINT) / 1000), 'yyyymmddHH24MISS') || '-' || SPLIT_PART(${COL_FILE_NAME}, '-', 2) WHERE CAST(SPLIT_PART(${COL_FILE_NAME}, '-', 1) AS BIGINT) < 1672531200000;`;
    constructor(connectionOptions) {
        super({ client: new PostgreSQLClient(connectionOptions) });
    }
    async prepare() {
        await this.client.connect();
        const queryResult = await this.client
            .queryArray(this.#QUERY_MIGRATION_TABLE_EXISTS);
        const migrationTableExists = queryResult.rows?.[0]?.[0] === TABLE_MIGRATIONS;
        if (!migrationTableExists) {
            await this.client.queryArray(this.#QUERY_CREATE_MIGRATION_TABLE);
            console.info("Database setup complete");
        }
    }
    async updateTimestamps() {
        await this.client.connect();
        const queryResult = await this.client.queryArray(this.#QUERY_MIGRATION_TABLE_EXISTS);
        const migrationTableExists = queryResult.rows?.[0]?.[0] === TABLE_MIGRATIONS;
        if (migrationTableExists) {
            await this.client.queryArray(this.#QUERY_TRANSACTION_START);
            try {
                await this.client.queryArray(this.#QUERY_UPDATE_TIMESTAMPS);
                await this.client.queryArray(this.#QUERY_TRANSACTION_COMMIT);
                console.info("Updated timestamps");
            }
            catch (e) {
                await this.client.queryArray(this.#QUERY_TRANSACTION_ROLLBACK);
                throw e;
            }
        }
    }
    async query(query) {
        if (typeof query === "string")
            query = this.splitAndTrimQueries(query);
        const ra = [];
        for await (const qs of query) {
            try {
                ra.push(await this.client.queryArray(qs));
            }
            catch (e) {
                throw new NessieError(query + "\n" + e + "\n" + ra.join("\n"));
            }
        }
        return ra;
    }
    async close() {
        await this.client.end();
    }
    async migrate(amount) {
        const latestMigration = await this.client.queryArray(this.QUERY_GET_LATEST);
        await this._migrate(amount, latestMigration.rows?.[0]?.[0], this.query.bind(this));
    }
    async rollback(amount) {
        const allMigrations = await this.client.queryArray(this.QUERY_GET_ALL);
        await this._rollback(amount, allMigrations.rows?.map((el) => el?.[0]), this.query.bind(this));
    }
    async seed(matcher) {
        await this._seed(matcher);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpZW50UG9zdGdyZVNRTC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNsaWVudFBvc3RncmVTUUwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUEyQixNQUFNLFlBQVksQ0FBQztBQUN2RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFPckQsT0FBTyxFQUNMLGNBQWMsRUFDZCxhQUFhLEVBQ2Isb0JBQW9CLEVBQ3BCLGdCQUFnQixHQUNqQixNQUFNLGNBQWMsQ0FBQztBQUN0QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFLL0MsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGNBQWdDO0lBQ3BFLE9BQU8sR0FBZSxJQUFJLENBQUM7SUFFM0Isd0JBQXdCLEdBQUcsb0JBQW9CLENBQUM7SUFDaEQseUJBQXlCLEdBQUcscUJBQXFCLENBQUM7SUFDbEQsMkJBQTJCLEdBQUcsdUJBQXVCLENBQUM7SUFFdEQsNkJBQTZCLEdBQUcsdUJBQXVCLGdCQUFnQixLQUFLLENBQUM7SUFFN0UsNkJBQTZCLEdBQzNCLGdCQUFnQixnQkFBZ0IsK0JBQStCLGFBQWEsWUFBWSxvQkFBb0IsYUFBYSxjQUFjLDRDQUE0QyxDQUFDO0lBRXRMLHdCQUF3QixHQUN0QixVQUFVLGdCQUFnQixRQUFRLGFBQWEsMkNBQTJDLGFBQWEsMEVBQTBFLGFBQWEsbUNBQW1DLGFBQWEsdUNBQXVDLENBQUM7SUFFeFIsWUFBWSxpQkFBMEM7UUFDcEQsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPO1FBQ1gsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRTVCLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU07YUFDbEMsVUFB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