function pad(number, digits) {
    let padded = "" + number;
    while (padded.length < digits) {
        padded = "0" + padded;
    }
    return padded;
}
function encodeDate(date) {
    const year = pad(date.getFullYear(), 4);
    const month = pad(date.getMonth() + 1, 2);
    const day = pad(date.getDate(), 2);
    const hour = pad(date.getHours(), 2);
    const min = pad(date.getMinutes(), 2);
    const sec = pad(date.getSeconds(), 2);
    const ms = pad(date.getMilliseconds(), 3);
    const encodedDate = `${year}-${month}-${day}T${hour}:${min}:${sec}.${ms}`;
    const offset = date.getTimezoneOffset();
    const tzSign = offset > 0 ? "-" : "+";
    const absOffset = Math.abs(offset);
    const tzHours = pad(Math.floor(absOffset / 60), 2);
    const tzMinutes = pad(Math.floor(absOffset % 60), 2);
    const encodedTz = `${tzSign}${tzHours}:${tzMinutes}`;
    return encodedDate + encodedTz;
}
function escapeArrayElement(value) {
    const strValue = value.toString();
    const escapedValue = strValue.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
    return `"${escapedValue}"`;
}
function encodeArray(array) {
    let encodedArray = "{";
    array.forEach((element, index) => {
        if (index > 0) {
            encodedArray += ",";
        }
        if (element === null || typeof element === "undefined") {
            encodedArray += "NULL";
        }
        else if (Array.isArray(element)) {
            encodedArray += encodeArray(element);
        }
        else if (element instanceof Uint8Array) {
            throw new Error("Can't encode array of buffers.");
        }
        else {
            const encodedElement = encode(element);
            encodedArray += escapeArrayElement(encodedElement);
        }
    });
    encodedArray += "}";
    return encodedArray;
}
function encodeBytes(value) {
    const hex = Array.from(value)
        .map((val) => (val < 10 ? `0${val.toString(16)}` : val.toString(16)))
        .join("");
    return `\\x${hex}`;
}
export function encode(value) {
    if (value === null || typeof value === "undefined") {
        return null;
    }
    else if (value instanceof Uint8Array) {
        return encodeBytes(value);
    }
    else if (value instanceof Date) {
        return encodeDate(value);
    }
    else if (value instanceof Array) {
        return encodeArray(value);
    }
    else if (value instanceof Object) {
        return JSON.stringify(value);
    }
    else {
        return value.toString();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cHM6Ly9kZW5vLmxhbmQveC9wb3N0Z3Jlc0B2MC4xMS4yL3F1ZXJ5L2VuY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLEdBQUcsQ0FBQyxNQUFjLEVBQUUsTUFBYztJQUN6QyxJQUFJLE1BQU0sR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLE9BQU8sTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUU7UUFDN0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUM7S0FDdkI7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsSUFBVTtJQUU1QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyQyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUxQyxNQUFNLFdBQVcsR0FBRyxHQUFHLElBQUksSUFBSSxLQUFL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