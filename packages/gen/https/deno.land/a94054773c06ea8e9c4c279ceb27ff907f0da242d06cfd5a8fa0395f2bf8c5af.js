/*!
 * Adapted from koa-send at https://github.com/koajs/send and which is licensed
 * with the MIT license.
 */
import { calculate, ifNoneMatch } from "./etag.ts";
import { createHttpError } from "./httpError.ts";
import { basename, extname, LimitedReader, parse, readAll, Status, } from "./deps.ts";
import { ifRange, MultiPartStream, parseRange } from "./range.ts";
import { assert, decodeComponent, getBoundary, resolvePath } from "./util.ts";
const MAXBUFFER_DEFAULT = 1_048_576;
let boundary;
function isHidden(path) {
    const pathArr = path.split("/");
    for (const segment of pathArr) {
        if (segment[0] === "." && segment !== "." && segment !== "..") {
            return true;
        }
        return false;
    }
}
async function exists(path) {
    try {
        return (await Deno.stat(path)).isFile;
    }
    catch {
        return false;
    }
}
async function getEntity(path, mtime, stats, maxbuffer, response) {
    let body;
    let entity;
    const file = await Deno.open(path, { read: true });
    if (stats.size < maxbuffer) {
        const buffer = await readAll(file);
        file.close();
        body = entity = buffer;
    }
    else {
        response.addResource(file.rid);
        body = file;
        entity = {
            mtime: new Date(mtime),
            size: stats.size,
        };
    }
    return [body, entity];
}
async function sendRange(response, body, range, size) {
    const ranges = parseRange(range, size);
    if (ranges.length === 0) {
        throw createHttpError(Status.RequestedRangeNotSatisfiable);
    }
    response.status = Status.PartialContent;
    if (ranges.length === 1) {
        const [byteRange] = ranges;
        response.headers.set("Content-Length", String(byteRange.end - byteRange.start + 1));
        response.headers.set("Content-Range", `bytes ${byteRange.start}-${byteRange.end}/${size}`);
        if (body instanceof Uint8Array) {
            response.body = body.slice(byteRange.start, byteRange.end + 1);
        }
        else {
            await body.seek(byteRange.start, Deno.SeekMode.Start);
            response.body = new LimitedReader(body, byteRange.end - byteRange.start + 1);
        }
    }
    else {
        assert(response.type);
        if (!boundary) {
            boundary = await getBoundary();
        }
        response.headers.set("content-type", `multipart/byteranges; boundary=${boundary}`);
        const multipartBody = new MultiPartStream(body, response.type, ranges, size, boundary);
        response.headers.set("content-length", String(multipartBody.contentLength()));
        response.body = multipartBody;
    }
}
export async function send({ request, response }, path, options = { root: "" }) {
    const { brotli = true, contentTypes = {}, extensions, format = true, gzip = true, hidden = false, immutable = false, index, maxbuffer = MAXBUFFER_DEFAULT, maxage = 0, root, } = options;
    const trailingSlash = path[path.length - 1] === "/";
    path = decodeComponent(path.substr(parse(path).root.length));
    if (index && trailingSlash) {
        path += index;
    }
    if (!hidden && isHidden(path)) {
        throw createHttpError(403);
    }
    path = resolvePath(root, path);
    let encodingExt = "";
    if (brotli &&
        request.acceptsEncodings("br", "identity") === "br" &&
        (await exists(`${path}.br`))) {
        path = `${path}.br`;
        response.headers.set("Content-Encoding", "br");
        response.headers.delete("Content-Length");
        encodingExt = ".br";
    }
    else if (gzip &&
        request.acceptsEncodings("gzip", "identity") === "gzip" &&
        (await exists(`${path}.gz`))) {
        path = `${path}.gz`;
        response.headers.set("Content-Encoding", "gzip");
        response.headers.delete("Content-Length");
        encodingExt = ".gz";
    }
    if (extensions && !/\.[^/]*$/.exec(path)) {
        for (let ext of extensions) {
            if (!/^\./.exec(ext)) {
                ext = `.${ext}`;
            }
            if (await exists(`${path}${ext}`)) {
                path += ext;
                break;
            }
        }
    }
    let stats;
    try {
        stats = await Deno.stat(path);
        if (stats.isDirectory) {
            if (format && index) {
                path += `/${index}`;
                stats = await Deno.stat(path);
            }
            else {
                return;
            }
        }
    }
    catch (err) {
        if (err instanceof Deno.errors.NotFound) {
            throw createHttpError(404, err.message);
        }
        if (err instanceof Error && err.message.startsWith("ENOENT:")) {
            throw createHttpError(404, err.message);
        }
        throw createHttpError(500, err instanceof Error ? err.message : "[non-error thrown]");
    }
    let mtime = null;
    if (response.headers.has("Last-Modified")) {
        mtime = new Date(response.headers.get("Last-Modified")).getTime();
    }
    else if (stats.mtime) {
        mtime = stats.mtime.getTime();
        mtime -= mtime % 1000;
        response.headers.set("Last-Modified", new Date(mtime).toUTCString());
    }
    if (!response.headers.has("Cache-Control")) {
        const directives = [`max-age=${(maxage / 1000) | 0}`];
        if (immutable) {
            directives.push("immutable");
        }
        response.headers.set("Cache-Control", directives.join(","));
    }
    if (!response.type) {
        response.type = encodingExt !== ""
            ? extname(basename(path, encodingExt))
            : contentTypes[extname(path)] ?? extname(path);
    }
    let entity = null;
    let body = null;
    if (request.headers.has("If-None-Match") && mtime) {
        [body, entity] = await getEntity(path, mtime, stats, maxbuffer, response);
        if (!await ifNoneMatch(request.headers.get("If-None-Match"), entity)) {
            response.headers.set("ETag", await calculate(entity));
            response.status = 304;
            return path;
        }
    }
    if (request.headers.has("If-Modified-Since") && mtime) {
        const ifModifiedSince = new Date(request.headers.get("If-Modified-Since"));
        if (ifModifiedSince.getTime() >= mtime) {
            response.status = 304;
            return path;
        }
    }
    if (!body || !entity) {
        [body, entity] = await getEntity(path, mtime ?? 0, stats, maxbuffer, response);
    }
    if (request.headers.has("If-Range") && mtime &&
        await ifRange(request.headers.get("If-Range"), mtime, entity) &&
        request.headers.has("Range")) {
        await sendRange(response, body, request.headers.get("Range"), stats.size);
        return path;
    }
    if (request.headers.has("Range")) {
        await sendRange(response, body, request.headers.get("Range"), stats.size);
        return path;
    }
    response.headers.set("Content-Length", String(stats.size));
    response.body = body;
    if (!response.headers.has("ETag")) {
        response.headers.set("ETag", await calculate(entity));
    }
    if (!response.headers.has("Accept-Ranges")) {
        response.headers.set("Accept-Ranges", "bytes");
    }
    return path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBR0gsT0FBTyxFQUFFLFNBQVMsRUFBWSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFDTCxRQUFRLEVBQ1IsT0FBTyxFQUNQLGFBQWEsRUFDYixLQUFLLEVBQ0wsT0FBTyxFQUNQLE1BQU0sR0FDUCxNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU5RSxNQUFNLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUlwQyxJQUFJLFFBQTRCLENBQUM7QUEyRWpDLFNBQVMsUUFBUSxDQUFDLElBQVk7SUFDNUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxLQUFLLE1BQU0sT0FBTyxJQUFJLE9BQU8sRUFBRTtRQUM3QixJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksT0FBTyxLQUFLLEdBQUcsSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQzdELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FBQztBQUVELEtBQUssVUFBVSxNQUFNLENBQUMsSUFBWTtJQUNoQyxJQUFJO1FBQ0YsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztLQUN2QztJQUFDLE1BQU07UUFDTixPQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0gsQ0FB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QUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUM1QjtRQUNBLE1BQU0sU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNFLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2hDLE1BQU0sU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNFLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0QsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFFckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2pDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQzFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNoRDtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQWRhcHRlZCBmcm9tIGtvYS1zZW5kIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9rb2Fqcy9zZW5kIGFuZCB3aGljaCBpcyBsaWNlbnNlZFxuICogd2l0aCB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBDb250ZXh0IH0gZnJvbSBcIi4vY29udGV4dC50c1wiO1xuaW1wb3J0IHsgY2FsY3VsYXRlLCBGaWxlSW5mbywgaWZOb25lTWF0Y2ggfSBmcm9tIFwiLi9ldGFnLnRzXCI7XG5pbXBvcnQgeyBjcmVhdGVIdHRwRXJyb3IgfSBmcm9tIFwiLi9odHRwRXJyb3IudHNcIjtcbmltcG9ydCB7XG4gIGJhc2VuYW1lLFxuICBleHRuYW1lLFxuICBMaW1pdGVkUmVhZGVyLFxuICBwYXJzZSxcbiAgcmVhZEFsbCxcbiAgU3RhdHVzLFxufSBmcm9tIFwiLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBpZlJhbmdlLCBNdWx0aVBhcnRTdHJlYW0sIHBhcnNlUmFuZ2UgfSBmcm9tIFwiLi9yYW5nZS50c1wiO1xuaW1wb3J0IHR5cGUgeyBSZXNwb25zZSB9IGZyb20gXCIuL3Jlc3BvbnNlLnRzXCI7XG5pbXBvcnQgeyBhc3NlcnQsIGRlY29kZUNvbXBvbmVudCwgZ2V0Qm91bmRhcnksIHJlc29sdmVQYXRoIH0gZnJvbSBcIi4vdXRpbC50c1wiO1xuXG5jb25zdCBNQVhCVUZGRVJfREVGQVVMVCA9IDFfMDQ4XzU3NjsgLy8gMU1pQjtcblxuLy8gdGhpcyB3aWxsIGJlIGxhemlseSBzZXQgYXMgaXQgbmVlZHMgdG8gYmUgZG9uZSBhc3luY2hyb25vdXNseSBhbmQgd2Ugd2FudCB0b1xuLy8gYXZvaWQgdG9wIGxldmVsIGF3YWl0XG5sZXQgYm91bmRhcnk6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGludGVyZmFjZSBTZW5kT3B0aW9ucyB7XG4gIC8qKiBUcnkgdG8gc2VydmUgdGhlIGJyb3RsaSB2ZXJzaW9uIG9mIGEgZmlsZSBhdXRvbWF0aWNhbGx5IHdoZW4gYnJvdGxpIGlzXG4gICAqIHN1cHBvcnRlZCBieSBhIGNsaWVudCBhbmQgaWYgdGhlIHJlcXVlc3RlZCBmaWxlIHdpdGggYC5icmAgZXh0ZW5zaW9uXG4gICAqIGV4aXN0cy4gKGRlZmF1bHRzIHRvIGB0cnVlYCkgKi9cbiAgYnJvdGxpPzogYm9vbGVhbjtcblxuICAvKiogQSByZWNvcmQgb2YgZXh0ZW5zaW9ucyBhbmQgY29udGVudCB0eXBlcyB0aGF0IHNob3VsZCBiZSB1c2VkIHdoZW5cbiAgICogZGV0ZXJtaW5pbmcgdGhlIGNvbnRlbnQgb2YgYSBmaWxlIGJlaW5nIHNlcnZlZC4gQnkgZGVmYXVsdCwgdGhlXG4gICAqIFtgbWVkaWFfdHlwZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9vYWtzZXJ2ZXIvbWVkaWFfdHlwZXMvKSBkYXRhYmFzZSBpcyB1c2VkXG4gICAqIHRvIG1hcCBhbiBleHRlbnNpb24gdG8gdGhlIHNlcnZlZCBjb250ZW50LXR5cGUuIFRoZSBrZXlzIG9mIHRoZSBtYXAgYXJlXG4gICAqIGV4dGVuc2lvbnMsIGFuZCB2YWx1ZXMgYXJlIHRoZSBjb250ZW50IHR5cGVzIHRvIHVzZS4gVGhlIGNvbnRlbnQgdHlwZSBjYW5cbiAgICogYmUgYSBwYXJ0aWFsIGNvbnRlbnQgdHlwZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgY29udGVudCB0eXBlXG4gICAqIGhlYWRlci5cbiAgICpcbiAgICogQW55IGV4dGVuc2lvbnMgbWF0Y2hlZCB3aWxsIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGJlaGF2aW9yLiBLZXkgc2hvdWxkXG4gICAqIGluY2x1ZGUgdGhlIGxlYWRpbmcgZG90IChlLmcuIGAuZXh0YCBpbnN0ZWFkIG9mIGp1c3QgYGV4dGApLlxuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBhcHAudXNlKChjdHgpID0+IHtcbiAgICogICByZXR1cm4gc2VuZChjdHgsIGN0eC5yZXF1ZXN0LnVybC5wYXRobmFtZSwge1xuICAgKiAgICAgY29udGVudFR5cGVzOiB7XG4gICAqICAgICAgIFwiLmltcG9ydG1hcFwiOiBcImFwcGxpY2F0aW9uL2ltcG9ydG1hcCtqc29uXCJcbiAgICogICAgIH0sXG4gICAqICAgICByb290OiBcIi5cIixcbiAgICogICB9KVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjb250ZW50VHlwZXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gIC8qKiBUcnkgdG8gbWF0Y2ggZXh0ZW5zaW9ucyBmcm9tIHBhc3NlZCBhcnJheSB0byBzZWFyY2ggZm9yIGZpbGUgd2hlbiBub1xuICAgKiBleHRlbnNpb24gaXMgc3VmZmljZWQgaW4gVVJMLiBGaXJzdCBmb3VuZCBpcyBzZXJ2ZWQuIChkZWZhdWx0cyB0b1xuICAgKiBgdW5kZWZpbmVkYCkgKi9cbiAgZXh0ZW5zaW9ucz86IHN0cmluZ1tdO1xuXG4gIC8qKiBJZiBgdHJ1ZWAsIGZvcm1hdCB0aGUgcGF0aCB0byBzZXJ2ZSBzdGF0aWMgZmlsZSBzZXJ2ZXJzIGFuZCBub3QgcmVxdWlyZSBhXG4gICAqIHRyYWlsaW5nIHNsYXNoIGZvciBkaXJlY3Rvcmllcywgc28gdGhhdCB5b3UgY2FuIGRvIGJvdGggYC9kaXJlY3RvcnlgIGFuZFxuICAgKiBgL2RpcmVjdG9yeS9gLiAoZGVmYXVsdHMgdG8gYHRydWVgKSAqL1xuICBmb3JtYXQ/OiBib29sZWFuO1xuXG4gIC8qKiBUcnkgdG8gc2VydmUgdGhlIGd6aXBwZWQgdmVyc2lvbiBvZiBhIGZpbGUgYXV0b21hdGljYWxseSB3aGVuIGd6aXAgaXNcbiAgICogc3VwcG9ydGVkIGJ5IGEgY2xpZW50IGFuZCBpZiB0aGUgcmVxdWVzdGVkIGZpbGUgd2l0aCBgLmd6YCBleHRlbnNpb25cbiAgICogZXhpc3RzLiAoZGVmYXVsdHMgdG8gYHRydWVgKS4gKi9cbiAgZ3ppcD86IGJvb2xlYW47XG5cbiAgLyoqIEFsbG93IHRyYW5zZmVyIG9mIGhpZGRlbiBmaWxlcy4gKGRlZmF1bHRzIHRvIGBmYWxzZWApICovXG4gIGhpZGRlbj86IGJvb2xlYW47XG5cbiAgLyoqIFRlbGwgdGhlIGJyb3dzZXIgdGhlIHJlc291cmNlIGlzIGltbXV0YWJsZSBhbmQgY2FuIGJlIGNhY2hlZFxuICAgKiBpbmRlZmluaXRlbHkuIChkZWZhdWx0cyB0byBgZmFsc2VgKSAqL1xuICBpbW11dGFibGU/OiBib29sZWFuO1xuXG4gIC8qKiBOYW1lIG9mIHRoZSBpbmRleCBmaWxlIHRvIHNlcnZlIGF1dG9tYXRpY2FsbHkgd2hlbiB2aXNpdGluZyB0aGUgcm9vdFxuICAgKiBsb2NhdGlvbi4gKGRlZmF1bHRzIHRvIG5vbmUpICovXG4gIGluZGV4Pzogc3RyaW5nO1xuXG4gIC8qKiBCcm93c2VyIGNhY2hlIG1heC1hZ2UgaW4gbWlsbGlzZWNvbmRzLiAoZGVmYXVsdHMgdG8gYDBgKSAqL1xuICBtYXhhZ2U/OiBudW1iZXI7XG5cbiAgLyoqIEEgc2l6ZSBpbiBieXRlcyB3aGVyZSBpZiB0aGUgZmlsZSBpcyBsZXNzIHRoYW4gdGhpcyBzaXplLCB0aGUgZmlsZSB3aWxsXG4gICAqIGJlIHJlYWQgaW50byBtZW1vcnkgYnkgc2VuZCBpbnN0ZWFkIG9mIHJldHVybmluZyBhIGZpbGUgaGFuZGxlLiAgRmlsZXMgbGVzc1xuICAgKiB0aGFuIHRoZSBieXRlIHNpemUgd2lsbCBzZW5kIGFuIFwic3Ryb25nXCIgYEVUYWdgIGhlYWRlciB3aGlsZSB0aG9zZSBsYXJnZXJcbiAgICogdGhhbiB0aGUgYnl0ZXMgc2l6ZSB3aWxsIG9ubHkgYmUgYWJsZSB0byBzZW5kIGEgXCJ3ZWFrXCIgYEVUYWdgIGhlYWRlciAoYXNcbiAgICogdGhleSBjYW5ub3QgaGFzaCB0aGUgY29udGVudHMgb2YgdGhlIGZpbGUpLiAoZGVmYXVsdHMgdG8gMU1pQilcbiAgICovXG4gIG1heGJ1ZmZlcj86IG51bWJlcjtcblxuICAvKiogUm9vdCBkaXJlY3RvcnkgdG8gcmVzdHJpY3QgZmlsZSBhY2Nlc3MuICovXG4gIHJvb3Q6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gaXNIaWRkZW4ocGF0aDogc3RyaW5nKSB7XG4gIGNvbnN0IHBhdGhBcnIgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHBhdGhBcnIpIHtcbiAgICBpZiAoc2VnbWVudFswXSA9PT0gXCIuXCIgJiYgc2VnbWVudCAhPT0gXCIuXCIgJiYgc2VnbWVudCAhPT0gXCIuLlwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV4aXN0cyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gKGF3YWl0IERlbm8uc3RhdChwYXRoKSkuaXNGaWxlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RW50aXR5KFxuICBwYXRoOiBzdHJpbmcsXG4gIG10aW1lOiBudW1iZXIsXG4gIHN0YXRzOiBEZW5vLkZpbGVJbmZvLFxuICBtYXhidWZmZXI6IG51bWJlcixcbiAgcmVzcG9uc2U6IFJlc3BvbnNlLFxuKTogUHJvbWlzZTxbVWludDhBcnJheSB8IERlbm8uRnNGaWxlLCBVaW50OEFycmF5IHwgRmlsZUluZm9dPiB7XG4gIGxldCBib2R5OiBVaW50OEFycmF5IHwgRGVuby5Gc0ZpbGU7XG4gIGxldCBlbnRpdHk6IFVpbnQ4QXJyYXkgfCBGaWxlSW5mbztcbiAgY29uc3QgZmlsZSA9IGF3YWl0IERlbm8ub3BlbihwYXRoLCB7IHJlYWQ6IHRydWUgfSk7XG4gIGlmIChzdGF0cy5zaXplIDwgbWF4YnVmZmVyKSB7XG4gICAgY29uc3QgYnVmZmVyID0gYXdhaXQgcmVhZEFsbChmaWxlKTtcbiAgICBmaWxlLmNsb3NlKCk7XG4gICAgYm9keSA9IGVudGl0eSA9IGJ1ZmZlcjtcbiAgfSBlbHNlIHtcbiAgICByZXNwb25zZS5hZGRSZXNvdXJjZShmaWxlLnJpZCk7XG4gICAgYm9keSA9IGZpbGU7XG4gICAgZW50aXR5ID0ge1xuICAgICAgbXRpbWU6IG5ldyBEYXRlKG10aW1lISksXG4gICAgICBzaXplOiBzdGF0cy5zaXplLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIFtib2R5LCBlbnRpdHldO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZW5kUmFuZ2UoXG4gIHJlc3BvbnNlOiBSZXNwb25zZSxcbiAgYm9keTogVWludDhBcnJheSB8IERlbm8uRnNGaWxlLFxuICByYW5nZTogc3RyaW5nLFxuICBzaXplOiBudW1iZXIsXG4pIHtcbiAgY29uc3QgcmFuZ2VzID0gcGFyc2VSYW5nZShyYW5nZSwgc2l6ZSk7XG4gIGlmIChyYW5nZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgY3JlYXRlSHR0cEVycm9yKFN0YXR1cy5SZXF1ZXN0ZWRSYW5nZU5vdFNhdGlzZmlhYmxlKTtcbiAgfVxuICByZXNwb25zZS5zdGF0dXMgPSBTdGF0dXMuUGFydGlhbENvbnRlbnQ7XG4gIGlmIChyYW5nZXMubGVuZ3RoID09PSAxKSB7XG4gICAgY29uc3QgW2J5dGVSYW5nZV0gPSByYW5nZXM7XG4gICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXG4gICAgICBcIkNvbnRlbnQtTGVuZ3RoXCIsXG4gICAgICBTdHJpbmcoYnl0ZVJhbmdlLmVuZCAtIGJ5dGVSYW5nZS5zdGFydCArIDEpLFxuICAgICk7XG4gICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXG4gICAgICBcIkNvbnRlbnQtUmFuZ2VcIixcbiAgICAgIGBieXRlcyAke2J5dGVSYW5nZS5zdGFydH0tJHtieXRlUmFuZ2UuZW5kfS8ke3NpemV9YCxcbiAgICApO1xuICAgIGlmIChib2R5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgcmVzcG9uc2UuYm9keSA9IGJvZHkuc2xpY2UoYnl0ZVJhbmdlLnN0YXJ0LCBieXRlUmFuZ2UuZW5kICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IGJvZHkuc2VlayhieXRlUmFuZ2Uuc3RhcnQsIERlbm8uU2Vla01vZGUuU3RhcnQpO1xuICAgICAgcmVzcG9uc2UuYm9keSA9IG5ldyBMaW1pdGVkUmVhZGVyKFxuICAgICAgICBib2R5LFxuICAgICAgICBieXRlUmFuZ2UuZW5kIC0gYnl0ZVJhbmdlLnN0YXJ0ICsgMSxcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFzc2VydChyZXNwb25zZS50eXBlKTtcbiAgICBpZiAoIWJvdW5kYXJ5KSB7XG4gICAgICBib3VuZGFyeSA9IGF3YWl0IGdldEJvdW5kYXJ5KCk7XG4gICAgfVxuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFxuICAgICAgXCJjb250ZW50LXR5cGVcIixcbiAgICAgIGBtdWx0aXBhcnQvYnl0ZXJhbmdlczsgYm91bmRhcnk9JHtib3VuZGFyeX1gLFxuICAgICk7XG4gICAgY29uc3QgbXVsdGlwYXJ0Qm9keSA9IG5ldyBNdWx0aVBhcnRTdHJlYW0oXG4gICAgICBib2R5LFxuICAgICAgcmVzcG9uc2UudHlwZSxcbiAgICAgIHJhbmdlcyxcbiAgICAgIHNpemUsXG4gICAgICBib3VuZGFyeSxcbiAgICApO1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFxuICAgICAgXCJjb250ZW50LWxlbmd0aFwiLFxuICAgICAgU3RyaW5nKG11bHRpcGFydEJvZHkuY29udGVudExlbmd0aCgpKSxcbiAgICApO1xuICAgIHJlc3BvbnNlLmJvZHkgPSBtdWx0aXBhcnRCb2R5O1xuICB9XG59XG5cbi8qKiBBc3luY2hyb25vdXNseSBmdWxmaWxsIGEgcmVzcG9uc2Ugd2l0aCBhIGZpbGUgZnJvbSB0aGUgbG9jYWwgZmlsZVxuICogc3lzdGVtLlxuICpcbiAqIFJlcXVpcmVzIERlbm8gcmVhZCBwZXJtaXNzaW9uIGZvciB0aGUgYHJvb3RgIGRpcmVjdG9yeS4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kKFxuICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICB7IHJlcXVlc3QsIHJlc3BvbnNlIH06IENvbnRleHQ8YW55PixcbiAgcGF0aDogc3RyaW5nLFxuICBvcHRpb25zOiBTZW5kT3B0aW9ucyA9IHsgcm9vdDogXCJcIiB9LFxuKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgY29uc3Qge1xuICAgIGJyb3RsaSA9IHRydWUsXG4gICAgY29udGVudFR5cGVzID0ge30sXG4gICAgZXh0ZW5zaW9ucyxcbiAgICBmb3JtYXQgPSB0cnVlLFxuICAgIGd6aXAgPSB0cnVlLFxuICAgIGhpZGRlbiA9IGZhbHNlLFxuICAgIGltbXV0YWJsZSA9IGZhbHNlLFxuICAgIGluZGV4LFxuICAgIG1heGJ1ZmZlciA9IE1BWEJVRkZFUl9ERUZBVUxULFxuICAgIG1heGFnZSA9IDAsXG4gICAgcm9vdCxcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHRyYWlsaW5nU2xhc2ggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV0gPT09IFwiL1wiO1xuICBwYXRoID0gZGVjb2RlQ29tcG9uZW50KHBhdGguc3Vic3RyKHBhcnNlKHBhdGgpLnJvb3QubGVuZ3RoKSk7XG4gIGlmIChpbmRleCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSBpbmRleDtcbiAgfVxuXG4gIGlmICghaGlkZGVuICYmIGlzSGlkZGVuKHBhdGgpKSB7XG4gICAgdGhyb3cgY3JlYXRlSHR0cEVycm9yKDQwMyk7XG4gIH1cblxuICBwYXRoID0gcmVzb2x2ZVBhdGgocm9vdCwgcGF0aCk7XG5cbiAgbGV0IGVuY29kaW5nRXh0ID0gXCJcIjtcbiAgaWYgKFxuICAgIGJyb3RsaSAmJlxuICAgIHJlcXVlc3QuYWNjZXB0c0VuY29kaW5ncyhcImJyXCIsIFwiaWRlbnRpdHlcIikgPT09IFwiYnJcIiAmJlxuICAgIChhd2FpdCBleGlzdHMoYCR7cGF0aH0uYnJgKSlcbiAgKSB7XG4gICAgcGF0aCA9IGAke3BhdGh9LmJyYDtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkNvbnRlbnQtRW5jb2RpbmdcIiwgXCJiclwiKTtcbiAgICByZXNwb25zZS5oZWFkZXJzLmRlbGV0ZShcIkNvbnRlbnQtTGVuZ3RoXCIpO1xuICAgIGVuY29kaW5nRXh0ID0gXCIuYnJcIjtcbiAgfSBlbHNlIGlmIChcbiAgICBnemlwICYmXG4gICAgcmVxdWVzdC5hY2NlcHRzRW5jb2RpbmdzKFwiZ3ppcFwiLCBcImlkZW50aXR5XCIpID09PSBcImd6aXBcIiAmJlxuICAgIChhd2FpdCBleGlzdHMoYCR7cGF0aH0uZ3pgKSlcbiAgKSB7XG4gICAgcGF0aCA9IGAke3BhdGh9Lmd6YDtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkNvbnRlbnQtRW5jb2RpbmdcIiwgXCJnemlwXCIpO1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuZGVsZXRlKFwiQ29udGVudC1MZW5ndGhcIik7XG4gICAgZW5jb2RpbmdFeHQgPSBcIi5nelwiO1xuICB9XG5cbiAgaWYgKGV4dGVuc2lvbnMgJiYgIS9cXC5bXi9dKiQvLmV4ZWMocGF0aCkpIHtcbiAgICBmb3IgKGxldCBleHQgb2YgZXh0ZW5zaW9ucykge1xuICAgICAgaWYgKCEvXlxcLi8uZXhlYyhleHQpKSB7XG4gICAgICAgIGV4dCA9IGAuJHtleHR9YDtcbiAgICAgIH1cbiAgICAgIGlmIChhd2FpdCBleGlzdHMoYCR7cGF0aH0ke2V4dH1gKSkge1xuICAgICAgICBwYXRoICs9IGV4dDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IHN0YXRzOiBEZW5vLkZpbGVJbmZvO1xuICB0cnkge1xuICAgIHN0YXRzID0gYXdhaXQgRGVuby5zdGF0KHBhdGgpO1xuXG4gICAgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KSB7XG4gICAgICBpZiAoZm9ybWF0ICYmIGluZGV4KSB7XG4gICAgICAgIHBhdGggKz0gYC8ke2luZGV4fWA7XG4gICAgICAgIHN0YXRzID0gYXdhaXQgRGVuby5zdGF0KHBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIERlbm8uZXJyb3JzLk5vdEZvdW5kKSB7XG4gICAgICB0aHJvdyBjcmVhdGVIdHRwRXJyb3IoNDA0LCBlcnIubWVzc2FnZSk7XG4gICAgfVxuICAgIC8vIFRPRE8oQGtpdHNvbmspIHJlbW92ZSB3aGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9kZW5vbGFuZC9ub2RlX2Rlbm9fc2hpbXMvaXNzdWVzLzg3IHJlc29sdmVkXG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yICYmIGVyci5tZXNzYWdlLnN0YXJ0c1dpdGgoXCJFTk9FTlQ6XCIpKSB7XG4gICAgICB0aHJvdyBjcmVhdGVIdHRwRXJyb3IoNDA0LCBlcnIubWVzc2FnZSk7XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUh0dHBFcnJvcihcbiAgICAgIDUwMCxcbiAgICAgIGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBcIltub24tZXJyb3IgdGhyb3duXVwiLFxuICAgICk7XG4gIH1cblxuICBsZXQgbXRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBpZiAocmVzcG9uc2UuaGVhZGVycy5oYXMoXCJMYXN0LU1vZGlmaWVkXCIpKSB7XG4gICAgbXRpbWUgPSBuZXcgRGF0ZShyZXNwb25zZS5oZWFkZXJzLmdldChcIkxhc3QtTW9kaWZpZWRcIikhKS5nZXRUaW1lKCk7XG4gIH0gZWxzZSBpZiAoc3RhdHMubXRpbWUpIHtcbiAgICAvLyBSb3VuZCBkb3duIHRvIHNlY29uZCBiZWNhdXNlIGl0J3MgdGhlIHByZWNpc2lvbiBvZiB0aGUgVVRDIHN0cmluZy5cbiAgICBtdGltZSA9IHN0YXRzLm10aW1lLmdldFRpbWUoKTtcbiAgICBtdGltZSAtPSBtdGltZSAlIDEwMDA7XG4gICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXCJMYXN0LU1vZGlmaWVkXCIsIG5ldyBEYXRlKG10aW1lKS50b1VUQ1N0cmluZygpKTtcbiAgfVxuXG4gIGlmICghcmVzcG9uc2UuaGVhZGVycy5oYXMoXCJDYWNoZS1Db250cm9sXCIpKSB7XG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IFtgbWF4LWFnZT0keyhtYXhhZ2UgLyAxMDAwKSB8IDB9YF07XG4gICAgaWYgKGltbXV0YWJsZSkge1xuICAgICAgZGlyZWN0aXZlcy5wdXNoKFwiaW1tdXRhYmxlXCIpO1xuICAgIH1cbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkNhY2hlLUNvbnRyb2xcIiwgZGlyZWN0aXZlcy5qb2luKFwiLFwiKSk7XG4gIH1cbiAgaWYgKCFyZXNwb25zZS50eXBlKSB7XG4gICAgcmVzcG9uc2UudHlwZSA9IGVuY29kaW5nRXh0ICE9PSBcIlwiXG4gICAgICA/IGV4dG5hbWUoYmFzZW5hbWUocGF0aCwgZW5jb2RpbmdFeHQpKVxuICAgICAgOiBjb250ZW50VHlwZXNbZXh0bmFtZShwYXRoKV0gPz8gZXh0bmFtZShwYXRoKTtcbiAgfVxuXG4gIGxldCBlbnRpdHk6IFVpbnQ4QXJyYXkgfCBGaWxlSW5mbyB8IG51bGwgPSBudWxsO1xuICBsZXQgYm9keTogVWludDhBcnJheSB8IERlbm8uRnNGaWxlIHwgbnVsbCA9IG51bGw7XG5cbiAgaWYgKHJlcXVlc3QuaGVhZGVycy5oYXMoXCJJZi1Ob25lLU1hdGNoXCIpICYmIG10aW1lKSB7XG4gICAgW2JvZHksIGVudGl0eV0gPSBhd2FpdCBnZXRFbnRpdHkocGF0aCwgbXRpbWUsIHN0YXRzLCBtYXhidWZmZXIsIHJlc3BvbnNlKTtcbiAgICBpZiAoIWF3YWl0IGlmTm9uZU1hdGNoKHJlcXVlc3QuaGVhZGVycy5nZXQoXCJJZi1Ob25lLU1hdGNoXCIpISwgZW50aXR5KSkge1xuICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXCJFVGFnXCIsIGF3YWl0IGNhbGN1bGF0ZShlbnRpdHkpKTtcbiAgICAgIHJlc3BvbnNlLnN0YXR1cyA9IDMwNDtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyZXF1ZXN0LmhlYWRlcnMuaGFzKFwiSWYtTW9kaWZpZWQtU2luY2VcIikgJiYgbXRpbWUpIHtcbiAgICBjb25zdCBpZk1vZGlmaWVkU2luY2UgPSBuZXcgRGF0ZShyZXF1ZXN0LmhlYWRlcnMuZ2V0KFwiSWYtTW9kaWZpZWQtU2luY2VcIikhKTtcbiAgICBpZiAoaWZNb2RpZmllZFNpbmNlLmdldFRpbWUoKSA+PSBtdGltZSkge1xuICAgICAgcmVzcG9uc2Uuc3RhdHVzID0gMzA0O1xuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFib2R5IHx8ICFlbnRpdHkpIHtcbiAgICBbYm9keSwgZW50aXR5XSA9IGF3YWl0IGdldEVudGl0eShcbiAgICAgIHBhdGgsXG4gICAgICBtdGltZSA/PyAwLFxuICAgICAgc3RhdHMsXG4gICAgICBtYXhidWZmZXIsXG4gICAgICByZXNwb25zZSxcbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgIHJlcXVlc3QuaGVhZGVycy5oYXMoXCJJZi1SYW5nZVwiKSAmJiBtdGltZSAmJlxuICAgIGF3YWl0IGlmUmFuZ2UocmVxdWVzdC5oZWFkZXJzLmdldChcIklmLVJhbmdlXCIpISwgbXRpbWUsIGVudGl0eSkgJiZcbiAgICByZXF1ZXN0LmhlYWRlcnMuaGFzKFwiUmFuZ2VcIilcbiAgKSB7XG4gICAgYXdhaXQgc2VuZFJhbmdlKHJlc3BvbnNlLCBib2R5LCByZXF1ZXN0LmhlYWRlcnMuZ2V0KFwiUmFuZ2VcIikhLCBzdGF0cy5zaXplKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuXG4gIGlmIChyZXF1ZXN0LmhlYWRlcnMuaGFzKFwiUmFuZ2VcIikpIHtcbiAgICBhd2FpdCBzZW5kUmFuZ2UocmVzcG9uc2UsIGJvZHksIHJlcXVlc3QuaGVhZGVycy5nZXQoXCJSYW5nZVwiKSEsIHN0YXRzLnNpemUpO1xuICAgIHJldHVybiBwYXRoO1xuICB9XG5cbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXCJDb250ZW50LUxlbmd0aFwiLCBTdHJpbmcoc3RhdHMuc2l6ZSkpO1xuICByZXNwb25zZS5ib2R5ID0gYm9keTtcblxuICBpZiAoIXJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiRVRhZ1wiKSkge1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiRVRhZ1wiLCBhd2FpdCBjYWxjdWxhdGUoZW50aXR5KSk7XG4gIH1cblxuICBpZiAoIXJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiQWNjZXB0LVJhbmdlc1wiKSkge1xuICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KFwiQWNjZXB0LVJhbmdlc1wiLCBcImJ5dGVzXCIpO1xuICB9XG5cbiAgcmV0dXJuIHBhdGg7XG59XG4iXX0=