import { isListenTlsOptions } from "./util.ts";
export const DomResponse = Response;
const serveHttp = "serveHttp" in Deno
    ?
        Deno.serveHttp.bind(Deno)
    : undefined;
const maybeUpgradeWebSocket = "upgradeWebSocket" in Deno
    ?
        Deno.upgradeWebSocket.bind(Deno)
    : undefined;
export function hasNativeHttp() {
    return !!serveHttp;
}
export class NativeRequest {
    #conn;
    #reject;
    #request;
    #requestPromise;
    #resolve;
    #resolved = false;
    #upgradeWebSocket;
    constructor(requestEvent, options = {}) {
        const { conn } = options;
        this.#conn = conn;
        this.#upgradeWebSocket = "upgradeWebSocket" in options
            ? options["upgradeWebSocket"]
            : maybeUpgradeWebSocket;
        this.#request = requestEvent.request;
        const p = new Promise((resolve, reject) => {
            this.#resolve = resolve;
            this.#reject = reject;
        });
        this.#requestPromise = requestEvent.respondWith(p);
    }
    get body() {
        return this.#request.body;
    }
    get donePromise() {
        return this.#requestPromise;
    }
    get headers() {
        return this.#request.headers;
    }
    get method() {
        return this.#request.method;
    }
    get remoteAddr() {
        return this.#conn?.remoteAddr?.hostname;
    }
    get request() {
        return this.#request;
    }
    get url() {
        try {
            const url = new URL(this.#request.url);
            return this.#request.url.replace(url.origin, "");
        }
        catch {
        }
        return this.#request.url;
    }
    get rawUrl() {
        return this.#request.url;
    }
    error(reason) {
        if (this.#resolved) {
            throw new Error("Request already responded to.");
        }
        this.#reject(reason);
        this.#resolved = true;
    }
    respond(response) {
        if (this.#resolved) {
            throw new Error("Request already responded to.");
        }
        this.#resolve(response);
        this.#resolved = true;
        return this.#requestPromise;
    }
    upgrade(options) {
        if (this.#resolved) {
            throw new Error("Request already responded to.");
        }
        if (!this.#upgradeWebSocket) {
            throw new TypeError("Upgrading web sockets not supported.");
        }
        const { response, websocket } = this.#upgradeWebSocket(this.#request, options);
        this.#resolve(response);
        this.#resolved = true;
        return websocket;
    }
}
export class HttpServerNative {
    #app;
    #closed = false;
    #listener;
    #options;
    constructor(app, options) {
        if (!("serveHttp" in Deno)) {
            throw new Error("The native bindings for serving HTTP are not available.");
        }
        this.#app = app;
        this.#options = options;
    }
    get app() {
        return this.#app;
    }
    get closed() {
        return this.#closed;
    }
    close() {
        this.#closed = true;
        if (this.#listener) {
            this.#listener.close();
            this.#listener = undefined;
        }
    }
    [Symbol.asyncIterator]() {
        const start = (controller) => {
            const server = this;
            const listener = this.#listener = isListenTlsOptions(this.#options)
                ? Deno.listenTls(this.#options)
                : Deno.listen(this.#options);
            async function serve(conn) {
                const httpConn = serveHttp(conn);
                while (true) {
                    try {
                        const requestEvent = await httpConn.nextRequest();
                        if (requestEvent === null) {
                            return;
                        }
                        const nativeRequest = new NativeRequest(requestEvent, { conn });
                        controller.enqueue(nativeRequest);
                        await nativeRequest.donePromise;
                    }
                    catch (error) {
                        server.app.dispatchEvent(new ErrorEvent("error", { error }));
                    }
                    if (server.closed) {
                        httpConn.close();
                        controller.close();
                    }
                }
            }
            async function accept() {
                while (true) {
                    try {
                        const conn = await listener.accept();
                        serve(conn);
                    }
                    catch (error) {
                        if (!server.closed) {
                            server.app.dispatchEvent(new ErrorEvent("error", { error }));
                        }
                    }
                    if (server.closed) {
                        controller.close();
                        return;
                    }
                }
            }
            accept();
        };
        const stream = new ReadableStream({ start });
        return stream[Symbol.asyncIterator]();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cF9zZXJ2ZXJfbmF0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cF9zZXJ2ZXJfbmF0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUkvQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQW9CLFFBQVEsQ0FBQztBQXVCckQsTUFBTSxTQUFTLEdBQWtDLFdBQVcsSUFBSSxJQUFJO0lBQ2xFLENBQUM7UUFDRSxJQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDMUIsSUFBSSxDQUNMO0lBQ0gsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQVlkLE1BQU0scUJBQXFCLEdBQ3pCLGtCQUFrQixJQUFJLElBQUk7SUFDeEIsQ0FBQztRQUNFLElBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzNDLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFNaEIsTUFBTSxVQUFVLGFBQWE7SUFDM0IsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUFPRCxNQUFNLE9BQU8sYUFBYTtJQUN4QixLQUFLLENBQWE7SUFFbEIsT0FBTyxDQUEwQjtJQUNqQyxRQUFRLENBQVU7SUFDbEIsZUFBZSxDQUFnQjtJQUMvQixRQUFRLENBQTZCO0lBQ3JDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDbEIsaUJBQWlCLENBQXNCO0lBRXZDLFlBQ0UsWUFBMEIsRUFDMUIsVUFBZ0MsRUFBRTtRQUVsQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRWxCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxrQkFBa0IsSUFBSSxPQUFPO1lBQ3BELENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7WUFDN0IsQ0FBQyxDQUFDLHFCQUFxQixDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUNyQyxNQUFNLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBVyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNsRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBMkIsRUFBRSxRQUFRLENBQUM7SUFDNUQsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0wsSUFBSTtZQUNGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNsRDtRQUFDLE1BQU07U0FFUDtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7SUFDM0IsQ0FBQztJQUdELEtBQUssQ0FBQyxNQUFZO1FBQ2hCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7U0FDbEQ7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxPQUFPLENBQUMsUUFBa0I7UUFDeEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztTQUNsRDtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRCxPQUFPLENBQUMsT0FBaUM7UUFDdkMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztTQUNsRDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDM0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1NBQzdEO1FBQ0QsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQ3BELElBQUksQ0FBQyxRQUFRLEVBQ2IsT0FBTyxDQUNSLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQUdELE1BQU0sT0FBTyxnQkFBZ0I7SUFFM0IsSUFBSSxDQUFrQjtJQUN0QixPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ2hCLFNBQVMsQ0FBaUI7SUFDMUIsUUFBUSxDQUE2QztJQUVyRCxZQUNFLEdBQW9CLEVBQ3BCLE9BQW1EO1FBRW5ELElBQUksQ0FBQyxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksS0FBSyxDQUNiLHlEQUF5RCxDQUMxRCxDQUFDO1NBQ0g7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDcEIsTUFBTSxLQUFLLEdBQTJELENBQ3BFLFVBQVUsRUFDVixFQUFFO1lBRUYsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDakUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRS9CLEtBQUssVUFBVSxLQUFLLENBQUMsSUFBZTtnQkFDbEMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNqQyxPQUFPLElBQUksRUFBRTtvQkFDWCxJQUFJO3dCQUNGLE1BQU0sWUFBWSxHQUFHLE1BQU0sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO3dCQUNsRCxJQUFJLFlBQVksS0FBSyxJQUFJLEVBQUU7NEJBQ3pCLE9BQU87eUJBQ1I7d0JBQ0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzt3QkFDaEUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzt3QkFDbEMsTUFBTSxhQUFhLENBQUMsV0FBVyxDQUFDO3FCQUNqQztvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDZCxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7cUJBQzlEO29CQUNELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTt3QkFDakIsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO3dCQUNqQixVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7cUJBQ3BCO2lCQUNGO1lBQ0gsQ0FBQztZQUVELEtBQUssVUFBVSxNQUFNO2dCQUNuQixPQUFPLElBQUksRUFBRTtvQkFDWCxJQUFJO3dCQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO3dCQUNyQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQ2I7b0JBQUMsT0FBTyxLQUFLLEVBQUU7d0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7NEJBQ2xCLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzt5QkFDOUQ7cUJBQ0Y7b0JBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO3dCQUNqQixVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBQ25CLE9BQU87cUJBQ1I7aUJBQ0Y7WUFDSCxDQUFDO1lBRUQsTUFBTSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUM7UUFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsQ0FBZ0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTVELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO0lBQ3hDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjEgdGhlIG9hayBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cblxuaW1wb3J0IHR5cGUgeyBBcHBsaWNhdGlvbiwgU3RhdGUgfSBmcm9tIFwiLi9hcHBsaWNhdGlvbi50c1wiO1xuaW1wb3J0IHR5cGUgeyBTZXJ2ZXIgfSBmcm9tIFwiLi90eXBlcy5kLnRzXCI7XG5pbXBvcnQgeyBpc0xpc3RlblRsc09wdGlvbnMgfSBmcm9tIFwiLi91dGlsLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFVwZ3JhZGVXZWJTb2NrZXRPcHRpb25zIH0gZnJvbSBcIi4vd2Vic29ja2V0LnRzXCI7XG5cbmV4cG9ydCB0eXBlIFJlc3BvbmQgPSAocjogUmVzcG9uc2UgfCBQcm9taXNlPFJlc3BvbnNlPikgPT4gdm9pZDtcbmV4cG9ydCBjb25zdCBEb21SZXNwb25zZTogdHlwZW9mIFJlc3BvbnNlID0gUmVzcG9uc2U7XG5cbi8vIFRoaXMgdHlwZSBpcyBwYXJ0IG9mIERlbm8sIGJ1dCBub3QgcGFydCBvZiBsaWIuZG9tLmQudHMsIHRoZXJlZm9yZSBhZGQgaXQgaGVyZVxuLy8gc28gdGhhdCB0eXBlIGNoZWNraW5nIGNhbiBvY2N1ciBwcm9wZXJseSB1bmRlciBgbGliLmRvbS5kLnRzYC5cbmludGVyZmFjZSBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbGJhY2s8Uj4ge1xuICAoY29udHJvbGxlcjogUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcjxSPik6IHZvaWQgfCBQcm9taXNlTGlrZTx2b2lkPjtcbn1cblxuLy8gU2luY2UgdGhlIG5hdGl2ZSBiaW5kaW5ncyBhcmUgY3VycmVudGx5IHVuc3RhYmxlIGluIERlbm8sIHdlIHdpbGwgYWRkIHRoZVxuLy8gaW50ZXJmYWNlcyBoZXJlLCBzbyB0aGF0IHdlIGNhbiB0eXBlIGNoZWNrIG9hayB3aXRob3V0IHJlcXVpcmluZyB0aGVcbi8vIGAtLXVuc3RhYmxlYCBmbGFnIHRvIGJlIHVzZWQuXG5cbmludGVyZmFjZSBSZXF1ZXN0RXZlbnQge1xuICByZWFkb25seSByZXF1ZXN0OiBSZXF1ZXN0O1xuICByZXNwb25kV2l0aChyOiBSZXNwb25zZSB8IFByb21pc2U8UmVzcG9uc2U+KTogUHJvbWlzZTx2b2lkPjtcbn1cblxuaW50ZXJmYWNlIEh0dHBDb25uIGV4dGVuZHMgQXN5bmNJdGVyYWJsZTxSZXF1ZXN0RXZlbnQ+IHtcbiAgcmVhZG9ubHkgcmlkOiBudW1iZXI7XG4gIG5leHRSZXF1ZXN0KCk6IFByb21pc2U8UmVxdWVzdEV2ZW50IHwgbnVsbD47XG4gIGNsb3NlKCk6IHZvaWQ7XG59XG5cbmNvbnN0IHNlcnZlSHR0cDogKGNvbm46IERlbm8uQ29ubikgPT4gSHR0cENvbm4gPSBcInNlcnZlSHR0cFwiIGluIERlbm9cbiAgPyAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgIChEZW5vIGFzIGFueSkuc2VydmVIdHRwLmJpbmQoXG4gICAgICBEZW5vLFxuICAgIClcbiAgOiB1bmRlZmluZWQ7XG5cbmludGVyZmFjZSBXZWJTb2NrZXRVcGdyYWRlIHtcbiAgcmVzcG9uc2U6IFJlc3BvbnNlO1xuICB3ZWJzb2NrZXQ6IFdlYlNvY2tldDtcbn1cblxuZXhwb3J0IHR5cGUgVXBncmFkZVdlYlNvY2tldEZuID0gKFxuICByZXF1ZXN0OiBSZXF1ZXN0LFxuICBvcHRpb25zPzogVXBncmFkZVdlYlNvY2tldE9wdGlvbnMsXG4pID0+IFdlYlNvY2tldFVwZ3JhZGU7XG5cbmNvbnN0IG1heWJlVXBncmFkZVdlYlNvY2tldDogVXBncmFkZVdlYlNvY2tldEZuIHwgdW5kZWZpbmVkID1cbiAgXCJ1cGdyYWRlV2ViU29ja2V0XCIgaW4gRGVub1xuICAgID8gLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgICAgIChEZW5vIGFzIGFueSkudXBncmFkZVdlYlNvY2tldC5iaW5kKERlbm8pXG4gICAgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogRGV0ZWN0cyBpZiB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIERlbm8gcHJvdmlkZXMgdGhlIG5hdGl2ZSBIVFRQIGJpbmRpbmdzLFxuICogd2hpY2ggbWF5IGJlIG9ubHkgYXZhaWxhYmxlIHVuZGVyIHRoZSBgLS11bnN0YWJsZWAgZmxhZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc05hdGl2ZUh0dHAoKTogYm9vbGVhbiB7XG4gIHJldHVybiAhIXNlcnZlSHR0cDtcbn1cblxuaW50ZXJmYWNlIE5hdGl2ZVJlcXVlc3RPcHRpb25zIHtcbiAgY29ubj86IERlbm8uQ29ubjtcbiAgdXBncmFkZVdlYlNvY2tldD86IFVwZ3JhZGVXZWJTb2NrZXRGbjtcbn1cblxuZXhwb3J0IGNsYXNzIE5hdGl2ZVJlcXVlc3Qge1xuICAjY29ubj86IERlbm8uQ29ubjtcbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgI3JlamVjdCE6IChyZWFzb24/OiBhbnkpID0+IHZvaWQ7XG4gICNyZXF1ZXN0OiBSZXF1ZXN0O1xuICAjcmVxdWVzdFByb21pc2U6IFByb21pc2U8dm9pZD47XG4gICNyZXNvbHZlITogKHZhbHVlOiBSZXNwb25zZSkgPT4gdm9pZDtcbiAgI3Jlc29sdmVkID0gZmFsc2U7XG4gICN1cGdyYWRlV2ViU29ja2V0PzogVXBncmFkZVdlYlNvY2tldEZuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlcXVlc3RFdmVudDogUmVxdWVzdEV2ZW50LFxuICAgIG9wdGlvbnM6IE5hdGl2ZVJlcXVlc3RPcHRpb25zID0ge30sXG4gICkge1xuICAgIGNvbnN0IHsgY29ubiB9ID0gb3B0aW9ucztcbiAgICB0aGlzLiNjb25uID0gY29ubjtcbiAgICAvLyB0aGlzIGFsbG93cyBmb3IgdGhlIHZhbHVlIHRvIGJlIGV4cGxpY2l0bHkgdW5kZWZpbmVkIGluIHRoZSBvcHRpb25zXG4gICAgdGhpcy4jdXBncmFkZVdlYlNvY2tldCA9IFwidXBncmFkZVdlYlNvY2tldFwiIGluIG9wdGlvbnNcbiAgICAgID8gb3B0aW9uc1tcInVwZ3JhZGVXZWJTb2NrZXRcIl1cbiAgICAgIDogbWF5YmVVcGdyYWRlV2ViU29ja2V0O1xuICAgIHRoaXMuI3JlcXVlc3QgPSByZXF1ZXN0RXZlbnQucmVxdWVzdDtcbiAgICBjb25zdCBwID0gbmV3IFByb21pc2U8UmVzcG9uc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuI3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgdGhpcy4jcmVqZWN0ID0gcmVqZWN0O1xuICAgIH0pO1xuICAgIHRoaXMuI3JlcXVlc3RQcm9taXNlID0gcmVxdWVzdEV2ZW50LnJlc3BvbmRXaXRoKHApO1xuICB9XG5cbiAgZ2V0IGJvZHkoKTogUmVhZGFibGVTdHJlYW08VWludDhBcnJheT4gfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy4jcmVxdWVzdC5ib2R5O1xuICB9XG5cbiAgZ2V0IGRvbmVQcm9taXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLiNyZXF1ZXN0UHJvbWlzZTtcbiAgfVxuXG4gIGdldCBoZWFkZXJzKCk6IEhlYWRlcnMge1xuICAgIHJldHVybiB0aGlzLiNyZXF1ZXN0LmhlYWRlcnM7XG4gIH1cblxuICBnZXQgbWV0aG9kKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuI3JlcXVlc3QubWV0aG9kO1xuICB9XG5cbiAgZ2V0IHJlbW90ZUFkZHIoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gKHRoaXMuI2Nvbm4/LnJlbW90ZUFkZHIgYXMgRGVuby5OZXRBZGRyKT8uaG9zdG5hbWU7XG4gIH1cblxuICBnZXQgcmVxdWVzdCgpOiBSZXF1ZXN0IHtcbiAgICByZXR1cm4gdGhpcy4jcmVxdWVzdDtcbiAgfVxuXG4gIGdldCB1cmwoKTogc3RyaW5nIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh0aGlzLiNyZXF1ZXN0LnVybCk7XG4gICAgICByZXR1cm4gdGhpcy4jcmVxdWVzdC51cmwucmVwbGFjZSh1cmwub3JpZ2luLCBcIlwiKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgZXJyb3JzLCB3ZSBqdXN0IHdhbnQgdG8gZmFsbCBiYWNrXG4gICAgfVxuICAgIHJldHVybiB0aGlzLiNyZXF1ZXN0LnVybDtcbiAgfVxuXG4gIGdldCByYXdVcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy4jcmVxdWVzdC51cmw7XG4gIH1cblxuICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICBlcnJvcihyZWFzb24/OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy4jcmVzb2x2ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlcXVlc3QgYWxyZWFkeSByZXNwb25kZWQgdG8uXCIpO1xuICAgIH1cbiAgICB0aGlzLiNyZWplY3QocmVhc29uKTtcbiAgICB0aGlzLiNyZXNvbHZlZCA9IHRydWU7XG4gIH1cblxuICByZXNwb25kKHJlc3BvbnNlOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLiNyZXNvbHZlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdCBhbHJlYWR5IHJlc3BvbmRlZCB0by5cIik7XG4gICAgfVxuICAgIHRoaXMuI3Jlc29sdmUocmVzcG9uc2UpO1xuICAgIHRoaXMuI3Jlc29sdmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy4jcmVxdWVzdFByb21pc2U7XG4gIH1cblxuICB1cGdyYWRlKG9wdGlvbnM/OiBVcGdyYWRlV2ViU29ja2V0T3B0aW9ucyk6IFdlYlNvY2tldCB7XG4gICAgaWYgKHRoaXMuI3Jlc29sdmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXF1ZXN0IGFscmVhZHkgcmVzcG9uZGVkIHRvLlwiKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLiN1cGdyYWRlV2ViU29ja2V0KSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVXBncmFkaW5nIHdlYiBzb2NrZXRzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICAgIH1cbiAgICBjb25zdCB7IHJlc3BvbnNlLCB3ZWJzb2NrZXQgfSA9IHRoaXMuI3VwZ3JhZGVXZWJTb2NrZXQoXG4gICAgICB0aGlzLiNyZXF1ZXN0LFxuICAgICAgb3B0aW9ucyxcbiAgICApO1xuICAgIHRoaXMuI3Jlc29sdmUocmVzcG9uc2UpO1xuICAgIHRoaXMuI3Jlc29sdmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gd2Vic29ja2V0O1xuICB9XG59XG5cbi8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG5leHBvcnQgY2xhc3MgSHR0cFNlcnZlck5hdGl2ZTxBUyBleHRlbmRzIFN0YXRlID0gUmVjb3JkPHN0cmluZywgYW55Pj5cbiAgaW1wbGVtZW50cyBTZXJ2ZXI8TmF0aXZlUmVxdWVzdD4ge1xuICAjYXBwOiBBcHBsaWNhdGlvbjxBUz47XG4gICNjbG9zZWQgPSBmYWxzZTtcbiAgI2xpc3RlbmVyPzogRGVuby5MaXN0ZW5lcjtcbiAgI29wdGlvbnM6IERlbm8uTGlzdGVuT3B0aW9ucyB8IERlbm8uTGlzdGVuVGxzT3B0aW9ucztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBhcHA6IEFwcGxpY2F0aW9uPEFTPixcbiAgICBvcHRpb25zOiBEZW5vLkxpc3Rlbk9wdGlvbnMgfCBEZW5vLkxpc3RlblRsc09wdGlvbnMsXG4gICkge1xuICAgIGlmICghKFwic2VydmVIdHRwXCIgaW4gRGVubykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJUaGUgbmF0aXZlIGJpbmRpbmdzIGZvciBzZXJ2aW5nIEhUVFAgYXJlIG5vdCBhdmFpbGFibGUuXCIsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLiNhcHAgPSBhcHA7XG4gICAgdGhpcy4jb3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBnZXQgYXBwKCk6IEFwcGxpY2F0aW9uPEFTPiB7XG4gICAgcmV0dXJuIHRoaXMuI2FwcDtcbiAgfVxuXG4gIGdldCBjbG9zZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2Nsb3NlZDtcbiAgfVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuI2Nsb3NlZCA9IHRydWU7XG4gICAgaWYgKHRoaXMuI2xpc3RlbmVyKSB7XG4gICAgICB0aGlzLiNsaXN0ZW5lci5jbG9zZSgpO1xuICAgICAgdGhpcy4jbGlzdGVuZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8TmF0aXZlUmVxdWVzdD4ge1xuICAgIGNvbnN0IHN0YXJ0OiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbGJhY2s8TmF0aXZlUmVxdWVzdD4gPSAoXG4gICAgICBjb250cm9sbGVyLFxuICAgICkgPT4ge1xuICAgICAgLy8gZGVuby1saW50LWlnbm9yZSBuby10aGlzLWFsaWFzXG4gICAgICBjb25zdCBzZXJ2ZXIgPSB0aGlzO1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLiNsaXN0ZW5lciA9IGlzTGlzdGVuVGxzT3B0aW9ucyh0aGlzLiNvcHRpb25zKVxuICAgICAgICA/IERlbm8ubGlzdGVuVGxzKHRoaXMuI29wdGlvbnMpXG4gICAgICAgIDogRGVuby5saXN0ZW4odGhpcy4jb3B0aW9ucyk7XG5cbiAgICAgIGFzeW5jIGZ1bmN0aW9uIHNlcnZlKGNvbm46IERlbm8uQ29ubikge1xuICAgICAgICBjb25zdCBodHRwQ29ubiA9IHNlcnZlSHR0cChjb25uKTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEV2ZW50ID0gYXdhaXQgaHR0cENvbm4ubmV4dFJlcXVlc3QoKTtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0RXZlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmF0aXZlUmVxdWVzdCA9IG5ldyBOYXRpdmVSZXF1ZXN0KHJlcXVlc3RFdmVudCwgeyBjb25uIH0pO1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKG5hdGl2ZVJlcXVlc3QpO1xuICAgICAgICAgICAgYXdhaXQgbmF0aXZlUmVxdWVzdC5kb25lUHJvbWlzZTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgc2VydmVyLmFwcC5kaXNwYXRjaEV2ZW50KG5ldyBFcnJvckV2ZW50KFwiZXJyb3JcIiwgeyBlcnJvciB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZXJ2ZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICBodHRwQ29ubi5jbG9zZSgpO1xuICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhc3luYyBmdW5jdGlvbiBhY2NlcHQoKSB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbm4gPSBhd2FpdCBsaXN0ZW5lci5hY2NlcHQoKTtcbiAgICAgICAgICAgIHNlcnZlKGNvbm4pO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoIXNlcnZlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgc2VydmVyLmFwcC5kaXNwYXRjaEV2ZW50KG5ldyBFcnJvckV2ZW50KFwiZXJyb3JcIiwgeyBlcnJvciB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZXJ2ZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFjY2VwdCgpO1xuICAgIH07XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtPE5hdGl2ZVJlcXVlc3Q+KHsgc3RhcnQgfSk7XG5cbiAgICByZXR1cm4gc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICB9XG59XG4iXX0=