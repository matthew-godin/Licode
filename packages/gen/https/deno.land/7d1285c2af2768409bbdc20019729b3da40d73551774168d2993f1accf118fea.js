import { deferred } from "../deps.ts";
export class DeferredStack {
    #array;
    #creator;
    #max_size;
    #queue;
    #size;
    constructor(max, ls, creator) {
        this.#array = ls ? [...ls] : [];
        this.#creator = creator;
        this.#max_size = max || 10;
        this.#queue = [];
        this.#size = this.#array.length;
    }
    get available() {
        return this.#array.length;
    }
    async pop() {
        if (this.#array.length > 0) {
            return this.#array.pop();
        }
        else if (this.#size < this.#max_size && this.#creator) {
            this.#size++;
            return await this.#creator();
        }
        const d = deferred();
        this.#queue.push(d);
        await d;
        return this.#array.pop();
    }
    push(value) {
        this.#array.push(value);
        if (this.#queue.length > 0) {
            const d = this.#queue.shift();
            d.resolve();
        }
    }
    get size() {
        return this.#size;
    }
}
export class DeferredAccessStack {
    #elements;
    #initializeElement;
    #checkElementInitialization;
    #queue;
    #size;
    get available() {
        return this.#elements.length;
    }
    get size() {
        return this.#size;
    }
    constructor(elements, initCallback, checkInitCallback) {
        this.#checkElementInitialization = checkInitCallback;
        this.#elements = elements;
        this.#initializeElement = initCallback;
        this.#queue = [];
        this.#size = elements.length;
    }
    async initialized() {
        const initialized = await Promise.all(this.#elements.map((e) => this.#checkElementInitialization(e)));
        return initialized
            .filter((initialized) => initialized === true)
            .length;
    }
    async pop() {
        let element;
        if (this.available > 0) {
            element = this.#elements.pop();
        }
        else {
            const d = deferred();
            this.#queue.push(d);
            await d;
            element = this.#elements.pop();
        }
        if (!await this.#checkElementInitialization(element)) {
            await this.#initializeElement(element);
        }
        return element;
    }
    push(value) {
        this.#elements.push(value);
        if (this.#queue.length > 0) {
            const d = this.#queue.shift();
            d.resolve();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,