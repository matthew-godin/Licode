import { date } from "../deps.ts";
import { parseArray } from "./array_parser.ts";
const BACKSLASH_BYTE_VALUE = 92;
const BC_RE = /BC$/;
const DATETIME_RE = /^(\d{1,})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})(\.\d{1,})?/;
const HEX = 16;
const HEX_PREFIX_REGEX = /^\\x/;
const TIMEZONE_RE = /([Z+-])(\d{2})?:?(\d{2})?:?(\d{2})?/;
export function decodeBigint(value) {
    return BigInt(value);
}
export function decodeBigintArray(value) {
    return parseArray(value, (x) => BigInt(x));
}
export function decodeBoolean(value) {
    return value[0] === "t";
}
export function decodeBooleanArray(value) {
    return parseArray(value, (x) => x[0] === "t");
}
export function decodeBox(value) {
    const [a, b] = value.match(/\(.*?\)/g) || [];
    return {
        a: decodePoint(a),
        b: decodePoint(b),
    };
}
export function decodeBoxArray(value) {
    return parseArray(value, decodeBox, ";");
}
export function decodeBytea(byteaStr) {
    if (HEX_PREFIX_REGEX.test(byteaStr)) {
        return decodeByteaHex(byteaStr);
    }
    else {
        return decodeByteaEscape(byteaStr);
    }
}
export function decodeByteaArray(value) {
    return parseArray(value, decodeBytea);
}
function decodeByteaEscape(byteaStr) {
    const bytes = [];
    let i = 0;
    let k = 0;
    while (i < byteaStr.length) {
        if (byteaStr[i] !== "\\") {
            bytes.push(byteaStr.charCodeAt(i));
            ++i;
        }
        else {
            if (/[0-7]{3}/.test(byteaStr.substr(i + 1, 3))) {
                bytes.push(parseInt(byteaStr.substr(i + 1, 3), 8));
                i += 4;
            }
            else {
                let backslashes = 1;
                while (i + backslashes < byteaStr.length &&
                    byteaStr[i + backslashes] === "\\") {
                    backslashes++;
                }
                for (k = 0; k < Math.floor(backslashes / 2); ++k) {
                    bytes.push(BACKSLASH_BYTE_VALUE);
                }
                i += Math.floor(backslashes / 2) * 2;
            }
        }
    }
    return new Uint8Array(bytes);
}
function decodeByteaHex(byteaStr) {
    const bytesStr = byteaStr.slice(2);
    const bytes = new Uint8Array(bytesStr.length / 2);
    for (let i = 0, j = 0; i < bytesStr.length; i += 2, j++) {
        bytes[j] = parseInt(bytesStr[i] + bytesStr[i + 1], HEX);
    }
    return bytes;
}
export function decodeCircle(value) {
    const [point, radius] = value.substring(1, value.length - 1).split(/,(?![^(]*\))/);
    return {
        point: decodePoint(point),
        radius: radius,
    };
}
export function decodeCircleArray(value) {
    return parseArray(value, decodeCircle);
}
export function decodeDate(dateStr) {
    if (dateStr === "infinity") {
        return Number(Infinity);
    }
    else if (dateStr === "-infinity") {
        return Number(-Infinity);
    }
    return date.parse(dateStr, "yyyy-MM-dd");
}
export function decodeDateArray(value) {
    return parseArray(value, decodeDate);
}
export function decodeDatetime(dateStr) {
    const matches = DATETIME_RE.exec(dateStr);
    if (!matches) {
        return decodeDate(dateStr);
    }
    const isBC = BC_RE.test(dateStr);
    const year = parseInt(matches[1], 10) * (isBC ? -1 : 1);
    const month = parseInt(matches[2], 10) - 1;
    const day = parseInt(matches[3], 10);
    const hour = parseInt(matches[4], 10);
    const minute = parseInt(matches[5], 10);
    const second = parseInt(matches[6], 10);
    const msMatch = matches[7];
    const ms = msMatch ? 1000 * parseFloat(msMatch) : 0;
    let date;
    const offset = decodeTimezoneOffset(dateStr);
    if (offset === null) {
        date = new Date(year, month, day, hour, minute, second, ms);
    }
    else {
        const utc = Date.UTC(year, month, day, hour, minute, second, ms);
        date = new Date(utc + offset);
    }
    date.setUTCFullYear(year);
    return date;
}
export function decodeDatetimeArray(value) {
    return parseArray(value, decodeDatetime);
}
export function decodeInt(value) {
    return parseInt(value, 10);
}
export function decodeIntArray(value) {
    if (!value)
        return null;
    return parseArray(value, decodeInt);
}
export function decodeJson(value) {
    return JSON.parse(value);
}
export function decodeJsonArray(value) {
    return parseArray(value, JSON.parse);
}
export function decodeLine(value) {
    const [a, b, c] = value.substring(1, value.length - 1).split(",");
    return {
        a: a,
        b: b,
        c: c,
    };
}
export function decodeLineArray(value) {
    return parseArray(value, decodeLine);
}
export function decodeLineSegment(value) {
    const [a, b] = value
        .substring(1, value.length - 1)
        .match(/\(.*?\)/g) || [];
    return {
        a: decodePoint(a),
        b: decodePoint(b),
    };
}
export function decodeLineSegmentArray(value) {
    return parseArray(value, decodeLineSegment);
}
export function decodePath(value) {
    const points = value.substring(1, value.length - 1).split(/,(?![^(]*\))/);
    return points.map(decodePoint);
}
export function decodePathArray(value) {
    return parseArray(value, decodePath);
}
export function decodePoint(value) {
    const [x, y] = value.substring(1, value.length - 1).split(",");
    if (Number.isNaN(parseFloat(x)) || Number.isNaN(parseFloat(y))) {
        throw new Error(`Invalid point value: "${Number.isNaN(parseFloat(x)) ? x : y}"`);
    }
    return {
        x: x,
        y: y,
    };
}
export function decodePointArray(value) {
    return parseArray(value, decodePoint);
}
export function decodePolygon(value) {
    return decodePath(value);
}
export function decodePolygonArray(value) {
    return parseArray(value, decodePolygon);
}
export function decodeStringArray(value) {
    if (!value)
        return null;
    return parseArray(value, (value) => value);
}
function decodeTimezoneOffset(dateStr) {
    const timeStr = dateStr.split(" ")[1];
    const matches = TIMEZONE_RE.exec(timeStr);
    if (!matches) {
        return null;
    }
    const type = matches[1];
    if (type === "Z") {
        return 0;
    }
    const sign = type === "-" ? 1 : -1;
    const hours = parseInt(matches[2], 10);
    const minutes = parseInt(matches[3] || "0", 10);
    const seconds = parseInt(matches[4] || "0", 10);
    const offset = hours * 3600 + minutes * 60 + seconds;
    return sign * offset * 1000;
}
export function decodeTid(value) {
    const [x, y] = value.substring(1, value.length - 1).split(",");
    return [BigInt(x), BigInt(y)];
}
export function decodeTidArray(value) {
    return parseArray(value, decodeTid);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2RlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWNvZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQWdCL0MsTUFBTSxvQkFBb0IsR0FBRyxFQUFFLENBQUM7QUFDaEMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3BCLE1BQU0sV0FBVyxHQUNmLDhEQUE4RCxDQUFDO0FBQ2pFLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNmLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO0FBQ2hDLE1BQU0sV0FBVyxHQUFHLHFDQUFxQyxDQUFDO0FBRTFELE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBYTtJQUN4QyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEtBQWE7SUFDN0MsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxLQUFhO0lBQ3pDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztBQUMxQixDQUFDO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEtBQWE7SUFDOUMsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsS0FBYTtJQUNyQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMs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QUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQWE7SUFDMUMsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkYXRlIH0gZnJvbSBcIi4uL2RlcHMudHNcIjtcbmltcG9ydCB7IHBhcnNlQXJyYXkgfSBmcm9tIFwiLi9hcnJheV9wYXJzZXIudHNcIjtcbmltcG9ydCB7XG4gIEJveCxcbiAgQ2lyY2xlLFxuICBGbG9hdDgsXG4gIExpbmUsXG4gIExpbmVTZWdtZW50LFxuICBQYXRoLFxuICBQb2ludCxcbiAgUG9seWdvbixcbiAgVElELFxufSBmcm9tIFwiLi90eXBlcy50c1wiO1xuXG4vLyBEYXRldGltZSBwYXJzaW5nIGJhc2VkIG9uOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmRydWNrZXIvcG9zdGdyZXMtZGF0ZS9ibG9iL21hc3Rlci9pbmRleC5qc1xuLy8gQ29weXJpZ2h0IChjKSBCZW4gRHJ1Y2tlciA8YnZkcnVja2VyQGdtYWlsLmNvbT4gKGJlbmRydWNrZXIubWUpLiBNSVQgTGljZW5zZS5cbmNvbnN0IEJBQ0tTTEFTSF9CWVRFX1ZBTFVFID0gOTI7XG5jb25zdCBCQ19SRSA9IC9CQyQvO1xuY29uc3QgREFURVRJTUVfUkUgPVxuICAvXihcXGR7MSx9KS0oXFxkezJ9KS0oXFxkezJ9KSAoXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KShcXC5cXGR7MSx9KT8vO1xuY29uc3QgSEVYID0gMTY7XG5jb25zdCBIRVhfUFJFRklYX1JFR0VYID0gL15cXFxceC87XG5jb25zdCBUSU1FWk9ORV9SRSA9IC8oW1orLV0pKFxcZHsyfSk/Oj8oXFxkezJ9KT86PyhcXGR7Mn0pPy87XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVCaWdpbnQodmFsdWU6IHN0cmluZyk6IEJpZ0ludCB7XG4gIHJldHVybiBCaWdJbnQodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQmlnaW50QXJyYXkodmFsdWU6IHN0cmluZykge1xuICByZXR1cm4gcGFyc2VBcnJheSh2YWx1ZSwgKHgpID0+IEJpZ0ludCh4KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVCb29sZWFuKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHZhbHVlWzBdID09PSBcInRcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUJvb2xlYW5BcnJheSh2YWx1ZTogc3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZUFycmF5KHZhbHVlLCAoeCkgPT4geFswXSA9PT0gXCJ0XCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlQm94KHZhbHVlOiBzdHJpbmcpOiBCb3gge1xuICBjb25zdCBbYSwgYl0gPSB2YWx1ZS5tYXRjaCgvXFwoLio/XFwpL2cpIHx8IFtdO1xuXG4gIHJldHVybiB7XG4gICAgYTogZGVjb2RlUG9pbnQoYSksXG4gICAgYjogZGVjb2RlUG9pbnQoYiksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVCb3hBcnJheSh2YWx1ZTogc3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZUFycmF5KHZhbHVlLCBkZWNvZGVCb3gsIFwiO1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUJ5dGVhKGJ5dGVhU3RyOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgaWYgKEhFWF9QUkVGSVhfUkVHRVgudGVzdChieXRlYVN0cikpIHtcbiAgICByZXR1cm4gZGVjb2RlQnl0ZWFIZXgoYnl0ZWFTdHIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWNvZGVCeXRlYUVzY2FwZShieXRlYVN0cik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUJ5dGVhQXJyYXkodmFsdWU6IHN0cmluZyk6IHVua25vd25bXSB7XG4gIHJldHVybiBwYXJzZUFycmF5KHZhbHVlLCBkZWNvZGVCeXRlYSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZUJ5dGVhRXNjYXBlKGJ5dGVhU3RyOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgY29uc3QgYnl0ZXMgPSBbXTtcbiAgbGV0IGkgPSAwO1xuICBsZXQgayA9IDA7XG4gIHdoaWxlIChpIDwgYnl0ZWFTdHIubGVuZ3RoKSB7XG4gICAgaWYgKGJ5dGVhU3RyW2ldICE9PSBcIlxcXFxcIikge1xuICAgICAgYnl0ZXMucHVzaChieXRlYVN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICsraTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKC9bMC03XXszfS8udGVzdChieXRlYVN0ci5zdWJzdHIoaSArIDEsIDMpKSkge1xuICAgICAgICBieXRlcy5wdXNoKHBhcnNlSW50KGJ5dGVhU3RyLnN1YnN0cihpICsgMSwgMyksIDgpKTtcbiAgICAgICAgaSArPSA0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGJhY2tzbGFzaGVzID0gMTtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgIGkgKyBiYWNrc2xhc2hlcyA8IGJ5dGVhU3RyLmxlbmd0aCAmJlxuICAgICAgICAgIGJ5dGVhU3RyW2kgKyBiYWNrc2xhc2hlc10gPT09IFwiXFxcXFwiXG4gICAgICAgICkge1xuICAgICAgICAgIGJhY2tzbGFzaGVzKys7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChrID0gMDsgayA8IE1hdGguZmxvb3IoYmFja3NsYXNoZXMgLyAyKTsgKytrKSB7XG4gICAgICAgICAgYnl0ZXMucHVzaChCQUNLU0xBU0hfQllURV9WQUxVRSk7XG4gICAgICAgIH1cbiAgICAgICAgaSArPSBNYXRoLmZsb29yKGJhY2tzbGFzaGVzIC8gMikgKiAyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVCeXRlYUhleChieXRlYVN0cjogc3RyaW5nKTogVWludDhBcnJheSB7XG4gIGNvbnN0IGJ5dGVzU3RyID0gYnl0ZWFTdHIuc2xpY2UoMik7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXNTdHIubGVuZ3RoIC8gMik7XG4gIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IGJ5dGVzU3RyLmxlbmd0aDsgaSArPSAyLCBqKyspIHtcbiAgICBieXRlc1tqXSA9IHBhcnNlSW50KGJ5dGVzU3RyW2ldICsgYnl0ZXNTdHJbaSArIDFdLCBIRVgpO1xuICB9XG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUNpcmNsZSh2YWx1ZTogc3RyaW5nKTogQ2lyY2xlIHtcbiAgY29uc3QgW3BvaW50LCByYWRpdXNdID0gdmFsdWUuc3Vic3RyaW5nKDEsIHZhbHVlLmxlbmd0aCAtIDEpLnNwbGl0KFxuICAgIC8sKD8hW14oXSpcXCkpLyxcbiAgKSBhcyBbc3RyaW5nLCBGbG9hdDhdO1xuXG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IGRlY29kZVBvaW50KHBvaW50KSxcbiAgICByYWRpdXM6IHJhZGl1cyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUNpcmNsZUFycmF5KHZhbHVlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHBhcnNlQXJyYXkodmFsdWUsIGRlY29kZUNpcmNsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVEYXRlKGRhdGVTdHI6IHN0cmluZyk6IERhdGUgfCBudW1iZXIge1xuICAvLyB0aGVyZSBhcmUgc3BlY2lhbCBgaW5maW5pdHlgIGFuZCBgLWluZmluaXR5YFxuICAvLyBjYXNlcyByZXByZXNlbnRpbmcgb3V0LW9mLXJhbmdlIGRhdGVzXG4gIGlmIChkYXRlU3RyID09PSBcImluZmluaXR5XCIpIHtcbiAgICByZXR1cm4gTnVtYmVyKEluZmluaXR5KTtcbiAgfSBlbHNlIGlmIChkYXRlU3RyID09PSBcIi1pbmZpbml0eVwiKSB7XG4gICAgcmV0dXJuIE51bWJlcigtSW5maW5pdHkpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGUucGFyc2UoZGF0ZVN0ciwgXCJ5eXl5LU1NLWRkXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlRGF0ZUFycmF5KHZhbHVlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHBhcnNlQXJyYXkodmFsdWUsIGRlY29kZURhdGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlRGF0ZXRpbWUoZGF0ZVN0cjogc3RyaW5nKTogbnVtYmVyIHwgRGF0ZSB7XG4gIC8qKlxuICAgKiBQb3N0Z3JlcyB1c2VzIElTTyA4NjAxIHN0eWxlIGRhdGUgb3V0cHV0IGJ5IGRlZmF1bHQ6XG4gICAqIDE5OTctMTItMTcgMDc6Mzc6MTYtMDhcbiAgICovXG5cbiAgY29uc3QgbWF0Y2hlcyA9IERBVEVUSU1FX1JFLmV4ZWMoZGF0ZVN0cik7XG5cbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgcmV0dXJuIGRlY29kZURhdGUoZGF0ZVN0cik7XG4gIH1cblxuICBjb25zdCBpc0JDID0gQkNfUkUudGVzdChkYXRlU3RyKTtcblxuICBjb25zdCB5ZWFyID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApICogKGlzQkMgPyAtMSA6IDEpO1xuICAvLyByZW1lbWJlciBKUyBkYXRlcyBhcmUgMC1iYXNlZFxuICBjb25zdCBtb250aCA9IHBhcnNlSW50KG1hdGNoZXNbMl0sIDEwKSAtIDE7XG4gIGNvbnN0IGRheSA9IHBhcnNlSW50KG1hdGNoZXNbM10sIDEwKTtcbiAgY29uc3QgaG91ciA9IHBhcnNlSW50KG1hdGNoZXNbNF0sIDEwKTtcbiAgY29uc3QgbWludXRlID0gcGFyc2VJbnQobWF0Y2hlc1s1XSwgMTApO1xuICBjb25zdCBzZWNvbmQgPSBwYXJzZUludChtYXRjaGVzWzZdLCAxMCk7XG4gIC8vIG1zIGFyZSB3cml0dGVuIGFzIC4wMDdcbiAgY29uc3QgbXNNYXRjaCA9IG1hdGNoZXNbN107XG4gIGNvbnN0IG1zID0gbXNNYXRjaCA/IDEwMDAgKiBwYXJzZUZsb2F0KG1zTWF0Y2gpIDogMDtcblxuICBsZXQgZGF0ZTogRGF0ZTtcblxuICBjb25zdCBvZmZzZXQgPSBkZWNvZGVUaW1lem9uZU9mZnNldChkYXRlU3RyKTtcbiAgaWYgKG9mZnNldCA9PT0gbnVsbCkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbXMpO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgcmV0dXJucyBtaWxpc2Vjb25kcyBmcm9tIDEgSmFudWFyeSwgMTk3MCwgMDA6MDA6MDAsXG4gICAgLy8gYWRkaW5nIGRlY29kZWQgdGltZXpvbmUgb2Zmc2V0IHdpbGwgY29uc3RydWN0IHByb3BlciBkYXRlIG9iamVjdC5cbiAgICBjb25zdCB1dGMgPSBEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbXMpO1xuICAgIGRhdGUgPSBuZXcgRGF0ZSh1dGMgKyBvZmZzZXQpO1xuICB9XG5cbiAgLy8gdXNlIGBzZXRVVENGdWxsWWVhcmAgYmVjYXVzZSBpZiBkYXRlIGlzIGZyb20gZmlyc3RcbiAgLy8gY2VudHVyeSBgRGF0ZWAncyBjb21wYXRpYmlsaXR5IGZvciBtaWxsZW5pdW0gYnVnXG4gIC8vIHdvdWxkIHNldCBpdCBhcyAxOVhYXG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhcik7XG4gIHJldHVybiBkYXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlRGF0ZXRpbWVBcnJheSh2YWx1ZTogc3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZUFycmF5KHZhbHVlLCBkZWNvZGVEYXRldGltZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVJbnQodmFsdWU6IHN0cmluZyk6IG51bWJlciB7XG4gIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xufVxuXG4vLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUludEFycmF5KHZhbHVlOiBzdHJpbmcpOiBhbnkge1xuICBpZiAoIXZhbHVlKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHBhcnNlQXJyYXkodmFsdWUsIGRlY29kZUludCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVKc29uKHZhbHVlOiBzdHJpbmcpOiB1bmtub3duIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlSnNvbkFycmF5KHZhbHVlOiBzdHJpbmcpOiB1bmtub3duW10ge1xuICByZXR1cm4gcGFyc2VBcnJheSh2YWx1ZSwgSlNPTi5wYXJzZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVMaW5lKHZhbHVlOiBzdHJpbmcpOiBMaW5lIHtcbiAgY29uc3QgW2EsIGIsIGNdID0gdmFsdWUuc3Vic3RyaW5nKDEsIHZhbHVlLmxlbmd0aCAtIDEpLnNwbGl0KFwiLFwiKSBhcyBbXG4gICAgRmxvYXQ4LFxuICAgIEZsb2F0OCxcbiAgICBGbG9hdDgsXG4gIF07XG5cbiAgcmV0dXJuIHtcbiAgICBhOiBhLFxuICAgIGI6IGIsXG4gICAgYzogYyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUxpbmVBcnJheSh2YWx1ZTogc3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZUFycmF5KHZhbHVlLCBkZWNvZGVMaW5lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUxpbmVTZWdtZW50KHZhbHVlOiBzdHJpbmcpOiBMaW5lU2VnbWVudCB7XG4gIGNvbnN0IFthLCBiXSA9IHZhbHVlXG4gICAgLnN1YnN0cmluZygxLCB2YWx1ZS5sZW5ndGggLSAxKVxuICAgIC5tYXRjaCgvXFwoLio/XFwpL2cpIHx8IFtdO1xuXG4gIHJldHVybiB7XG4gICAgYTogZGVjb2RlUG9pbnQoYSksXG4gICAgYjogZGVjb2RlUG9pbnQoYiksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVMaW5lU2VnbWVudEFycmF5KHZhbHVlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHBhcnNlQXJyYXkodmFsdWUsIGRlY29kZUxpbmVTZWdtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVBhdGgodmFsdWU6IHN0cmluZyk6IFBhdGgge1xuICAvLyBTcGxpdCBvbiBjb21tYXMgdGhhdCBhcmUgbm90IGluc2lkZSBwYXJhbnRoZXNlc1xuICAvLyBzaW5jZSBlbmNhcHN1bGF0ZWQgY29tbWFzIGFyZSBzZXBhcmF0b3JzIGZvciB0aGUgcG9pbnQgY29vcmRpbmF0ZXNcbiAgY29uc3QgcG9pbnRzID0gdmFsdWUuc3Vic3RyaW5nKDEsIHZhbHVlLmxlbmd0aCAtIDEpLnNwbGl0KC8sKD8hW14oXSpcXCkpLyk7XG5cbiAgcmV0dXJuIHBvaW50cy5tYXAoZGVjb2RlUG9pbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlUGF0aEFycmF5KHZhbHVlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHBhcnNlQXJyYXkodmFsdWUsIGRlY29kZVBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlUG9pbnQodmFsdWU6IHN0cmluZyk6IFBvaW50IHtcbiAgY29uc3QgW3gsIHldID0gdmFsdWUuc3Vic3RyaW5nKDEsIHZhbHVlLmxlbmd0aCAtIDEpLnNwbGl0KFwiLFwiKSBhcyBbXG4gICAgRmxvYXQ4LFxuICAgIEZsb2F0OCxcbiAgXTtcblxuICBpZiAoTnVtYmVyLmlzTmFOKHBhcnNlRmxvYXQoeCkpIHx8IE51bWJlci5pc05hTihwYXJzZUZsb2F0KHkpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIHBvaW50IHZhbHVlOiBcIiR7TnVtYmVyLmlzTmFOKHBhcnNlRmxvYXQoeCkpID8geCA6IHl9XCJgLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHgsXG4gICAgeTogeSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVBvaW50QXJyYXkodmFsdWU6IHN0cmluZykge1xuICByZXR1cm4gcGFyc2VBcnJheSh2YWx1ZSwgZGVjb2RlUG9pbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlUG9seWdvbih2YWx1ZTogc3RyaW5nKTogUG9seWdvbiB7XG4gIHJldHVybiBkZWNvZGVQYXRoKHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVBvbHlnb25BcnJheSh2YWx1ZTogc3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZUFycmF5KHZhbHVlLCBkZWNvZGVQb2x5Z29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVN0cmluZ0FycmF5KHZhbHVlOiBzdHJpbmcpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBwYXJzZUFycmF5KHZhbHVlLCAodmFsdWUpID0+IHZhbHVlKTtcbn1cblxuLyoqXG4gKiBEZWNvZGUgbnVtZXJpY2FsIHRpbWV6b25lIG9mZnNldCBmcm9tIHByb3ZpZGVkIGRhdGUgc3RyaW5nLlxuICpcbiAqIE1hdGNoZWQgdGhlc2Uga2luZHM6XG4gKiAtIGBaIChVVEMpYFxuICogLSBgLTA1YFxuICogLSBgKzA2OjMwYFxuICogLSBgKzA2OjMwOjEwYFxuICpcbiAqIFJldHVybnMgb2Zmc2V0IGluIG1pbGlzZWNvbmRzLlxuICovXG5mdW5jdGlvbiBkZWNvZGVUaW1lem9uZU9mZnNldChkYXRlU3RyOiBzdHJpbmcpOiBudWxsIHwgbnVtYmVyIHtcbiAgLy8gZ2V0IHJpZCBvZiBkYXRlIHBhcnQgYXMgVElNRVpPTkVfUkUgd291bGQgbWF0Y2ggJy1NTWAgcGFydFxuICBjb25zdCB0aW1lU3RyID0gZGF0ZVN0ci5zcGxpdChcIiBcIilbMV07XG4gIGNvbnN0IG1hdGNoZXMgPSBUSU1FWk9ORV9SRS5leGVjKHRpbWVTdHIpO1xuXG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgdHlwZSA9IG1hdGNoZXNbMV07XG5cbiAgaWYgKHR5cGUgPT09IFwiWlwiKSB7XG4gICAgLy8gWnVsdSB0aW1lem9uZSA9PT0gVVRDID09PSAwXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBpbiBKUyB0aW1lem9uZSBvZmZzZXRzIGFyZSByZXZlcnNlZCwgaWUuIHRpbWV6b25lc1xuICAvLyB0aGF0IGFyZSBcInBvc2l0aXZlXCIgKCswMTowMCkgYXJlIHJlcHJlc2VudGVkIGFzIG5lZ2F0aXZlXG4gIC8vIG9mZnNldHMgYW5kIHZpY2UtdmVyc2FcbiAgY29uc3Qgc2lnbiA9IHR5cGUgPT09IFwiLVwiID8gMSA6IC0xO1xuXG4gIGNvbnN0IGhvdXJzID0gcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApO1xuICBjb25zdCBtaW51dGVzID0gcGFyc2VJbnQobWF0Y2hlc1szXSB8fCBcIjBcIiwgMTApO1xuICBjb25zdCBzZWNvbmRzID0gcGFyc2VJbnQobWF0Y2hlc1s0XSB8fCBcIjBcIiwgMTApO1xuXG4gIGNvbnN0IG9mZnNldCA9IGhvdXJzICogMzYwMCArIG1pbnV0ZXMgKiA2MCArIHNlY29uZHM7XG5cbiAgcmV0dXJuIHNpZ24gKiBvZmZzZXQgKiAxMDAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlVGlkKHZhbHVlOiBzdHJpbmcpOiBUSUQge1xuICBjb25zdCBbeCwgeV0gPSB2YWx1ZS5zdWJzdHJpbmcoMSwgdmFsdWUubGVuZ3RoIC0gMSkuc3BsaXQoXCIsXCIpO1xuXG4gIHJldHVybiBbQmlnSW50KHgpLCBCaWdJbnQoeSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlVGlkQXJyYXkodmFsdWU6IHN0cmluZykge1xuICByZXR1cm4gcGFyc2VBcnJheSh2YWx1ZSwgZGVjb2RlVGlkKTtcbn1cbiJdfQ==