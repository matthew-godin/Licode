import { buildFlags, } from "./scripts.ts";
import { merge } from "./merge.ts";
const reDenoAction = new RegExp(/^(deno +\w+) *(.*)$/);
const reCompact = new RegExp(/^'(?:\\'|.)*?\.(ts|js)'|^"(?:\\"|.)*?\.(ts|js)"|^(?:\\ |\S)+\.(ts|js)$/);
const reCliCompact = new RegExp(/^(run|test|fmt|lint) *(.*)$/);
export class Runner {
    #config;
    #args;
    constructor(config, args = []) {
        this.#config = config;
        this.#args = args;
    }
    cmd(cmd, options) {
        const command = {
            cmd,
            options,
            exe: () => {
                return this.execute(command);
            },
        };
        return command;
    }
    buildCliCommand(args, global) {
        const cmd = args.join(" ");
        let out;
        if (reCompact.test(cmd)) {
            out = ["deno", "run"];
            out = out.concat(stdCmd(cmd));
        }
        else if (reCliCompact.test(cmd)) {
            out = ["deno"];
            out = out.concat(stdCmd(cmd));
        }
        else {
            out = stdCmd(cmd);
        }
        return this.cmd(out, global);
    }
    buildCommands(script, global, args) {
        if (typeof script === "object") {
            const options = Object.assign({}, merge(global, script));
            return this.buildStringCommands(script.cmd, options, args);
        }
        return this.buildStringCommands(script, global, args);
    }
    buildStringCommands(script, global, args) {
        if (script.includes("&&")) {
            const commands = [];
            script.split("&&").map((s) => {
                commands.push(this.buildCommand(s, global, args));
            });
            return commands;
        }
        return [this.buildCommand(script, global, args)];
    }
    buildCommand(cmd, options, cli) {
        let out = [];
        cmd = stdCmd(cmd).join(" ");
        const denoAction = reDenoAction.exec(cmd);
        if (denoAction && denoAction.length === 3) {
            const action = denoAction[1];
            const args = denoAction[2];
            out = out.concat(stdCmd(action));
            out = out.concat(buildFlags(options));
            if (args)
                out = out.concat(stdCmd(args));
        }
        else if (reCompact.test(cmd)) {
            out = ["deno", "run"];
            out = out.concat(buildFlags(options));
            out = out.concat(stdCmd(cmd));
        }
        else {
            out = stdCmd(cmd);
        }
        if (cli)
            out = out.concat(cli);
        return this.cmd(out, options);
    }
    build(script) {
        const g = Object.assign({
            watch: true,
        }, this.#config);
        g.scripts = {};
        const s = this.#config.scripts[script];
        if (!s) {
            if (this.#args.length > 0) {
                return [this.buildCliCommand(this.#args, g)];
            }
            else {
                throw new Error("Script does not exist and CLI args are not provided.");
            }
        }
        const args = this.#args.slice(1);
        let commands = [];
        if (Array.isArray(s)) {
            s.forEach((ss) => {
                commands = commands.concat(this.buildCommands(ss, g, args));
            });
        }
        else {
            commands = commands.concat(this.buildCommands(s, g, args));
        }
        return commands;
    }
    execute(command) {
        const options = {
            cmd: command.cmd,
            env: command.options.env ?? {},
            stdin: command.options.stdin ?? "inherit",
            stdout: command.options.stdout ?? "inherit",
            stderr: command.options.stderr ?? "inherit",
        };
        return Deno.run(options);
    }
}
function stdCmd(cmd) {
    return cmd.trim().replace(/\s\s+/g, " ").split(" ");
}
//# sourceMappingURL=data:application/json;base64,