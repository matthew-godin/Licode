import { BaseHandler, blue, bold, gray, green, italic, log, LogLevels, red, reset, yellow, } from "./deps.ts";
const TAG = `${bold("[denon]")}`;
const DEBUG_LEVEL = "DEBUG";
const QUIET_LEVEL = "ERROR";
const DEFAULT_LEVEL = "INFO";
const DEFAULT_HANDLER = "format_fn";
export class ConsoleHandler extends BaseHandler {
    format(record) {
        if (record.args.length === 0)
            throw new Error("Logger Error");
        let msg = "";
        let tag = TAG;
        const op = record.args[0];
        let error = undefined;
        switch (record.level) {
            case LogLevels.DEBUG:
                tag = green("[&]");
                break;
            case LogLevels.INFO:
                tag = blue("[*]");
                break;
            case LogLevels.WARNING:
                tag = yellow("[!]");
                break;
            case LogLevels.ERROR:
                tag = red("[E]");
                error = record.args[1];
                break;
            case LogLevels.CRITICAL:
                tag = bold(red("[@]"));
                error = record.args[1];
                break;
        }
        msg += tag;
        if (op) {
            const action = gray(`[${italic(op)}]`);
            msg += ` ${action}`;
        }
        msg += ` ${reset(record.msg)}`;
        if (error) {
            msg += `\n`;
            msg += `${bold(red("error"))}: Uncaught `;
            msg += Deno.inspect(error);
        }
        return msg;
    }
    log(msg) {
        console.log(msg);
    }
}
export async function setup({ filter }) {
    await log.setup({
        handlers: {
            [DEFAULT_HANDLER]: new ConsoleHandler(DEBUG_LEVEL),
        },
        loggers: {
            default: {
                level: filter,
                handlers: [DEFAULT_HANDLER],
            },
        },
    });
}
function debug(msg, op) {
    if (msg instanceof Function) {
        return log.debug(msg, op);
    }
    return log.debug(msg, op);
}
function info(msg, op) {
    if (msg instanceof Function) {
        return log.info(msg, op);
    }
    return log.info(msg, op);
}
function warning(msg, op) {
    if (msg instanceof Function) {
        return log.warning(msg, op);
    }
    return log.warning(msg, op);
}
function error(msg, op, error) {
    error = error ?? undefined;
    if (msg instanceof Function) {
        return log.error(msg, op, error);
    }
    return log.error(msg, op, error);
}
function critical(msg, op, error) {
    error = error ?? undefined;
    if (msg instanceof Function) {
        return log.critical(msg, op, error);
    }
    return log.critical(msg, op, error);
}
export function create(prefix) {
    return {
        debug: (msg) => debug(msg, prefix),
        info: (msg) => info(msg, prefix),
        warning: (msg) => warning(msg, prefix),
        error: (msg, err) => error(msg, prefix, err),
        critical: (msg, err) => critical(msg, prefix, err),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJhbmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cHM6Ly9kZW5vLmxhbmQveC9icmFuY2hAMC4xLjYvYnJhbmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsSUFBSSxFQUNKLElBQUksRUFFSixJQUFJLEVBQ0osS0FBSyxFQUNMLE1BQU0sRUFFTixHQUFHLEVBQ0gsU0FBUyxFQUVULEdBQUcsRUFDSCxLQUFLLEVBQ0wsTUFBTSxHQUNQLE1BQU0sV0FBVyxDQUFDO0FBR25CLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7QUFFakMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQzVCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQztBQUM1QixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFFN0IsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDO0FBR3BDLE1BQU0sT0FBTyxjQUFlLFNBQVEsV0FBVztJQUM3QyxNQUFNLENBQUMsTUFBaUI7UUFDdEIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUU5RCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZCxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBdUIsQ0FBQztRQUNoRCxJQUFJLEtBQUssR0FBc0IsU0FBUyxDQUFDO1FBRXpDLFFBQVEsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNwQixLQUFLLFNBQVMsQ0FBQyxLQUFLO2dCQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQixNQUFNO1lBQ1IsS0FBSyxTQUFTLENBQUMsSUFBSTtnQkFDakIsR0FBRyxHQUFHLElBQUksQ0FBQyxL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