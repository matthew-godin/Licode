import { BaseHandler, blue, bold, gray, green, italic, log, LogLevels, red, reset, yellow, } from "./deps.ts";
const TAG = `${bold("[denon]")}`;
const DEBUG_LEVEL = "DEBUG";
const QUIET_LEVEL = "ERROR";
const DEFAULT_LEVEL = "INFO";
const DEFAULT_HANDLER = "format_fn";
export class ConsoleHandler extends BaseHandler {
    format(record) {
        if (record.args.length === 0)
            throw new Error("Logger Error");
        let msg = "";
        let tag = TAG;
        const op = record.args[0];
        let error = undefined;
        switch (record.level) {
            case LogLevels.DEBUG:
                tag = green("[&]");
                break;
            case LogLevels.INFO:
                tag = blue("[*]");
                break;
            case LogLevels.WARNING:
                tag = yellow("[!]");
                break;
            case LogLevels.ERROR:
                tag = red("[E]");
                error = record.args[1];
                break;
            case LogLevels.CRITICAL:
                tag = bold(red("[@]"));
                error = record.args[1];
                break;
        }
        msg += tag;
        if (op) {
            const action = gray(`[${italic(op)}]`);
            msg += ` ${action}`;
        }
        msg += ` ${reset(record.msg)}`;
        if (error) {
            msg += `\n`;
            msg += `${bold(red("error"))}: Uncaught `;
            msg += Deno.inspect(error);
        }
        return msg;
    }
    log(msg) {
        console.log(msg);
    }
}
export async function setup({ filter }) {
    await log.setup({
        handlers: {
            [DEFAULT_HANDLER]: new ConsoleHandler(DEBUG_LEVEL),
        },
        loggers: {
            default: {
                level: filter,
                handlers: [DEFAULT_HANDLER],
            },
        },
    });
}
function debug(msg, op) {
    if (msg instanceof Function) {
        return log.debug(msg, op);
    }
    return log.debug(msg, op);
}
function info(msg, op) {
    if (msg instanceof Function) {
        return log.info(msg, op);
    }
    return log.info(msg, op);
}
function warning(msg, op) {
    if (msg instanceof Function) {
        return log.warning(msg, op);
    }
    return log.warning(msg, op);
}
function error(msg, op, error) {
    error = error ?? undefined;
    if (msg instanceof Function) {
        return log.error(msg, op, error);
    }
    return log.error(msg, op, error);
}
function critical(msg, op, error) {
    error = error ?? undefined;
    if (msg instanceof Function) {
        return log.critical(msg, op, error);
    }
    return log.critical(msg, op, error);
}
export function create(prefix) {
    return {
        debug: (msg) => debug(msg, prefix),
        info: (msg) => info(msg, prefix),
        warning: (msg) => warning(msg, prefix),
        error: (msg, err) => error(msg, prefix, err),
        critical: (msg, err) => critical(msg, prefix, err),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJhbmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cHM6Ly9kZW5vLmxhbmQveC9icmFuY2hAMC4xLjYvYnJhbmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsSUFBSSxFQUNKLElBQUksRUFFSixJQUFJLEVBQ0osS0FBSyxFQUNMLE1BQU0sRUFFTixHQUFHLEVBQ0gsU0FBUyxFQUVULEdBQUcsRUFDSCxLQUFLLEVBQ0wsTUFBTSxHQUNQLE1BQU0sV0FBVyxDQUFDO0FBR25CLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7QUFFakMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQzVCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQztBQUM1QixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUM7QUFFN0IsTUFBTSxlQUFlLEdBQUcsV0FBVyxDQUFDO0FBR3BDLE1BQU0sT0FBTyxjQUFlLFNBQVEsV0FBVztJQUM3QyxNQUFNLENBQUMsTUFBaUI7UUFDdEIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUU5RCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZCxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBdUIsQ0FBQztRQUNoRCxJQUFJLEtBQUssR0FBc0IsU0FBUyxDQUFDO1FBRXpDLFFBQVEsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNwQixLQUFLLFNBQVMsQ0FBQyxLQUFLO2dCQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQixNQUFNO1lBQ1IsS0FBSyxTQUFTLENBQUMsSUFBSTtnQkFDakIsR0FBRyxHQUFHLElBQUksQ0FBQyxL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Q0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjEgdGhlIGRlbm9zYXVycyB0ZWFtLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cblxuaW1wb3J0IHtcbiAgQmFzZUhhbmRsZXIsXG4gIGJsdWUsXG4gIGJvbGQsXG4gIEdlbmVyaWNGdW5jdGlvbixcbiAgZ3JheSxcbiAgZ3JlZW4sXG4gIGl0YWxpYyxcbiAgTGV2ZWxOYW1lLFxuICBsb2csXG4gIExvZ0xldmVscyxcbiAgTG9nUmVjb3JkLFxuICByZWQsXG4gIHJlc2V0LFxuICB5ZWxsb3csXG59IGZyb20gXCIuL2RlcHMudHNcIjtcblxuLyoqIExvZ2dlciB0YWcgKi9cbmNvbnN0IFRBRyA9IGAke2JvbGQoXCJbZGVub25dXCIpfWA7XG5cbmNvbnN0IERFQlVHX0xFVkVMID0gXCJERUJVR1wiO1xuY29uc3QgUVVJRVRfTEVWRUwgPSBcIkVSUk9SXCI7XG5jb25zdCBERUZBVUxUX0xFVkVMID0gXCJJTkZPXCI7XG5cbmNvbnN0IERFRkFVTFRfSEFORExFUiA9IFwiZm9ybWF0X2ZuXCI7XG5cbi8qKiBEZW5vIGxvZ2dlciwgYnV0IHNsaWdodGx5IGJldHRlci4gKi9cbmV4cG9ydCBjbGFzcyBDb25zb2xlSGFuZGxlciBleHRlbmRzIEJhc2VIYW5kbGVyIHtcbiAgZm9ybWF0KHJlY29yZDogTG9nUmVjb3JkKTogc3RyaW5nIHtcbiAgICBpZiAocmVjb3JkLmFyZ3MubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJMb2dnZXIgRXJyb3JcIik7XG5cbiAgICBsZXQgbXNnID0gXCJcIjtcbiAgICBsZXQgdGFnID0gVEFHO1xuICAgIGNvbnN0IG9wID0gcmVjb3JkLmFyZ3NbMF0gYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGxldCBlcnJvcjogRXJyb3IgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBzd2l0Y2ggKHJlY29yZC5sZXZlbCkge1xuICAgICAgY2FzZSBMb2dMZXZlbHMuREVCVUc6XG4gICAgICAgIHRhZyA9IGdyZWVuKFwiWyZdXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nTGV2ZWxzLklORk86XG4gICAgICAgIHRhZyA9IGJsdWUoXCJbKl1cIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dMZXZlbHMuV0FSTklORzpcbiAgICAgICAgdGFnID0geWVsbG93KFwiWyFdXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTG9nTGV2ZWxzLkVSUk9SOlxuICAgICAgICB0YWcgPSByZWQoXCJbRV1cIik7XG4gICAgICAgIGVycm9yID0gcmVjb3JkLmFyZ3NbMV0gYXMgRXJyb3I7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMb2dMZXZlbHMuQ1JJVElDQUw6XG4gICAgICAgIHRhZyA9IGJvbGQocmVkKFwiW0BdXCIpKTtcbiAgICAgICAgZXJyb3IgPSByZWNvcmQuYXJnc1sxXSBhcyBFcnJvcjtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbXNnICs9IHRhZztcblxuICAgIGlmIChvcCkge1xuICAgICAgY29uc3QgYWN0aW9uID0gZ3JheShgWyR7aXRhbGljKG9wKX1dYCk7XG4gICAgICBtc2cgKz0gYCAke2FjdGlvbn1gO1xuICAgIH1cblxuICAgIG1zZyArPSBgICR7cmVzZXQocmVjb3JkLm1zZyl9YDtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgbXNnICs9IGBcXG5gO1xuICAgICAgbXNnICs9IGAke2JvbGQocmVkKFwiZXJyb3JcIikpfTogVW5jYXVnaHQgYDtcbiAgICAgIG1zZyArPSBEZW5vLmluc3BlY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIHJldHVybiBtc2c7XG4gIH1cblxuICBsb2cobXNnOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhtc2cpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9ucyB7XG4gIGZpbHRlcjogTGV2ZWxOYW1lO1xufVxuXG4vKiogTW9kaWZ5IGRlZmF1bHQgZGVubyBsb2dnZXIgd2l0aCBjb25maWd1cmFibGVcbiAqIGxvZyBsZXZlbC4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXR1cCh7IGZpbHRlciB9OiBPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IGxvZy5zZXR1cCh7XG4gICAgaGFuZGxlcnM6IHtcbiAgICAgIFtERUZBVUxUX0hBTkRMRVJdOiBuZXcgQ29uc29sZUhhbmRsZXIoREVCVUdfTEVWRUwpLFxuICAgIH0sXG4gICAgbG9nZ2Vyczoge1xuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBsZXZlbDogZmlsdGVyLFxuICAgICAgICBoYW5kbGVyczogW0RFRkFVTFRfSEFORExFUl0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuXG50eXBlIE1lc3NhZ2U8VD4gPSAoVCBleHRlbmRzIEdlbmVyaWNGdW5jdGlvbiA/IG5ldmVyIDogVCkgfCAoKCkgPT4gVCk7XG5cbmZ1bmN0aW9uIGRlYnVnPFQ+KG1zZzogTWVzc2FnZTxUPiwgb3A/OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkIHtcbiAgLy8gQXNzaXN0IFRTIGNvbXBpbGVyIHdpdGggcGFzcy10aHJvdWdoIGdlbmVyaWMgdHlwZVxuICBpZiAobXNnIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gbG9nLmRlYnVnKG1zZywgb3ApO1xuICB9XG4gIHJldHVybiBsb2cuZGVidWcobXNnLCBvcCk7XG59XG5cbmZ1bmN0aW9uIGluZm88VD4obXNnOiBNZXNzYWdlPFQ+LCBvcD86IHN0cmluZyk6IFQgfCB1bmRlZmluZWQge1xuICAvLyBBc3Npc3QgVFMgY29tcGlsZXIgd2l0aCBwYXNzLXRocm91Z2ggZ2VuZXJpYyB0eXBlXG4gIGlmIChtc2cgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBsb2cuaW5mbyhtc2csIG9wKTtcbiAgfVxuICByZXR1cm4gbG9nLmluZm8obXNnLCBvcCk7XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmc8VD4obXNnOiBNZXNzYWdlPFQ+LCBvcD86IHN0cmluZyk6IFQgfCB1bmRlZmluZWQge1xuICAvLyBBc3Npc3QgVFMgY29tcGlsZXIgd2l0aCBwYXNzLXRocm91Z2ggZ2VuZXJpYyB0eXBlXG4gIGlmIChtc2cgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBsb2cud2FybmluZyhtc2csIG9wKTtcbiAgfVxuICByZXR1cm4gbG9nLndhcm5pbmcobXNnLCBvcCk7XG59XG5cbmZ1bmN0aW9uIGVycm9yPFQ+KG1zZzogTWVzc2FnZTxUPiwgb3A/OiBzdHJpbmcsIGVycm9yPzogRXJyb3IpOiBUIHwgdW5kZWZpbmVkIHtcbiAgLy8gQXNzaXN0IFRTIGNvbXBpbGVyIHdpdGggcGFzcy10aHJvdWdoIGdlbmVyaWMgdHlwZVxuICBlcnJvciA9IGVycm9yID8/IHVuZGVmaW5lZDtcbiAgaWYgKG1zZyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGxvZy5lcnJvcihtc2csIG9wLCBlcnJvcik7XG4gIH1cbiAgcmV0dXJuIGxvZy5lcnJvcihtc2csIG9wLCBlcnJvcik7XG59XG5cbmZ1bmN0aW9uIGNyaXRpY2FsPFQ+KFxuICBtc2c6IE1lc3NhZ2U8VD4sXG4gIG9wPzogc3RyaW5nLFxuICBlcnJvcj86IEVycm9yLFxuKTogVCB8IHVuZGVmaW5lZCB7XG4gIC8vIEFzc2lzdCBUUyBjb21waWxlciB3aXRoIHBhc3MtdGhyb3VnaCBnZW5lcmljIHR5cGVcbiAgZXJyb3IgPSBlcnJvciA/PyB1bmRlZmluZWQ7XG4gIGlmIChtc2cgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgIHJldHVybiBsb2cuY3JpdGljYWwobXNnLCBvcCwgZXJyb3IpO1xuICB9XG4gIHJldHVybiBsb2cuY3JpdGljYWwobXNnLCBvcCwgZXJyb3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlPFQ+KHByZWZpeD86IHN0cmluZykge1xuICByZXR1cm4ge1xuICAgIGRlYnVnOiAobXNnOiBNZXNzYWdlPFQ+KSA9PiBkZWJ1Zyhtc2csIHByZWZpeCksXG4gICAgaW5mbzogKG1zZzogTWVzc2FnZTxUPikgPT4gaW5mbyhtc2csIHByZWZpeCksXG4gICAgd2FybmluZzogKG1zZzogTWVzc2FnZTxUPikgPT4gd2FybmluZyhtc2csIHByZWZpeCksXG4gICAgZXJyb3I6IChtc2c6IE1lc3NhZ2U8VD4sIGVycj86IEVycm9yKSA9PiBlcnJvcihtc2csIHByZWZpeCwgZXJyKSxcbiAgICBjcml0aWNhbDogKG1zZzogTWVzc2FnZTxUPiwgZXJyPzogRXJyb3IpID0+IGNyaXRpY2FsKG1zZywgcHJlZml4LCBlcnIpLFxuICB9O1xufVxuIl19