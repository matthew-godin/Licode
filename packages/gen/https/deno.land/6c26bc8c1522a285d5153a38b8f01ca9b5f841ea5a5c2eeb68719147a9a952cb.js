export function parseArray(source, transform, separator = ",") {
    return new ArrayParser(source, transform, separator).parse();
}
class ArrayParser {
    source;
    transform;
    separator;
    position = 0;
    entries = [];
    recorded = [];
    dimension = 0;
    constructor(source, transform, separator) {
        this.source = source;
        this.transform = transform;
        this.separator = separator;
    }
    isEof() {
        return this.position >= this.source.length;
    }
    nextCharacter() {
        const character = this.source[this.position++];
        if (character === "\\") {
            return {
                value: this.source[this.position++],
                escaped: true,
            };
        }
        return {
            value: character,
            escaped: false,
        };
    }
    record(character) {
        this.recorded.push(character);
    }
    newEntry(includeEmpty = false) {
        let entry;
        if (this.recorded.length > 0 || includeEmpty) {
            entry = this.recorded.join("");
            if (entry === "NULL" && !includeEmpty) {
                entry = null;
            }
            if (entry !== null)
                entry = this.transform(entry);
            this.entries.push(entry);
            this.recorded = [];
        }
    }
    consumeDimensions() {
        if (this.source[0] === "[") {
            while (!this.isEof()) {
                const char = this.nextCharacter();
                if (char.value === "=")
                    break;
            }
        }
    }
    parse(nested = false) {
        let character, parser, quote;
        this.consumeDimensions();
        while (!this.isEof()) {
            character = this.nextCharacter();
            if (character.value === "{" && !quote) {
                this.dimension++;
                if (this.dimension > 1) {
                    parser = new ArrayParser(this.source.substr(this.position - 1), this.transform, this.separator);
                    this.entries.push(parser.parse(true));
                    this.position += parser.position - 2;
                }
            }
            else if (character.value === "}" && !quote) {
                this.dimension--;
                if (!this.dimension) {
                    this.newEntry();
                    if (nested)
                        return this.entries;
                }
            }
            else if (character.value === '"' && !character.escaped) {
                if (quote)
                    this.newEntry(true);
                quote = !quote;
            }
            else if (character.value === this.separator && !quote) {
                this.newEntry();
            }
            else {
                this.record(character.value);
            }
        }
        if (this.dimension !== 0) {
            throw new Error("array dimension not balanced");
        }
        return this.entries;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXlfcGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXJyYXlfcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE1BQU0sVUFBVSxVQUFVLENBQ3hCLE1BQWMsRUFDZCxTQUF5QixFQUN6QixZQUErQixHQUFHO0lBRWxDLE9BQU8sSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMvRCxDQUFDO0FBRUQsTUFBTSxXQUFXO0lBT047SUFDQTtJQUNBO0lBUlQsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUNiLE9BQU8sR0FBbUIsRUFBRSxDQUFDO0lBQzdCLFFBQVEsR0FBYSxFQUFFLENBQUM7SUFDeEIsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUVkLFlBQ1MsTUFBYyxFQUNkLFNBQXlCLEVBQ3pCLFNBQTRCO1FBRjVCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxjQUFTLEdBQVQsU0FBUyxDQUFnQjtRQUN6QixjQUFTLEdBQVQsU0FBUyxDQUFtQjtJQUNsQyxDQUFDO0lBRUosS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM3QyxDQUFDO0lBRUQsYUFBYTtRQUNYLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDL0MsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3RCLE9BQU87Z0JBQ0wsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNuQyxPQUFPLEVBQUUsSUFBSTthQUNkLENBQUM7U0FDSDtRQUNELE9BQU87WUFDTCxLQUFLLEVBQUUsU0FBUztZQUNoQixPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFD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QUFDO2FBQ2pCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzlCO1NBQ0Y7UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztTQUNqRDtRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCYXNlZCBvZiBodHRwczovL2dpdGh1Yi5jb20vYmVuZHJ1Y2tlci9wb3N0Z3Jlcy1hcnJheVxuLy8gQ29weXJpZ2h0IChjKSBCZW4gRHJ1Y2tlciA8YnZkcnVja2VyQGdtYWlsLmNvbT4gKGJlbmRydWNrZXIubWUpLiBNSVQgTGljZW5zZS5cblxudHlwZSBBbGxvd2VkU2VwYXJhdG9ycyA9IFwiLFwiIHwgXCI7XCI7XG4vKiogSW5jb3JyZWN0bHkgcGFyc2VkIGRhdGEgdHlwZXMgZGVmYXVsdCB0byBudWxsICovXG50eXBlIEFycmF5UmVzdWx0PFQ+ID0gQXJyYXk8VCB8IG51bGwgfCBBcnJheVJlc3VsdDxUPj47XG50eXBlIFRyYW5zZm9ybWVyPFQ+ID0gKHZhbHVlOiBzdHJpbmcpID0+IFQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFycmF5PFQ+KFxuICBzb3VyY2U6IHN0cmluZyxcbiAgdHJhbnNmb3JtOiBUcmFuc2Zvcm1lcjxUPixcbiAgc2VwYXJhdG9yOiBBbGxvd2VkU2VwYXJhdG9ycyA9IFwiLFwiLFxuKSB7XG4gIHJldHVybiBuZXcgQXJyYXlQYXJzZXIoc291cmNlLCB0cmFuc2Zvcm0sIHNlcGFyYXRvcikucGFyc2UoKTtcbn1cblxuY2xhc3MgQXJyYXlQYXJzZXI8VD4ge1xuICBwb3NpdGlvbiA9IDA7XG4gIGVudHJpZXM6IEFycmF5UmVzdWx0PFQ+ID0gW107XG4gIHJlY29yZGVkOiBzdHJpbmdbXSA9IFtdO1xuICBkaW1lbnNpb24gPSAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBzb3VyY2U6IHN0cmluZyxcbiAgICBwdWJsaWMgdHJhbnNmb3JtOiBUcmFuc2Zvcm1lcjxUPixcbiAgICBwdWJsaWMgc2VwYXJhdG9yOiBBbGxvd2VkU2VwYXJhdG9ycyxcbiAgKSB7fVxuXG4gIGlzRW9mKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uID49IHRoaXMuc291cmNlLmxlbmd0aDtcbiAgfVxuXG4gIG5leHRDaGFyYWN0ZXIoKSB7XG4gICAgY29uc3QgY2hhcmFjdGVyID0gdGhpcy5zb3VyY2VbdGhpcy5wb3NpdGlvbisrXTtcbiAgICBpZiAoY2hhcmFjdGVyID09PSBcIlxcXFxcIikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuc291cmNlW3RoaXMucG9zaXRpb24rK10sXG4gICAgICAgIGVzY2FwZWQ6IHRydWUsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IGNoYXJhY3RlcixcbiAgICAgIGVzY2FwZWQ6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICByZWNvcmQoY2hhcmFjdGVyOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnJlY29yZGVkLnB1c2goY2hhcmFjdGVyKTtcbiAgfVxuXG4gIG5ld0VudHJ5KGluY2x1ZGVFbXB0eSA9IGZhbHNlKTogdm9pZCB7XG4gICAgbGV0IGVudHJ5O1xuICAgIGlmICh0aGlzLnJlY29yZGVkLmxlbmd0aCA+IDAgfHwgaW5jbHVkZUVtcHR5KSB7XG4gICAgICBlbnRyeSA9IHRoaXMucmVjb3JkZWQuam9pbihcIlwiKTtcbiAgICAgIGlmIChlbnRyeSA9PT0gXCJOVUxMXCIgJiYgIWluY2x1ZGVFbXB0eSkge1xuICAgICAgICBlbnRyeSA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoZW50cnkgIT09IG51bGwpIGVudHJ5ID0gdGhpcy50cmFuc2Zvcm0oZW50cnkpO1xuICAgICAgdGhpcy5lbnRyaWVzLnB1c2goZW50cnkpO1xuICAgICAgdGhpcy5yZWNvcmRlZCA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN1bWVEaW1lbnNpb25zKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNvdXJjZVswXSA9PT0gXCJbXCIpIHtcbiAgICAgIHdoaWxlICghdGhpcy5pc0VvZigpKSB7XG4gICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLm5leHRDaGFyYWN0ZXIoKTtcbiAgICAgICAgaWYgKGNoYXIudmFsdWUgPT09IFwiPVwiKSBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwYXJzZShuZXN0ZWQgPSBmYWxzZSk6IEFycmF5UmVzdWx0PFQ+IHtcbiAgICBsZXQgY2hhcmFjdGVyLCBwYXJzZXIsIHF1b3RlO1xuICAgIHRoaXMuY29uc3VtZURpbWVuc2lvbnMoKTtcbiAgICB3aGlsZSAoIXRoaXMuaXNFb2YoKSkge1xuICAgICAgY2hhcmFjdGVyID0gdGhpcy5uZXh0Q2hhcmFjdGVyKCk7XG4gICAgICBpZiAoY2hhcmFjdGVyLnZhbHVlID09PSBcIntcIiAmJiAhcXVvdGUpIHtcbiAgICAgICAgdGhpcy5kaW1lbnNpb24rKztcbiAgICAgICAgaWYgKHRoaXMuZGltZW5zaW9uID4gMSkge1xuICAgICAgICAgIHBhcnNlciA9IG5ldyBBcnJheVBhcnNlcihcbiAgICAgICAgICAgIHRoaXMuc291cmNlLnN1YnN0cih0aGlzLnBvc2l0aW9uIC0gMSksXG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSxcbiAgICAgICAgICAgIHRoaXMuc2VwYXJhdG9yLFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5lbnRyaWVzLnB1c2gocGFyc2VyLnBhcnNlKHRydWUpKTtcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uICs9IHBhcnNlci5wb3NpdGlvbiAtIDI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyLnZhbHVlID09PSBcIn1cIiAmJiAhcXVvdGUpIHtcbiAgICAgICAgdGhpcy5kaW1lbnNpb24tLTtcbiAgICAgICAgaWYgKCF0aGlzLmRpbWVuc2lvbikge1xuICAgICAgICAgIHRoaXMubmV3RW50cnkoKTtcbiAgICAgICAgICBpZiAobmVzdGVkKSByZXR1cm4gdGhpcy5lbnRyaWVzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoYXJhY3Rlci52YWx1ZSA9PT0gJ1wiJyAmJiAhY2hhcmFjdGVyLmVzY2FwZWQpIHtcbiAgICAgICAgaWYgKHF1b3RlKSB0aGlzLm5ld0VudHJ5KHRydWUpO1xuICAgICAgICBxdW90ZSA9ICFxdW90ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyLnZhbHVlID09PSB0aGlzLnNlcGFyYXRvciAmJiAhcXVvdGUpIHtcbiAgICAgICAgdGhpcy5uZXdFbnRyeSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZWNvcmQoY2hhcmFjdGVyLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZGltZW5zaW9uICE9PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhcnJheSBkaW1lbnNpb24gbm90IGJhbGFuY2VkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzO1xuICB9XG59XG4iXX0=