import { copyBytes } from "./deps.ts";
export class AsyncIterableReader {
    #asyncIterator;
    #closed = false;
    #current;
    #processValue;
    constructor(asyncIterable, processValue) {
        this.#asyncIterator = asyncIterable[Symbol.asyncIterator]();
        this.#processValue = processValue;
    }
    #close() {
        if (this.#asyncIterator.return) {
            this.#asyncIterator.return();
        }
        this.#asyncIterator = undefined;
        this.#closed = true;
    }
    async read(p) {
        if (this.#closed) {
            return null;
        }
        if (p.byteLength === 0) {
            this.#close();
            return 0;
        }
        if (!this.#current) {
            const { value, done } = await this.#asyncIterator.next();
            if (done) {
                this.#close();
            }
            if (value !== undefined) {
                this.#current = this.#processValue(value);
            }
        }
        if (!this.#current) {
            if (!this.#closed) {
                this.#close();
            }
            return null;
        }
        const len = copyBytes(this.#current, p);
        if (len >= this.#current.byteLength) {
            this.#current = undefined;
        }
        else {
            this.#current = this.#current.slice(len);
        }
        return len;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmNfaXRlcmFibGVfcmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXN5bmNfaXRlcmFibGVfcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdEMsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixjQUFjLENBQW1CO0lBQ2pDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDaEIsUUFBUSxDQUF5QjtJQUNqQyxhQUFhLENBQTJCO0lBRXhDLFlBQ0UsYUFBK0IsRUFDL0IsWUFBc0M7UUFFdEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFDNUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7SUFDcEMsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQzlCLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDOUI7UUFFQSxJQUFZLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFhO1FBQ3RCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtZQUN0QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDZCxPQUFPLENBQUMsQ0FBQztTQUNWO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDekQsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ2Y7WUFDRCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMzQztTQUNGO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNmO1lBQ0QsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO1lBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1NBQzNCO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIxIHRoZSBvYWsgYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCB7IGNvcHlCeXRlcyB9IGZyb20gXCIuL2RlcHMudHNcIjtcblxuZXhwb3J0IGNsYXNzIEFzeW5jSXRlcmFibGVSZWFkZXI8VD4gaW1wbGVtZW50cyBEZW5vLlJlYWRlciB7XG4gICNhc3luY0l0ZXJhdG9yOiBBc3luY0l0ZXJhdG9yPFQ+O1xuICAjY2xvc2VkID0gZmFsc2U7XG4gICNjdXJyZW50OiBVaW50OEFycmF5IHwgdW5kZWZpbmVkO1xuICAjcHJvY2Vzc1ZhbHVlOiAodmFsdWU6IFQpID0+IFVpbnQ4QXJyYXk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgYXN5bmNJdGVyYWJsZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBwcm9jZXNzVmFsdWU6ICh2YWx1ZTogVCkgPT4gVWludDhBcnJheSxcbiAgKSB7XG4gICAgdGhpcy4jYXN5bmNJdGVyYXRvciA9IGFzeW5jSXRlcmFibGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgdGhpcy4jcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlO1xuICB9XG5cbiAgI2Nsb3NlKCkge1xuICAgIGlmICh0aGlzLiNhc3luY0l0ZXJhdG9yLnJldHVybikge1xuICAgICAgdGhpcy4jYXN5bmNJdGVyYXRvci5yZXR1cm4oKTtcbiAgICB9XG4gICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgICAodGhpcyBhcyBhbnkpLiNhc3luY0l0ZXJhdG9yID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuI2Nsb3NlZCA9IHRydWU7XG4gIH1cblxuICBhc3luYyByZWFkKHA6IFVpbnQ4QXJyYXkpOiBQcm9taXNlPG51bWJlciB8IG51bGw+IHtcbiAgICBpZiAodGhpcy4jY2xvc2VkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHAuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy4jY2xvc2UoKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuI2N1cnJlbnQpIHtcbiAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IHRoaXMuI2FzeW5jSXRlcmF0b3IubmV4dCgpO1xuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgdGhpcy4jY2xvc2UoKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuI2N1cnJlbnQgPSB0aGlzLiNwcm9jZXNzVmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRoaXMuI2N1cnJlbnQpIHtcbiAgICAgIGlmICghdGhpcy4jY2xvc2VkKSB7XG4gICAgICAgIHRoaXMuI2Nsb3NlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbGVuID0gY29weUJ5dGVzKHRoaXMuI2N1cnJlbnQsIHApO1xuICAgIGlmIChsZW4gPj0gdGhpcy4jY3VycmVudC5ieXRlTGVuZ3RoKSB7XG4gICAgICB0aGlzLiNjdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiNjdXJyZW50ID0gdGhpcy4jY3VycmVudC5zbGljZShsZW4pO1xuICAgIH1cbiAgICByZXR1cm4gbGVuO1xuICB9XG59XG4iXX0=