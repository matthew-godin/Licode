import { SQLiteClient } from "../deps.ts";
import { AbstractClient } from "./AbstractClient.ts";
import { COL_CREATED_AT, COL_FILE_NAME, MAX_FILE_NAME_LENGTH, TABLE_MIGRATIONS, } from "../consts.ts";
import { NessieError } from "../cli/errors.ts";
export class ClientSQLite extends AbstractClient {
    dialect = "sqlite";
    #QUERY_TRANSACTION_START = `BEGIN TRANSACTION;`;
    #QUERY_TRANSACTION_COMMIT = `COMMIT;`;
    #QUERY_TRANSACTION_ROLLBACK = `ROLLBACK;`;
    #QUERY_MIGRATION_TABLE_EXISTS = `SELECT name FROM sqlite_master WHERE type='table' AND name='${TABLE_MIGRATIONS}';`;
    #QUERY_CREATE_MIGRATION_TABLE = `CREATE TABLE ${TABLE_MIGRATIONS} (id integer NOT NULL PRIMARY KEY autoincrement, ${COL_FILE_NAME} varchar(${MAX_FILE_NAME_LENGTH}) UNIQUE, ${COL_CREATED_AT} datetime NOT NULL DEFAULT CURRENT_TIMESTAMP);`;
    #QUERY_UPDATE_TIMESTAMPS = `UPDATE ${TABLE_MIGRATIONS} SET ${COL_FILE_NAME} = strftime('%Y%m%d%H%M%S', CAST(substr(${COL_FILE_NAME}, 0, instr(${COL_FILE_NAME}, '-')) AS INTEGER) / 1000, 'unixepoch') || substr(${COL_FILE_NAME}, instr(${COL_FILE_NAME}, '-')) WHERE CAST(substr(${COL_FILE_NAME}, 0, instr(${COL_FILE_NAME}, '-')) AS INTEGER) < 1672531200000;`;
    constructor(connectionOptions) {
        super({ client: new SQLiteClient(connectionOptions) });
    }
    async prepare() {
        const queryResult = await this.query(this.#QUERY_MIGRATION_TABLE_EXISTS);
        const migrationTableExists = queryResult?.[0]?.[0]?.[0] === TABLE_MIGRATIONS;
        if (!migrationTableExists) {
            await this.query(this.#QUERY_CREATE_MIGRATION_TABLE);
            console.info("Database setup complete");
        }
    }
    async updateTimestamps() {
        const queryResult = await this.query(this.#QUERY_MIGRATION_TABLE_EXISTS);
        const migrationTableExists = queryResult?.[0]?.[0]?.[0] === TABLE_MIGRATIONS;
        if (migrationTableExists) {
            await this.query(this.#QUERY_TRANSACTION_START);
            try {
                await this.query(this.#QUERY_UPDATE_TIMESTAMPS);
                await this.query(this.#QUERY_TRANSACTION_COMMIT);
                console.info("Updated timestamps");
            }
            catch (e) {
                await this.query(this.#QUERY_TRANSACTION_ROLLBACK);
                throw e;
            }
        }
    }
    async query(query) {
        if (typeof query === "string")
            query = this.splitAndTrimQueries(query);
        const ra = [];
        for await (const qs of query) {
            try {
                ra.push([...this.client.query(qs)]);
            }
            catch (e) {
                if (e?.message === "Query was empty") {
                    ra.push(undefined);
                }
                else {
                    throw new NessieError(query + "\n" + e + "\n" + ra.join("\n"));
                }
            }
        }
        return ra;
    }
    async close() {
        this.client?.close();
    }
    async migrate(amount) {
        const latestMigration = await this.query(this.QUERY_GET_LATEST);
        await this._migrate(amount, latestMigration?.[0]?.[0]?.[0], this.query.bind(this));
    }
    async rollback(amount) {
        const allMigrations = await this.query(this.QUERY_GET_ALL);
        await this._rollback(amount, allMigrations?.[0]?.flatMap((el) => el?.[0]), this.query.bind(this));
    }
    async seed(matcher) {
        await this._seed(matcher);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpZW50U1FMaXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ2xpZW50U1FMaXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBT3JELE9BQU8sRUFDTCxjQUFjLEVBQ2QsYUFBYSxFQUNiLG9CQUFvQixFQUNwQixnQkFBZ0IsR0FDakIsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBSy9DLE1BQU0sT0FBTyxZQUFhLFNBQVEsY0FBNEI7SUFDNUQsT0FBTyxHQUFlLFFBQVEsQ0FBQztJQUUvQix3QkFBd0IsR0FBRyxvQkFBb0IsQ0FBQztJQUNoRCx5QkFBeUIsR0FBRyxTQUFTLENBQUM7SUFDdEMsMkJBQTJCLEdBQUcsV0FBVyxDQUFDO0lBRTFDLDZCQUE2QixHQUMzQiwrREFBK0QsZ0JBQWdCLElBQUksQ0FBQztJQUV0Riw2QkFBNkIsR0FDM0IsZ0JBQWdCLGdCQUFnQixvREFBb0QsYUFBYSxZQUFZLG9CQUFvQixhQUFhLGNBQWMsZ0RBQWdELENBQUM7SUFFL00sd0JBQXdCLEdBQ3RCLFVBQVUsZ0JBQWdCLFFBQVEsYUFBYSwyQ0FBMkMsYUFBYSxjQUFjLGFBQWEsc0RBQXNELGFBQWEsV0FBVyxhQUFhLDZCQUE2QixhQUFhLGNBQWMsYUFBYSxzQ0FBc0MsQ0FBQztJQUUzVSxZQUFZLGlCQUEwQjtRQUNwQyxLQUFLLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxZQUFZLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPO1FBQ1gsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBRXpFLE1BQU0s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