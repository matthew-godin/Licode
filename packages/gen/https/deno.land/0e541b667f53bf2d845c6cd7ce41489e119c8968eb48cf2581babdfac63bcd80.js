import { parseConnectionUri } from "../utils/utils.ts";
import { ConnectionParamsError } from "../client/error.ts";
import { fromFileUrl, isAbsolute } from "../deps.ts";
function getPgEnv() {
    return {
        database: Deno.env.get("PGDATABASE"),
        hostname: Deno.env.get("PGHOST"),
        port: Deno.env.get("PGPORT"),
        user: Deno.env.get("PGUSER"),
        password: Deno.env.get("PGPASSWORD"),
        applicationName: Deno.env.get("PGAPPNAME"),
    };
}
function formatMissingParams(missingParams) {
    return `Missing connection parameters: ${missingParams.join(", ")}`;
}
function assertRequiredOptions(options, requiredKeys, has_env_access) {
    const missingParams = [];
    for (const key of requiredKeys) {
        if (options[key] === "" ||
            options[key] === null ||
            options[key] === undefined) {
            missingParams.push(key);
        }
    }
    if (missingParams.length) {
        let missing_params_message = formatMissingParams(missingParams);
        if (!has_env_access) {
            missing_params_message +=
                "\nConnection parameters can be read from environment variables only if Deno is run with env permission";
        }
        throw new ConnectionParamsError(missing_params_message);
    }
}
function parseOptionsFromUri(connString) {
    let postgres_uri;
    try {
        const uri = parseConnectionUri(connString);
        postgres_uri = {
            application_name: uri.params.application_name,
            dbname: uri.path || uri.params.dbname,
            driver: uri.driver,
            host: uri.host || uri.params.host,
            password: uri.password || uri.params.password,
            port: uri.port || uri.params.port,
            sslmode: uri.params.ssl === "true"
                ? "require"
                : uri.params.sslmode,
            user: uri.user || uri.params.user,
        };
    }
    catch (e) {
        throw new ConnectionParamsError(`Could not parse the connection string due to ${e}`);
    }
    if (!["postgres", "postgresql"].includes(postgres_uri.driver)) {
        throw new ConnectionParamsError(`Supplied DSN has invalid driver: ${postgres_uri.driver}.`);
    }
    const host_type = postgres_uri.host
        ? (isAbsolute(postgres_uri.host) ? "socket" : "tcp")
        : "socket";
    let tls;
    switch (postgres_uri.sslmode) {
        case undefined: {
            break;
        }
        case "disable": {
            tls = { enabled: false, enforce: false, caCertificates: [] };
            break;
        }
        case "prefer": {
            tls = { enabled: true, enforce: false, caCertificates: [] };
            break;
        }
        case "require": {
            tls = { enabled: true, enforce: true, caCertificates: [] };
            break;
        }
        default: {
            throw new ConnectionParamsError(`Supplied DSN has invalid sslmode '${postgres_uri.sslmode}'. Only 'disable', 'require', and 'prefer' are supported`);
        }
    }
    return {
        applicationName: postgres_uri.application_name,
        database: postgres_uri.dbname,
        hostname: postgres_uri.host,
        host_type,
        password: postgres_uri.password,
        port: postgres_uri.port,
        tls,
        user: postgres_uri.user,
    };
}
const DEFAULT_OPTIONS = {
    applicationName: "deno_postgres",
    connection: {
        attempts: 1,
    },
    host: "127.0.0.1",
    socket: "/tmp",
    host_type: "socket",
    port: 5432,
    tls: {
        enabled: true,
        enforce: false,
        caCertificates: [],
    },
};
export function createParams(params = {}) {
    if (typeof params === "string") {
        params = parseOptionsFromUri(params);
    }
    let pgEnv = {};
    let has_env_access = true;
    try {
        pgEnv = getPgEnv();
    }
    catch (e) {
        if (e instanceof Deno.errors.PermissionDenied) {
            has_env_access = false;
        }
        else {
            throw e;
        }
    }
    const provided_host = params.hostname ?? pgEnv.hostname;
    const host_type = params.host_type ??
        (provided_host ? "tcp" : DEFAULT_OPTIONS.host_type);
    if (!["tcp", "socket"].includes(host_type)) {
        throw new ConnectionParamsError(`"${host_type}" is not a valid host type`);
    }
    let host;
    if (host_type === "socket") {
        const socket = provided_host ?? DEFAULT_OPTIONS.socket;
        try {
            if (!isAbsolute(socket)) {
                const parsed_host = new URL(socket, Deno.mainModule);
                if (parsed_host.protocol === "file:") {
                    host = fromFileUrl(parsed_host);
                }
                else {
                    throw new ConnectionParamsError("The provided host is not a file path");
                }
            }
            else {
                host = socket;
            }
        }
        catch (e) {
            throw new ConnectionParamsError(`Could not parse host "${socket}" due to "${e}"`);
        }
    }
    else {
        host = provided_host ?? DEFAULT_OPTIONS.host;
    }
    let port;
    if (params.port) {
        port = Number(params.port);
    }
    else if (pgEnv.port) {
        port = Number(pgEnv.port);
    }
    else {
        port = DEFAULT_OPTIONS.port;
    }
    if (Number.isNaN(port) || port === 0) {
        throw new ConnectionParamsError(`"${params.port ?? pgEnv.port}" is not a valid port number`);
    }
    if (host_type === "socket" && params?.tls) {
        throw new ConnectionParamsError(`No TLS options are allowed when host type is set to "socket"`);
    }
    const tls_enabled = !!(params?.tls?.enabled ?? DEFAULT_OPTIONS.tls.enabled);
    const tls_enforced = !!(params?.tls?.enforce ?? DEFAULT_OPTIONS.tls.enforce);
    if (!tls_enabled && tls_enforced) {
        throw new ConnectionParamsError("Can't enforce TLS when client has TLS encryption is disabled");
    }
    const connection_options = {
        applicationName: params.applicationName ?? pgEnv.applicationName ??
            DEFAULT_OPTIONS.applicationName,
        connection: {
            attempts: params?.connection?.attempts ??
                DEFAULT_OPTIONS.connection.attempts,
        },
        database: params.database ?? pgEnv.database,
        hostname: host,
        host_type,
        password: params.password ?? pgEnv.password,
        port,
        tls: {
            enabled: tls_enabled,
            enforce: tls_enforced,
            caCertificates: params?.tls?.caCertificates ?? [],
        },
        user: params.user ?? pgEnv.user,
    };
    assertRequiredOptions(connection_options, ["applicationName", "database", "hostname", "host_type", "port", "user"], has_env_access);
    return connection_options;
}
//# sourceMappingURL=data:application/json;base64,