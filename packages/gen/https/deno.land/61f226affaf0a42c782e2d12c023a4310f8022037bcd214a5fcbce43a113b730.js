import { Oid } from "./oid.ts";
import { decodeBigint, decodeBigintArray, decodeBoolean, decodeBooleanArray, decodeBox, decodeBoxArray, decodeBytea, decodeByteaArray, decodeCircle, decodeCircleArray, decodeDate, decodeDateArray, decodeDatetime, decodeDatetimeArray, decodeInt, decodeIntArray, decodeJson, decodeJsonArray, decodeLine, decodeLineArray, decodeLineSegment, decodeLineSegmentArray, decodePath, decodePathArray, decodePoint, decodePointArray, decodePolygon, decodePolygonArray, decodeStringArray, decodeTid, decodeTidArray, } from "./decoders.ts";
export class Column {
    name;
    tableOid;
    index;
    typeOid;
    columnLength;
    typeModifier;
    format;
    constructor(name, tableOid, index, typeOid, columnLength, typeModifier, format) {
        this.name = name;
        this.tableOid = tableOid;
        this.index = index;
        this.typeOid = typeOid;
        this.columnLength = columnLength;
        this.typeModifier = typeModifier;
        this.format = format;
    }
}
var Format;
(function (Format) {
    Format[Format["TEXT"] = 0] = "TEXT";
    Format[Format["BINARY"] = 1] = "BINARY";
})(Format || (Format = {}));
const decoder = new TextDecoder();
function decodeBinary() {
    throw new Error("Not implemented!");
}
function decodeText(value, typeOid) {
    const strValue = decoder.decode(value);
    switch (typeOid) {
        case Oid.bpchar:
        case Oid.char:
        case Oid.cidr:
        case Oid.float4:
        case Oid.float8:
        case Oid.inet:
        case Oid.macaddr:
        case Oid.name:
        case Oid.numeric:
        case Oid.oid:
        case Oid.regclass:
        case Oid.regconfig:
        case Oid.regdictionary:
        case Oid.regnamespace:
        case Oid.regoper:
        case Oid.regoperator:
        case Oid.regproc:
        case Oid.regprocedure:
        case Oid.regrole:
        case Oid.regtype:
        case Oid.text:
        case Oid.time:
        case Oid.timetz:
        case Oid.uuid:
        case Oid.varchar:
        case Oid.void:
            return strValue;
        case Oid.bpchar_array:
        case Oid.char_array:
        case Oid.cidr_array:
        case Oid.float4_array:
        case Oid.float8_array:
        case Oid.inet_array:
        case Oid.macaddr_array:
        case Oid.name_array:
        case Oid.numeric_array:
        case Oid.oid_array:
        case Oid.regclass_array:
        case Oid.regconfig_array:
        case Oid.regdictionary_array:
        case Oid.regnamespace_array:
        case Oid.regoper_array:
        case Oid.regoperator_array:
        case Oid.regproc_array:
        case Oid.regprocedure_array:
        case Oid.regrole_array:
        case Oid.regtype_array:
        case Oid.text_array:
        case Oid.time_array:
        case Oid.timetz_array:
        case Oid.uuid_array:
        case Oid.varchar_array:
            return decodeStringArray(strValue);
        case Oid.int2:
        case Oid.int4:
        case Oid.xid:
            return decodeInt(strValue);
        case Oid.int2_array:
        case Oid.int4_array:
        case Oid.xid_array:
            return decodeIntArray(strValue);
        case Oid.bool:
            return decodeBoolean(strValue);
        case Oid.bool_array:
            return decodeBooleanArray(strValue);
        case Oid.box:
            return decodeBox(strValue);
        case Oid.box_array:
            return decodeBoxArray(strValue);
        case Oid.circle:
            return decodeCircle(strValue);
        case Oid.circle_array:
            return decodeCircleArray(strValue);
        case Oid.bytea:
            return decodeBytea(strValue);
        case Oid.byte_array:
            return decodeByteaArray(strValue);
        case Oid.date:
            return decodeDate(strValue);
        case Oid.date_array:
            return decodeDateArray(strValue);
        case Oid.int8:
            return decodeBigint(strValue);
        case Oid.int8_array:
            return decodeBigintArray(strValue);
        case Oid.json:
        case Oid.jsonb:
            return decodeJson(strValue);
        case Oid.json_array:
        case Oid.jsonb_array:
            return decodeJsonArray(strValue);
        case Oid.line:
            return decodeLine(strValue);
        case Oid.line_array:
            return decodeLineArray(strValue);
        case Oid.lseg:
            return decodeLineSegment(strValue);
        case Oid.lseg_array:
            return decodeLineSegmentArray(strValue);
        case Oid.path:
            return decodePath(strValue);
        case Oid.path_array:
            return decodePathArray(strValue);
        case Oid.point:
            return decodePoint(strValue);
        case Oid.point_array:
            return decodePointArray(strValue);
        case Oid.polygon:
            return decodePolygon(strValue);
        case Oid.polygon_array:
            return decodePolygonArray(strValue);
        case Oid.tid:
            return decodeTid(strValue);
        case Oid.tid_array:
            return decodeTidArray(strValue);
        case Oid.timestamp:
        case Oid.timestamptz:
            return decodeDatetime(strValue);
        case Oid.timestamp_array:
        case Oid.timestamptz_array:
            return decodeDatetimeArray(strValue);
        default:
            return strValue;
    }
}
export function decode(value, column) {
    if (column.format === Format.BINARY) {
        return decodeBinary();
    }
    else if (column.format === Format.TEXT) {
        return decodeText(value, column.typeOid);
    }
    else {
        throw new Error(`Unknown column format: ${column.format}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVjb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0IsT0FBTyxFQUNMLFlBQVksRUFDWixpQkFBaUIsRUFDakIsYUFBYSxFQUNiLGtCQUFrQixFQUNsQixTQUFTLEVBQ1QsY0FBYyxFQUNkLFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixVQUFVLEVBQ1YsZUFBZSxFQUNmLGNBQWMsRUFDZCxtQkFBbUIsRUFDbkIsU0FBUyxFQUNULGNBQWMsRUFDZCxVQUFVLEVBQ1YsZUFBZSxFQUNmLFVBQVUsRUFDVixlQUFlLEVBQ2YsaUJBQWlCLEVBQ2pCLHNCQUFzQixFQUN0QixVQUFVLEVBQ1YsZUFBZSxFQUNmLFdBQVcsRUFDWCxnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsU0FBUyxFQUNULGNBQWMsR0FDZixNQUFNLGVBQWUsQ0FBQztBQUV2QixNQUFNLE9BQU8sTUFBTTtJQUVSO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBUFQsWUFDUyxJQUFZLEVBQ1osUUFBZ0IsRUFDaEIsS0FBYSxFQUNiLE9BQWUsRUFDZixZQUFvQixFQUNwQixZQUFvQixFQUNwQixNQUFjO1FBTmQsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUNwQixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUNwQixXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ3BCLENBQUM7Q0FDTDtBQUVELElBQUssTUFHSjtBQUhELFdBQUssTUFBTTtJQUNULG1DQUFRLENBQUE7SUFDUix1Q0FBVSxDQUFB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LENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsS0FBSyxHQUFHLENBQUMsYUFBYTtZQUNwQixPQUFPLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLEtBQUssR0FBRyxDQUFDLEdBQUc7WUFDVixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QixLQUFLLEdBQUcsQ0FBQyxTQUFTO1lBQ2hCLE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLEtBQUssR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUNuQixLQUFLLEdBQUcsQ0FBQyxXQUFXO1lBQ2xCLE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLEtBQUssR0FBRyxDQUFDLGVBQWUsQ0FBQztRQUN6QixLQUFLLEdBQUcsQ0FBQyxpQkFBaUI7WUFDeEIsT0FBTyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QztZQUtFLE9BQU8sUUFBUSxDQUFDO0tBQ25CO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsS0FBaUIsRUFBRSxNQUFjO0lBQ3RELElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ25DLE9BQU8sWUFBWSxFQUFFLENBQUM7S0FDdkI7U0FBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTtRQUN4QyxPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzFDO1NBQU07UUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUM1RDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPaWQgfSBmcm9tIFwiLi9vaWQudHNcIjtcbmltcG9ydCB7XG4gIGRlY29kZUJpZ2ludCxcbiAgZGVjb2RlQmlnaW50QXJyYXksXG4gIGRlY29kZUJvb2xlYW4sXG4gIGRlY29kZUJvb2xlYW5BcnJheSxcbiAgZGVjb2RlQm94LFxuICBkZWNvZGVCb3hBcnJheSxcbiAgZGVjb2RlQnl0ZWEsXG4gIGRlY29kZUJ5dGVhQXJyYXksXG4gIGRlY29kZUNpcmNsZSxcbiAgZGVjb2RlQ2lyY2xlQXJyYXksXG4gIGRlY29kZURhdGUsXG4gIGRlY29kZURhdGVBcnJheSxcbiAgZGVjb2RlRGF0ZXRpbWUsXG4gIGRlY29kZURhdGV0aW1lQXJyYXksXG4gIGRlY29kZUludCxcbiAgZGVjb2RlSW50QXJyYXksXG4gIGRlY29kZUpzb24sXG4gIGRlY29kZUpzb25BcnJheSxcbiAgZGVjb2RlTGluZSxcbiAgZGVjb2RlTGluZUFycmF5LFxuICBkZWNvZGVMaW5lU2VnbWVudCxcbiAgZGVjb2RlTGluZVNlZ21lbnRBcnJheSxcbiAgZGVjb2RlUGF0aCxcbiAgZGVjb2RlUGF0aEFycmF5LFxuICBkZWNvZGVQb2ludCxcbiAgZGVjb2RlUG9pbnRBcnJheSxcbiAgZGVjb2RlUG9seWdvbixcbiAgZGVjb2RlUG9seWdvbkFycmF5LFxuICBkZWNvZGVTdHJpbmdBcnJheSxcbiAgZGVjb2RlVGlkLFxuICBkZWNvZGVUaWRBcnJheSxcbn0gZnJvbSBcIi4vZGVjb2RlcnMudHNcIjtcblxuZXhwb3J0IGNsYXNzIENvbHVtbiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIHRhYmxlT2lkOiBudW1iZXIsXG4gICAgcHVibGljIGluZGV4OiBudW1iZXIsXG4gICAgcHVibGljIHR5cGVPaWQ6IG51bWJlcixcbiAgICBwdWJsaWMgY29sdW1uTGVuZ3RoOiBudW1iZXIsXG4gICAgcHVibGljIHR5cGVNb2RpZmllcjogbnVtYmVyLFxuICAgIHB1YmxpYyBmb3JtYXQ6IEZvcm1hdCxcbiAgKSB7fVxufVxuXG5lbnVtIEZvcm1hdCB7XG4gIFRFWFQgPSAwLFxuICBCSU5BUlkgPSAxLFxufVxuXG5jb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5cbi8vIFRPRE9cbi8vIERlY29kZSBiaW5hcnkgZmllbGRzXG5mdW5jdGlvbiBkZWNvZGVCaW5hcnkoKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCFcIik7XG59XG5cbi8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBkZWNvZGVUZXh0KHZhbHVlOiBVaW50OEFycmF5LCB0eXBlT2lkOiBudW1iZXIpOiBhbnkge1xuICBjb25zdCBzdHJWYWx1ZSA9IGRlY29kZXIuZGVjb2RlKHZhbHVlKTtcblxuICBzd2l0Y2ggKHR5cGVPaWQpIHtcbiAgICBjYXNlIE9pZC5icGNoYXI6XG4gICAgY2FzZSBPaWQuY2hhcjpcbiAgICBjYXNlIE9pZC5jaWRyOlxuICAgIGNhc2UgT2lkLmZsb2F0NDpcbiAgICBjYXNlIE9pZC5mbG9hdDg6XG4gICAgY2FzZSBPaWQuaW5ldDpcbiAgICBjYXNlIE9pZC5tYWNhZGRyOlxuICAgIGNhc2UgT2lkLm5hbWU6XG4gICAgY2FzZSBPaWQubnVtZXJpYzpcbiAgICBjYXNlIE9pZC5vaWQ6XG4gICAgY2FzZSBPaWQucmVnY2xhc3M6XG4gICAgY2FzZSBPaWQucmVnY29uZmlnOlxuICAgIGNhc2UgT2lkLnJlZ2RpY3Rpb25hcnk6XG4gICAgY2FzZSBPaWQucmVnbmFtZXNwYWNlOlxuICAgIGNhc2UgT2lkLnJlZ29wZXI6XG4gICAgY2FzZSBPaWQucmVnb3BlcmF0b3I6XG4gICAgY2FzZSBPaWQucmVncHJvYzpcbiAgICBjYXNlIE9pZC5yZWdwcm9jZWR1cmU6XG4gICAgY2FzZSBPaWQucmVncm9sZTpcbiAgICBjYXNlIE9pZC5yZWd0eXBlOlxuICAgIGNhc2UgT2lkLnRleHQ6XG4gICAgY2FzZSBPaWQudGltZTpcbiAgICBjYXNlIE9pZC50aW1ldHo6XG4gICAgY2FzZSBPaWQudXVpZDpcbiAgICBjYXNlIE9pZC52YXJjaGFyOlxuICAgIGNhc2UgT2lkLnZvaWQ6XG4gICAgICByZXR1cm4gc3RyVmFsdWU7XG4gICAgY2FzZSBPaWQuYnBjaGFyX2FycmF5OlxuICAgIGNhc2UgT2lkLmNoYXJfYXJyYXk6XG4gICAgY2FzZSBPaWQuY2lkcl9hcnJheTpcbiAgICBjYXNlIE9pZC5mbG9hdDRfYXJyYXk6XG4gICAgY2FzZSBPaWQuZmxvYXQ4X2FycmF5OlxuICAgIGNhc2UgT2lkLmluZXRfYXJyYXk6XG4gICAgY2FzZSBPaWQubWFjYWRkcl9hcnJheTpcbiAgICBjYXNlIE9pZC5uYW1lX2FycmF5OlxuICAgIGNhc2UgT2lkLm51bWVyaWNfYXJyYXk6XG4gICAgY2FzZSBPaWQub2lkX2FycmF5OlxuICAgIGNhc2UgT2lkLnJlZ2NsYXNzX2FycmF5OlxuICAgIGNhc2UgT2lkLnJlZ2NvbmZpZ19hcnJheTpcbiAgICBjYXNlIE9pZC5yZWdkaWN0aW9uYXJ5X2FycmF5OlxuICAgIGNhc2UgT2lkLnJlZ25hbWVzcGFjZV9hcnJheTpcbiAgICBjYXNlIE9pZC5yZWdvcGVyX2FycmF5OlxuICAgIGNhc2UgT2lkLnJlZ29wZXJhdG9yX2FycmF5OlxuICAgIGNhc2UgT2lkLnJlZ3Byb2NfYXJyYXk6XG4gICAgY2FzZSBPaWQucmVncHJvY2VkdXJlX2FycmF5OlxuICAgIGNhc2UgT2lkLnJlZ3JvbGVfYXJyYXk6XG4gICAgY2FzZSBPaWQucmVndHlwZV9hcnJheTpcbiAgICBjYXNlIE9pZC50ZXh0X2FycmF5OlxuICAgIGNhc2UgT2lkLnRpbWVfYXJyYXk6XG4gICAgY2FzZSBPaWQudGltZXR6X2FycmF5OlxuICAgIGNhc2UgT2lkLnV1aWRfYXJyYXk6XG4gICAgY2FzZSBPaWQudmFyY2hhcl9hcnJheTpcbiAgICAgIHJldHVybiBkZWNvZGVTdHJpbmdBcnJheShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQuaW50MjpcbiAgICBjYXNlIE9pZC5pbnQ0OlxuICAgIGNhc2UgT2lkLnhpZDpcbiAgICAgIHJldHVybiBkZWNvZGVJbnQoc3RyVmFsdWUpO1xuICAgIGNhc2UgT2lkLmludDJfYXJyYXk6XG4gICAgY2FzZSBPaWQuaW50NF9hcnJheTpcbiAgICBjYXNlIE9pZC54aWRfYXJyYXk6XG4gICAgICByZXR1cm4gZGVjb2RlSW50QXJyYXkoc3RyVmFsdWUpO1xuICAgIGNhc2UgT2lkLmJvb2w6XG4gICAgICByZXR1cm4gZGVjb2RlQm9vbGVhbihzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQuYm9vbF9hcnJheTpcbiAgICAgIHJldHVybiBkZWNvZGVCb29sZWFuQXJyYXkoc3RyVmFsdWUpO1xuICAgIGNhc2UgT2lkLmJveDpcbiAgICAgIHJldHVybiBkZWNvZGVCb3goc3RyVmFsdWUpO1xuICAgIGNhc2UgT2lkLmJveF9hcnJheTpcbiAgICAgIHJldHVybiBkZWNvZGVCb3hBcnJheShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQuY2lyY2xlOlxuICAgICAgcmV0dXJuIGRlY29kZUNpcmNsZShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQuY2lyY2xlX2FycmF5OlxuICAgICAgcmV0dXJuIGRlY29kZUNpcmNsZUFycmF5KHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC5ieXRlYTpcbiAgICAgIHJldHVybiBkZWNvZGVCeXRlYShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQuYnl0ZV9hcnJheTpcbiAgICAgIHJldHVybiBkZWNvZGVCeXRlYUFycmF5KHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC5kYXRlOlxuICAgICAgcmV0dXJuIGRlY29kZURhdGUoc3RyVmFsdWUpO1xuICAgIGNhc2UgT2lkLmRhdGVfYXJyYXk6XG4gICAgICByZXR1cm4gZGVjb2RlRGF0ZUFycmF5KHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC5pbnQ4OlxuICAgICAgcmV0dXJuIGRlY29kZUJpZ2ludChzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQuaW50OF9hcnJheTpcbiAgICAgIHJldHVybiBkZWNvZGVCaWdpbnRBcnJheShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQuanNvbjpcbiAgICBjYXNlIE9pZC5qc29uYjpcbiAgICAgIHJldHVybiBkZWNvZGVKc29uKHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC5qc29uX2FycmF5OlxuICAgIGNhc2UgT2lkLmpzb25iX2FycmF5OlxuICAgICAgcmV0dXJuIGRlY29kZUpzb25BcnJheShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQubGluZTpcbiAgICAgIHJldHVybiBkZWNvZGVMaW5lKHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC5saW5lX2FycmF5OlxuICAgICAgcmV0dXJuIGRlY29kZUxpbmVBcnJheShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQubHNlZzpcbiAgICAgIHJldHVybiBkZWNvZGVMaW5lU2VnbWVudChzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQubHNlZ19hcnJheTpcbiAgICAgIHJldHVybiBkZWNvZGVMaW5lU2VnbWVudEFycmF5KHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC5wYXRoOlxuICAgICAgcmV0dXJuIGRlY29kZVBhdGgoc3RyVmFsdWUpO1xuICAgIGNhc2UgT2lkLnBhdGhfYXJyYXk6XG4gICAgICByZXR1cm4gZGVjb2RlUGF0aEFycmF5KHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC5wb2ludDpcbiAgICAgIHJldHVybiBkZWNvZGVQb2ludChzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQucG9pbnRfYXJyYXk6XG4gICAgICByZXR1cm4gZGVjb2RlUG9pbnRBcnJheShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQucG9seWdvbjpcbiAgICAgIHJldHVybiBkZWNvZGVQb2x5Z29uKHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC5wb2x5Z29uX2FycmF5OlxuICAgICAgcmV0dXJuIGRlY29kZVBvbHlnb25BcnJheShzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQudGlkOlxuICAgICAgcmV0dXJuIGRlY29kZVRpZChzdHJWYWx1ZSk7XG4gICAgY2FzZSBPaWQudGlkX2FycmF5OlxuICAgICAgcmV0dXJuIGRlY29kZVRpZEFycmF5KHN0clZhbHVlKTtcbiAgICBjYXNlIE9pZC50aW1lc3RhbXA6XG4gICAgY2FzZSBPaWQudGltZXN0YW1wdHo6XG4gICAgICByZXR1cm4gZGVjb2RlRGF0ZXRpbWUoc3RyVmFsdWUpO1xuICAgIGNhc2UgT2lkLnRpbWVzdGFtcF9hcnJheTpcbiAgICBjYXNlIE9pZC50aW1lc3RhbXB0el9hcnJheTpcbiAgICAgIHJldHVybiBkZWNvZGVEYXRldGltZUFycmF5KHN0clZhbHVlKTtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gQSBzZXBhcmF0ZSBjYXRlZ29yeSBmb3Igbm90IGhhbmRsZWQgdmFsdWVzXG4gICAgICAvLyBUaGV5IG1pZ2h0IG9yIG1pZ2h0IG5vdCBiZSByZXByZXNlbnRlZCBjb3JyZWN0bHkgYXMgc3RyaW5ncyxcbiAgICAgIC8vIHJldHVybmluZyB0aGVtIHRvIHRoZSB1c2VyIGFzIHJhdyBzdHJpbmdzIGFsbG93cyB0aGVtIHRvIHBhcnNlXG4gICAgICAvLyB0aGVtIGFzIHRoZXkgc2VlIGZpdFxuICAgICAgcmV0dXJuIHN0clZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUodmFsdWU6IFVpbnQ4QXJyYXksIGNvbHVtbjogQ29sdW1uKSB7XG4gIGlmIChjb2x1bW4uZm9ybWF0ID09PSBGb3JtYXQuQklOQVJZKSB7XG4gICAgcmV0dXJuIGRlY29kZUJpbmFyeSgpO1xuICB9IGVsc2UgaWYgKGNvbHVtbi5mb3JtYXQgPT09IEZvcm1hdC5URVhUKSB7XG4gICAgcmV0dXJuIGRlY29kZVRleHQodmFsdWUsIGNvbHVtbi50eXBlT2lkKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gY29sdW1uIGZvcm1hdDogJHtjb2x1bW4uZm9ybWF0fWApO1xuICB9XG59XG4iXX0=