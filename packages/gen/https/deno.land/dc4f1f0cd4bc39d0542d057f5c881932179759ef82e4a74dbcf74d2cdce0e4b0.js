import { assert } from "./deps.ts";
import { NativeRequest } from "./http_server_native.ts";
const encoder = new TextEncoder();
const DEFAULT_KEEP_ALIVE_INTERVAL = 30_000;
class CloseEvent extends Event {
    constructor(eventInit) {
        super("close", eventInit);
    }
}
export class ServerSentEvent extends Event {
    #data;
    #id;
    #type;
    constructor(type, data, { replacer, space, ...eventInit } = {}) {
        super(type, eventInit);
        this.#type = type;
        try {
            this.#data = typeof data === "string"
                ? data
                : JSON.stringify(data, replacer, space);
        }
        catch (e) {
            assert(e instanceof Error);
            throw new TypeError(`data could not be coerced into a serialized string.\n  ${e.message}`);
        }
        const { id } = eventInit;
        this.#id = id;
    }
    get data() {
        return this.#data;
    }
    get id() {
        return this.#id;
    }
    toString() {
        const data = `data: ${this.#data.split("\n").join("\ndata: ")}\n`;
        return `${this.#type === "__message" ? "" : `event: ${this.#type}\n`}${this.#id ? `id: ${String(this.#id)}\n` : ""}${data}\n`;
    }
}
const response = `HTTP/1.1 200 OK\n`;
const responseHeaders = new Headers([
    ["Connection", "Keep-Alive"],
    ["Content-Type", "text/event-stream"],
    ["Cache-Control", "no-cache"],
    ["Keep-Alive", `timeout=${Number.MAX_SAFE_INTEGER}`],
]);
export class SSEStreamTarget extends EventTarget {
    #closed = false;
    #context;
    #controller;
    #keepAliveId;
    #error(error) {
        console.log("error", error);
        this.dispatchEvent(new CloseEvent({ cancelable: false }));
        const errorEvent = new ErrorEvent("error", { error });
        this.dispatchEvent(errorEvent);
        this.#context.app.dispatchEvent(errorEvent);
    }
    #push(payload) {
        if (!this.#controller) {
            this.#error(new Error("The controller has not been set."));
            return;
        }
        if (this.#closed) {
            return;
        }
        this.#controller.enqueue(encoder.encode(payload));
    }
    get closed() {
        return this.#closed;
    }
    constructor(context, { headers, keepAlive = false } = {}) {
        super();
        this.#context = context;
        context.response.body = new ReadableStream({
            start: (controller) => {
                this.#controller = controller;
            },
            cancel: (error) => {
                if (error instanceof Error && error.message.includes("connection closed")) {
                    this.close();
                }
                else {
                    this.#error(error);
                }
            },
        });
        if (headers) {
            for (const [key, value] of headers) {
                context.response.headers.set(key, value);
            }
        }
        for (const [key, value] of responseHeaders) {
            context.response.headers.set(key, value);
        }
        this.addEventListener("close", () => {
            this.#closed = true;
            if (this.#keepAliveId != null) {
                clearInterval(this.#keepAliveId);
                this.#keepAliveId = undefined;
            }
            if (this.#controller) {
                try {
                    this.#controller.close();
                }
                catch {
                }
            }
        });
        if (keepAlive) {
            const interval = typeof keepAlive === "number"
                ? keepAlive
                : DEFAULT_KEEP_ALIVE_INTERVAL;
            this.#keepAliveId = setInterval(() => {
                this.dispatchComment("keep-alive comment");
            }, interval);
        }
    }
    close() {
        this.dispatchEvent(new CloseEvent({ cancelable: false }));
        return Promise.resolve();
    }
    dispatchComment(comment) {
        this.#push(`: ${comment.split("\n").join("\n: ")}\n\n`);
        return true;
    }
    dispatchMessage(data) {
        const event = new ServerSentEvent("__message", data);
        return this.dispatchEvent(event);
    }
    dispatchEvent(event) {
        const dispatched = super.dispatchEvent(event);
        if (dispatched && event instanceof ServerSentEvent) {
            this.#push(String(event));
        }
        return dispatched;
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        return `${this.constructor.name} ${inspect({ "#closed": this.#closed, "#context": this.#context })}`;
    }
}
export class SSEStdLibTarget extends EventTarget {
    #app;
    #closed = false;
    #keepAliveId;
    #prev = Promise.resolve();
    #ready;
    #serverRequest;
    #writer;
    async #send(payload, prev) {
        if (this.#closed) {
            return;
        }
        if (this.#ready !== true) {
            await this.#ready;
            this.#ready = true;
        }
        try {
            await prev;
            await this.#writer.write(encoder.encode(payload));
            await this.#writer.flush();
        }
        catch (error) {
            this.dispatchEvent(new CloseEvent({ cancelable: false }));
            const errorEvent = new ErrorEvent("error", { error });
            this.dispatchEvent(errorEvent);
            this.#app.dispatchEvent(errorEvent);
        }
    }
    async #setup(overrideHeaders) {
        const headers = new Headers(responseHeaders);
        if (overrideHeaders) {
            for (const [key, value] of overrideHeaders) {
                headers.set(key, value);
            }
        }
        let payload = response;
        for (const [key, value] of headers) {
            payload += `${key}: ${value}\n`;
        }
        payload += `\n`;
        try {
            await this.#writer.write(encoder.encode(payload));
            await this.#writer.flush();
        }
        catch (error) {
            this.dispatchEvent(new CloseEvent({ cancelable: false }));
            const errorEvent = new ErrorEvent("error", { error });
            this.dispatchEvent(errorEvent);
            this.#app.dispatchEvent(errorEvent);
            throw error;
        }
    }
    get closed() {
        return this.#closed;
    }
    constructor(context, { headers, keepAlive = false } = {}) {
        super();
        this.#app = context.app;
        assert(!(context.request.originalRequest instanceof NativeRequest));
        this.#serverRequest = context.request.originalRequest;
        this.#writer = this.#serverRequest.w;
        this.addEventListener("close", () => {
            this.#closed = true;
            if (this.#keepAliveId != null) {
                clearInterval(this.#keepAliveId);
                this.#keepAliveId = undefined;
            }
            try {
                this.#serverRequest.conn.close();
            }
            catch (error) {
                if (!(error instanceof Deno.errors.BadResource)) {
                    const errorEvent = new ErrorEvent("error", { error });
                    this.dispatchEvent(errorEvent);
                    this.#app.dispatchEvent(errorEvent);
                }
            }
        });
        if (keepAlive) {
            const interval = typeof keepAlive === "number"
                ? keepAlive
                : DEFAULT_KEEP_ALIVE_INTERVAL;
            this.#keepAliveId = setInterval(() => {
                this.dispatchComment("keep-alive comment");
            }, interval);
        }
        this.#ready = this.#setup(headers);
    }
    async close() {
        if (this.#ready !== true) {
            await this.#ready;
        }
        await this.#prev;
        this.dispatchEvent(new CloseEvent({ cancelable: false }));
    }
    dispatchComment(comment) {
        this.#prev = this.#send(`: ${comment.split("\n").join("\n: ")}\n\n`, this.#prev);
        return true;
    }
    dispatchMessage(data) {
        const event = new ServerSentEvent("__message", data);
        return this.dispatchEvent(event);
    }
    dispatchEvent(event) {
        const dispatched = super.dispatchEvent(event);
        if (dispatched && event instanceof ServerSentEvent) {
            this.#prev = this.#send(String(event), this.#prev);
        }
        return dispatched;
    }
    [Symbol.for("Deno.customInspect")](inspect) {
        return `${this.constructor.name} ${inspect({ "closed": this.closed })}`;
    }
}
//# sourceMappingURL=data:application/json;base64,