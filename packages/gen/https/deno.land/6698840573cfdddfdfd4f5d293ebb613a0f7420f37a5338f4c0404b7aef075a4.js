import { existsSync, extname, globToRegExp, JSON_SCHEMA, log, parseYaml, resolve, } from "../deps.ts";
import { merge } from "./merge.ts";
const logger = log.create("conf");
export const configs = [
    "denon.yaml",
    "denon.yml",
    "denon.json",
    "scripts.json",
    "scripts.yml",
    "scripts.yaml",
    "denon.config.ts",
    "scripts.config.ts",
    "denon.config.js",
    "scripts.config.js",
    "scripts.ts",
    "scripts.js",
];
export const reConfig = new RegExp(configs
    .map((_) => `**/${_}`)
    .map((_) => globToRegExp(_).source)
    .join("|"));
export const DEFAULT_DENON_CONFIG = {
    scripts: {},
    watcher: {
        interval: 350,
        paths: [],
        exts: ["ts", "tsx", "js", "jsx", "json"],
        match: ["**/*.*"],
        skip: ["**/.git/**"],
    },
    watch: true,
    logger: {
        quiet: false,
        debug: false,
        fullscreen: false,
    },
    configPath: "",
};
async function readYaml(file) {
    const source = await Deno.readTextFile(file);
    return parseYaml(source, {
        schema: JSON_SCHEMA,
        json: true,
    });
}
async function readJson(file) {
    const source = await Deno.readTextFile(file);
    return JSON.parse(source);
}
async function importConfig(file) {
    try {
        const configRaw = await import(`file://${resolve(file)}`);
        return configRaw.default;
    }
    catch (error) {
        logger.error(error.message ?? "Error opening ts config config");
        return;
    }
}
function cleanConfig(config, file) {
    if (config.watcher) {
        if (config.watcher.exts) {
            config.watcher.exts = config.watcher.exts.map((_) => _.startsWith(".") ? _.substr(1) : _);
        }
        if (config.watcher.skip) {
            config.watcher.skip = config.watcher.skip.map((_) => _.startsWith("./") ? _.substr(2) : _);
        }
        if (config.watcher.match) {
            config.watcher.match = config.watcher.match.map((_) => _.startsWith("./") ? _.substr(2) : _);
        }
    }
    if (file) {
        config.configPath = resolve(file);
    }
    return config;
}
export function getConfigFilename() {
    return configs.find((filename) => {
        return existsSync(filename) && Deno.statSync(filename).isFile;
    });
}
export async function readConfig(file = getConfigFilename()) {
    let config = DEFAULT_DENON_CONFIG;
    if (!config.watcher.paths)
        config.watcher.paths = [];
    config.watcher.paths.push(Deno.cwd());
    if (file) {
        if (file.endsWith(".js") || file.endsWith(".ts")) {
            const parsed = await importConfig(file);
            if (parsed) {
                config = merge(config, cleanConfig(parsed, file));
            }
        }
        else {
            try {
                const extension = extname(file);
                if (/^\.ya?ml$/.test(extension)) {
                    const parsed = await readYaml(file);
                    config = merge(config, cleanConfig(parsed, file));
                }
                else if (/^\.json$/.test(extension)) {
                    const parsed = await readJson(file);
                    config = merge(config, cleanConfig(parsed, file));
                }
                else {
                    try {
                        const parsed = await readJson(file);
                        config = merge(config, cleanConfig(parsed, file));
                    }
                    catch {
                        const parsed = await readYaml(file);
                        config = merge(config, cleanConfig(parsed, file));
                    }
                }
            }
            catch {
                logger.warning(`unsupported configuration \`${file}\``);
            }
        }
    }
    return config;
}
export async function writeConfigTemplate(template) {
    try {
        logger.info(`writing template to \`${template.filename}\``);
        await Deno.writeTextFile(resolve(Deno.cwd(), template.filename), template.source);
        logger.info(`\`${template.filename}\` created in current working directory`);
    }
    catch {
        logger.error(`\`${template.filename}\` cannot be saved in current working directory`);
    }
}
//# sourceMappingURL=data:application/json;base64,