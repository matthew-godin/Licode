import * as ansiEscapes from "./ansi_escapes.ts";
import { getCursorPosition } from "./cursor_position.ts";
export const tty = factory();
function factory(options) {
    let result = "";
    let stack = [];
    const stdout = options?.stdout ?? Deno.stdout;
    const stdin = options?.stdin ?? Deno.stdin;
    const tty = function (...args) {
        if (this) {
            update(args);
            stdout.writeSync(new TextEncoder().encode(result));
            return this;
        }
        return factory(args[0] ?? options);
    };
    tty.text = function (text) {
        stack.push([text, []]);
        update();
        stdout.writeSync(new TextEncoder().encode(result));
        return this;
    };
    tty.getCursorPosition = () => getCursorPosition({ stdout, stdin });
    const methodList = Object.entries(ansiEscapes);
    for (const [name, method] of methodList) {
        if (name === "cursorPosition") {
            continue;
        }
        Object.defineProperty(tty, name, {
            get() {
                stack.push([method, []]);
                return this;
            },
        });
    }
    return tty;
    function update(args) {
        if (!stack.length) {
            return;
        }
        if (args) {
            stack[stack.length - 1][1] = args;
        }
        result = stack.reduce((prev, [cur, args]) => prev + (typeof cur === "string" ? cur : cur.call(tty, ...args)), "");
        stack = [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cHM6Ly9kZW5vLmxhbmQveC9jbGlmZnlAdjAuMTkuMi9hbnNpL3R0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssV0FBVyxNQUFNLG1CQUFtQixDQUFDO0FBRWpELE9BQU8sRUFBVSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBcUNqRSxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQVEsT0FBTyxFQUFFLENBQUM7QUFFbEMsU0FBUyxPQUFPLENBQUMsT0FBb0I7SUFDbkMsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLElBQUksS0FBSyxHQUE0QixFQUFFLENBQUM7SUFDeEMsTUFBTSxNQUFNLEdBQW9CLE9BQU8sRUFBRSxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMvRCxNQUFNLEtBQUssR0FBc0MsT0FBTyxFQUFFLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO0lBRTlFLE1BQU0sR0FBRyxHQUFRLFVBRWYsR0FBRyxJQUF5QjtRQUU1QixJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNiLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNuRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBZSxJQUFJLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQVEsQ0FBQztJQUVULEdBQUcsQ0FBQyxJQUFJLEdBQUcsVUFBVSxJQUFZO1FBQy9CLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLEVBQUUsQ0FBQztRQUNULE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztJQUVGLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxHQUFXLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRTNFLE1BQU0sVUFBVSxHQUFxQyxNQUFNLENBQUMsT0FBTyxDQUNqRSxXQUFXLENBQ3dCLENBQUM7SUFFdEMsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRTtRQUN2QyxJQUFJLElBQUksS0FBSyxnQkFBZ0IsRUFBRTtZQUM3QixTQUFTO1NBQ1Y7UUFDRCxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7WUFDL0IsR0FBRztnQkFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztTQUNGLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyxHQUFHLENBQUM7SUFFWCxTQUFTLE1BQU0sQ0FBQyxJQUFXO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pCLE9BQU87U0FDUjtRQUNELElBQUksSUFBSSxFQUFFO1lBQ1IsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ25DO1FBQ0QsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQ25CLENBQUMsSUFBWSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBbUIsRUFBRSxFQUFFLENBQzlDLElBQUksR0FBRyxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQ2pFLEVBQUUsQ0FDSCxDQUFDO1FBQ0YsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNiLENBQUM7QUFDSCxDQUFDIn0=