import { State } from "../state.ts";
export class LoaderState extends State {
    input;
    documents = [];
    length;
    lineIndent = 0;
    lineStart = 0;
    position = 0;
    line = 0;
    filename;
    onWarning;
    legacy;
    json;
    listener;
    implicitTypes;
    typeMap;
    version;
    checkLineBreaks;
    tagMap;
    anchorMap;
    tag;
    anchor;
    kind;
    result = "";
    constructor(input, { filename, schema, onWarning, legacy = false, json = false, listener = null, }) {
        super(schema);
        this.input = input;
        this.filename = filename;
        this.onWarning = onWarning;
        this.legacy = legacy;
        this.json = json;
        this.listener = listener;
        this.implicitTypes = this.schema.compiledImplicit;
        this.typeMap = this.schema.compiledTypeMap;
        this.length = input.length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyX3N0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cHM6Ly9kZW5vLmxhbmQvc3RkQDAuMTI1LjAvZW5jb2RpbmcvX3lhbWwvbG9hZGVyL2xvYWRlcl9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBb0JwQyxNQUFNLE9BQU8sV0FBWSxTQUFRLEtBQUs7SUF5QjNCO0lBeEJGLFNBQVMsR0FBVSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFTO0lBQ2YsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNmLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDZCxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNULFFBQVEsQ0FBVTtJQUNsQixTQUFTLENBQTRCO0lBQ3JDLE1BQU0sQ0FBVTtJQUNoQixJQUFJLENBQVU7SUFDZCxRQUFRLENBQXFDO0lBQzdDLGFBQWEsQ0FBUztJQUN0QixPQUFPLENBQVU7SUFFakIsT0FBTyxDQUFpQjtJQUN4QixlQUFlLENBQVc7SUFDMUIsTUFBTSxDQUFlO0lBQ3JCLFNBQVMsQ0FBZTtJQUN4QixHQUFHLENBQWlCO0lBQ3BCLE1BQU0sQ0FBaUI7SUFDdkIsSUFBSSxDQUFpQjtJQUNyQixNQUFNLEdBQXNCLEVBQUUsQ0FBQztJQUV0QyxZQUNTLEtBQWEsRUFDcEIsRUFDRSxRQUFRLEVBQ1IsTUFBTSxFQUNOLFNBQVMsRUFDVCxNQUFNLEdBQUcsS0FBSyxFQUNkLElBQUksR0FBRyxLQUFLLEVBQ1osUUFBUSxHQUFHLElBQUksR0FDSTtRQUVyQixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFWUCxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBV3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRXpCLElBQUksQ0FBQyxhQUFhLEdBQUksSUFBSSxDQUFDLE1BQWlCLENBQUMsZ0JBQWdCLENBQUM7UUFDOUQsSUFBSSxDQUFDLE9BQU8sR0FBSSxJQUFJLENBQUMsTUFBaUIsQ0FBQyxlQUFlLENBQUM7UUFFdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFBvcnRlZCBmcm9tIGpzLXlhbWwgdjMuMTMuMTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvanMteWFtbC9jb21taXQvNjY1YWFkZGE0MjM0OWRjYWU4NjlmMTIwNDBkOWIxMGVmMThkMTJkYVxuLy8gQ29weXJpZ2h0IDIwMTEtMjAxNSBieSBWaXRhbHkgUHV6cmluLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbi8vIENvcHlyaWdodCAyMDE4LTIwMjIgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5cbmltcG9ydCB0eXBlIHsgWUFNTEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFNjaGVtYSwgU2NoZW1hRGVmaW5pdGlvbiwgVHlwZU1hcCB9IGZyb20gXCIuLi9zY2hlbWEudHNcIjtcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFR5cGUgfSBmcm9tIFwiLi4vdHlwZS50c1wiO1xuaW1wb3J0IHR5cGUgeyBBbnksIEFycmF5T2JqZWN0IH0gZnJvbSBcIi4uL3V0aWxzLnRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZGVyU3RhdGVPcHRpb25zIHtcbiAgbGVnYWN5PzogYm9vbGVhbjtcbiAgbGlzdGVuZXI/OiAoKC4uLmFyZ3M6IEFueVtdKSA9PiB2b2lkKSB8IG51bGw7XG4gIC8qKiBzdHJpbmcgdG8gYmUgdXNlZCBhcyBhIGZpbGUgcGF0aCBpbiBlcnJvci93YXJuaW5nIG1lc3NhZ2VzLiAqL1xuICBmaWxlbmFtZT86IHN0cmluZztcbiAgLyoqIHNwZWNpZmllcyBhIHNjaGVtYSB0byB1c2UuICovXG4gIHNjaGVtYT86IFNjaGVtYURlZmluaXRpb247XG4gIC8qKiBjb21wYXRpYmlsaXR5IHdpdGggSlNPTi5wYXJzZSBiZWhhdmlvdXIuICovXG4gIGpzb24/OiBib29sZWFuO1xuICAvKiogZnVuY3Rpb24gdG8gY2FsbCBvbiB3YXJuaW5nIG1lc3NhZ2VzLiAqL1xuICBvbldhcm5pbmc/KHRoaXM6IG51bGwsIGU/OiBZQU1MRXJyb3IpOiB2b2lkO1xufVxuXG4vLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuZXhwb3J0IHR5cGUgUmVzdWx0VHlwZSA9IGFueVtdIHwgUmVjb3JkPHN0cmluZywgYW55PiB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIExvYWRlclN0YXRlIGV4dGVuZHMgU3RhdGUge1xuICBwdWJsaWMgZG9jdW1lbnRzOiBBbnlbXSA9IFtdO1xuICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG4gIHB1YmxpYyBsaW5lSW5kZW50ID0gMDtcbiAgcHVibGljIGxpbmVTdGFydCA9IDA7XG4gIHB1YmxpYyBwb3NpdGlvbiA9IDA7XG4gIHB1YmxpYyBsaW5lID0gMDtcbiAgcHVibGljIGZpbGVuYW1lPzogc3RyaW5nO1xuICBwdWJsaWMgb25XYXJuaW5nPzogKC4uLmFyZ3M6IEFueVtdKSA9PiB2b2lkO1xuICBwdWJsaWMgbGVnYWN5OiBib29sZWFuO1xuICBwdWJsaWMganNvbjogYm9vbGVhbjtcbiAgcHVibGljIGxpc3RlbmVyPzogKCguLi5hcmdzOiBBbnlbXSkgPT4gdm9pZCkgfCBudWxsO1xuICBwdWJsaWMgaW1wbGljaXRUeXBlczogVHlwZVtdO1xuICBwdWJsaWMgdHlwZU1hcDogVHlwZU1hcDtcblxuICBwdWJsaWMgdmVyc2lvbj86IHN0cmluZyB8IG51bGw7XG4gIHB1YmxpYyBjaGVja0xpbmVCcmVha3M/OiBib29sZWFuO1xuICBwdWJsaWMgdGFnTWFwPzogQXJyYXlPYmplY3Q7XG4gIHB1YmxpYyBhbmNob3JNYXA/OiBBcnJheU9iamVjdDtcbiAgcHVibGljIHRhZz86IHN0cmluZyB8IG51bGw7XG4gIHB1YmxpYyBhbmNob3I/OiBzdHJpbmcgfCBudWxsO1xuICBwdWJsaWMga2luZD86IHN0cmluZyB8IG51bGw7XG4gIHB1YmxpYyByZXN1bHQ6IFJlc3VsdFR5cGUgfCBudWxsID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaW5wdXQ6IHN0cmluZyxcbiAgICB7XG4gICAgICBmaWxlbmFtZSxcbiAgICAgIHNjaGVtYSxcbiAgICAgIG9uV2FybmluZyxcbiAgICAgIGxlZ2FjeSA9IGZhbHNlLFxuICAgICAganNvbiA9IGZhbHNlLFxuICAgICAgbGlzdGVuZXIgPSBudWxsLFxuICAgIH06IExvYWRlclN0YXRlT3B0aW9ucyxcbiAgKSB7XG4gICAgc3VwZXIoc2NoZW1hKTtcbiAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7XG4gICAgdGhpcy5vbldhcm5pbmcgPSBvbldhcm5pbmc7XG4gICAgdGhpcy5sZWdhY3kgPSBsZWdhY3k7XG4gICAgdGhpcy5qc29uID0ganNvbjtcbiAgICB0aGlzLmxpc3RlbmVyID0gbGlzdGVuZXI7XG5cbiAgICB0aGlzLmltcGxpY2l0VHlwZXMgPSAodGhpcy5zY2hlbWEgYXMgU2NoZW1hKS5jb21waWxlZEltcGxpY2l0O1xuICAgIHRoaXMudHlwZU1hcCA9ICh0aGlzLnNjaGVtYSBhcyBTY2hlbWEpLmNvbXBpbGVkVHlwZU1hcDtcblxuICAgIHRoaXMubGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICB9XG59XG4iXX0=