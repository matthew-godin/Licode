import { Status } from "./deps.ts";
import { createHttpError } from "./httpError.ts";
export function createMockApp(state = {}) {
    const app = {
        state,
        use() {
            return app;
        },
        [Symbol.for("Deno.customInspect")]() {
            return `MockApplication {}`;
        },
    };
    return app;
}
export const mockContextState = {
    encodingsAccepted: "identity",
};
export function createMockContext({ app, ip = "127.0.0.1", method = "GET", params, path = "/", state, } = {}) {
    if (!app) {
        app = createMockApp(state);
    }
    let body;
    let status = Status.OK;
    const headers = new Headers();
    const resources = [];
    return {
        app,
        params,
        request: {
            acceptsEncodings() {
                return mockContextState.encodingsAccepted;
            },
            headers: new Headers(),
            ip,
            method,
            path,
            search: undefined,
            searchParams: new URLSearchParams(),
            url: new URL(path, "http://localhost/"),
        },
        response: {
            get status() {
                return status;
            },
            set status(value) {
                status = value;
            },
            get body() {
                return body;
            },
            set body(value) {
                body = value;
            },
            addResource(rid) {
                resources.push(rid);
            },
            destroy() {
                body = undefined;
                for (const rid of resources) {
                    Deno.close(rid);
                }
            },
            redirect(url) {
                headers.set("Location", encodeURI(String(url)));
            },
            headers,
            toDomResponse() {
                return Promise.resolve(new Response(body, { status, headers }));
            },
            toServerResponse() {
                return Promise.resolve({
                    status,
                    body,
                    headers,
                });
            },
        },
        state: Object.assign({}, app.state),
        assert(condition, errorStatus = 500, message, props) {
            if (condition) {
                return;
            }
            const err = createHttpError(errorStatus, message);
            if (props) {
                Object.assign(err, props);
            }
            throw err;
        },
        throw(errorStatus, message, props) {
            const err = createHttpError(errorStatus, message);
            if (props) {
                Object.assign(err, props);
            }
            throw err;
        },
        [Symbol.for("Deno.customInspect")]() {
            return `MockContext {}`;
        },
    };
}
export function createMockNext() {
    return async function next() { };
}
//# sourceMappingURL=data:application/json;base64,