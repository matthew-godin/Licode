import { existsSync, extname, globToRegExp, JSON_SCHEMA, log, parseYaml, resolve, } from "../deps.ts";
import { merge } from "./merge.ts";
const logger = log.create("conf");
export const configs = [
    "denon.yaml",
    "denon.yml",
    "denon.json",
    "scripts.json",
    "scripts.yml",
    "scripts.yaml",
    "denon.config.ts",
    "scripts.config.ts",
    "denon.config.js",
    "scripts.config.js",
];
export const reConfig = new RegExp(configs
    .map((_) => `**/${_}`)
    .map((_) => globToRegExp(_).source)
    .join("|"));
export const DEFAULT_DENON_CONFIG = {
    scripts: {},
    watcher: {
        interval: 350,
        paths: [],
        exts: ["ts", "tsx", "js", "jsx", "json"],
        match: ["**/*.*"],
        skip: ["**/.git/**"],
    },
    watch: true,
    logger: {
        quiet: false,
        debug: false,
        fullscreen: false,
    },
    configPath: "",
};
async function readYaml(file) {
    const source = await Deno.readTextFile(file);
    return parseYaml(source, {
        schema: JSON_SCHEMA,
        json: true,
    });
}
async function readJson(file) {
    const source = await Deno.readTextFile(file);
    return JSON.parse(source);
}
async function importConfig(file) {
    try {
        const configRaw = await import(`file://${resolve(file)}`);
        return configRaw.default;
    }
    catch (error) {
        logger.error(error.message ?? "Error opening ts config config");
        return;
    }
}
function cleanConfig(config, file) {
    if (config.watcher) {
        if (config.watcher.exts) {
            config.watcher.exts = config.watcher.exts.map((_) => _.startsWith(".") ? _.substr(1) : _);
        }
        if (config.watcher.skip) {
            config.watcher.skip = config.watcher.skip.map((_) => _.startsWith("./") ? _.substr(2) : _);
        }
        if (config.watcher.match) {
            config.watcher.match = config.watcher.match.map((_) => _.startsWith("./") ? _.substr(2) : _);
        }
    }
    if (file) {
        config.configPath = resolve(file);
    }
    return config;
}
export function getConfigFilename() {
    return configs.find((filename) => {
        return existsSync(filename) && Deno.statSync(filename).isFile;
    });
}
export async function readConfig(file = getConfigFilename()) {
    let config = DEFAULT_DENON_CONFIG;
    if (!config.watcher.paths)
        config.watcher.paths = [];
    config.watcher.paths.push(Deno.cwd());
    if (file) {
        if (file.endsWith("config.js") || file.endsWith("config.ts")) {
            const parsed = await importConfig(file);
            if (parsed) {
                config = merge(config, cleanConfig(parsed, file));
            }
        }
        else {
            try {
                const extension = extname(file);
                if (/^\.ya?ml$/.test(extension)) {
                    const parsed = await readYaml(file);
                    config = merge(config, cleanConfig(parsed, file));
                }
                else if (/^\.json$/.test(extension)) {
                    const parsed = await readJson(file);
                    config = merge(config, cleanConfig(parsed, file));
                }
                else {
                    try {
                        const parsed = await readJson(file);
                        config = merge(config, cleanConfig(parsed, file));
                    }
                    catch {
                        const parsed = await readYaml(file);
                        config = merge(config, cleanConfig(parsed, file));
                    }
                }
            }
            catch {
                logger.warning(`unsupported configuration \`${file}\``);
            }
        }
    }
    return config;
}
export async function writeConfigTemplate(template) {
    try {
        logger.info(`writing template to \`${template.filename}\``);
        await Deno.writeTextFile(resolve(Deno.cwd(), template.filename), template.source);
        logger.info(`\`${template.filename}\` created in current working directory`);
    }
    catch {
        logger.error(`\`${template.filename}\` cannot be saved in current working directory`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHR0cHM6Ly9kZW5vLmxhbmQveC9kZW5vbkAyLjQuOC9zcmMvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFDTCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFlBQVksRUFDWixXQUFXLEVBQ1gsR0FBRyxFQUNILFNBQVMsRUFDVCxPQUFPLEdBQ1IsTUFBTSxZQUFZLENBQUM7QUFPcEIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVuQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBR2xDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRztJQUNyQixZQUFZO0lBQ1osV0FBVztJQUNYLFlBQVk7SUFFWixjQUFjO0lBQ2QsYUFBYTtJQUNiLGNBQWM7SUFFZCxpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixtQkFBbUI7Q0FDcEIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FDaEMsT0FBTztLQUNKLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztLQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7S0FDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUNiLENBQUM7QUFrQkYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQXdCO0lBQ3ZELE9BQU8sRUFBRSxFQUFFO0lBQ1gsT0FBTyxFQUFFO1FBQ1AsUUFBUSxFQUFFLEdBQUc7UUFDYixLQUFLLEVBQUUsRUFBRTtRQUNULElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7UUFDeEMsS0FBSyxFQUFF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