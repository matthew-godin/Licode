import { deferred, delay, globToRegExp, log, relative, walk } from "../deps.ts";
const logger = log.create("path");
export class Watcher {
    #signal = deferred();
    #changes = {};
    #paths = [Deno.cwd()];
    #interval = 350;
    #exts = undefined;
    #match = undefined;
    #skip = undefined;
    #watch = this.denoWatch;
    #config;
    constructor(config = {}) {
        this.#config = config;
        this.reload();
    }
    reload() {
        this.#watch = this.#config.legacy ? this.legacyWatch : this.denoWatch;
        if (this.#config.paths) {
            this.#paths = this.#config.paths;
        }
        if (this.#config.interval) {
            this.#interval = this.#config.interval;
        }
        if (this.#config.exts) {
            this.#exts = this.#config.exts.map((_) => _.startsWith(".") ? _ : `.${_}`);
        }
        if (this.#config.match) {
            this.#match = this.#config.match.map((_) => globToRegExp(_));
        }
        if (this.#config.skip) {
            this.#skip = this.#config.skip.map((_) => globToRegExp(_));
        }
    }
    isWatched(path) {
        path = this.verifyPath(path);
        logger.debug(`trying to match ${path}`);
        if (this.#exts?.length && this.#exts?.every((ext) => !path.endsWith(ext))) {
            logger.debug(`path ${path} does not have right extension`);
            return false;
        }
        if (this.#skip?.length &&
            this.#skip?.some((skip) => path.match(skip))) {
            logger.debug(`path ${path} is skipped`);
            return false;
        }
        if (this.#match?.length && this.#match?.every((match) => !path.match(match))) {
            logger.debug(`path ${path} is not matched`);
            return false;
        }
        logger.debug(`path ${path} is matched`);
        return true;
    }
    reset() {
        this.#changes = {};
        this.#signal = deferred();
    }
    verifyPath(path) {
        for (const directory of this.#paths) {
            const rel = relative(directory, path);
            if (rel && !rel.startsWith("..")) {
                path = relative(directory, path);
            }
        }
        return path;
    }
    async *iterate() {
        this.#watch();
        while (true) {
            await this.#signal;
            yield Object.entries(this.#changes).map(([path, type]) => ({
                path,
                type,
            }));
            this.reset();
        }
    }
    [Symbol.asyncIterator]() {
        return this.iterate();
    }
    async denoWatch() {
        let timer = 0;
        const debounce = () => {
            clearTimeout(timer);
            timer = setTimeout(this.#signal.resolve, this.#interval);
        };
        const run = async () => {
            for await (const event of Deno.watchFs(this.#paths)) {
                const { kind, paths } = event;
                for (const path of paths) {
                    if (this.isWatched(path)) {
                        if (!this.#changes[path])
                            this.#changes[path] = [];
                        this.#changes[path].push(kind);
                        debounce();
                    }
                }
            }
        };
        run();
        while (true) {
            debounce();
            await delay(this.#interval);
        }
    }
    async legacyWatch() {
        let timer = 0;
        const debounce = () => {
            clearTimeout(timer);
            timer = setTimeout(this.#signal.resolve, this.#interval);
        };
        const walkPaths = async () => {
            const tree = {};
            for (const i in this.#paths) {
                const action = walk(this.#paths[i], {
                    maxDepth: Infinity,
                    includeDirs: false,
                    followSymlinks: false,
                    exts: this.#exts,
                    match: this.#match,
                    skip: this.#skip,
                });
                for await (const { path } of action) {
                    if (this.isWatched(path)) {
                        const stat = await Deno.stat(path);
                        tree[path] = stat.mtime;
                    }
                }
            }
            return tree;
        };
        let previous = await walkPaths();
        while (true) {
            const current = await walkPaths();
            for (const path in previous) {
                const pre = previous[path];
                const post = current[path];
                if (pre && !post) {
                    if (!this.#changes[path])
                        this.#changes[path] = [];
                    this.#changes[path].push("remove");
                }
                else if (pre && post && pre.getTime() !== post.getTime()) {
                    if (!this.#changes[path])
                        this.#changes[path] = [];
                    this.#changes[path].push("modify");
                }
            }
            for (const path in current) {
                if (!previous[path] && current[path]) {
                    if (!this.#changes[path])
                        this.#changes[path] = [];
                    this.#changes[path].push("create");
                }
            }
            previous = current;
            debounce();
            await delay(this.#interval);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,