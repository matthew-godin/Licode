import { log } from "./deps.ts";
import { Watcher } from "./src/watcher.ts";
import { Runner } from "./src/runner.ts";
import { Daemon } from "./src/daemon.ts";
import { grantPermissions, initializeConfig, printAvailableScripts, printHelp, upgrade, } from "./src/cli.ts";
import { readConfig, reConfig } from "./src/config.ts";
import { parseArgs } from "./src/args.ts";
import { BRANCH, VERSION } from "./info.ts";
const logger = log.create("main");
export class Denon {
    config;
    watcher;
    runner;
    constructor(config) {
        this.config = config;
        this.watcher = new Watcher(config.watcher);
        this.runner = new Runner(config, config.args ? config.args.cmd : []);
    }
    run(script) {
        return new Daemon(this, script);
    }
}
if (import.meta.main) {
    const args = parseArgs(Deno.args);
    await grantPermissions();
    let config = await readConfig(args.config);
    config.args = args;
    await log.setup({
        filter: config.logger.quiet
            ? "ERROR"
            : config.logger.debug
                ? "DEBUG"
                : "INFO",
    });
    if (BRANCH !== "main") {
        logger.info(`v${VERSION}-${BRANCH}`);
    }
    else {
        logger.info(`v${VERSION}`);
    }
    if (args.version)
        Deno.exit(0);
    if (args.upgrade) {
        await upgrade(args.upgrade);
        Deno.exit(0);
    }
    if (args.help) {
        printHelp();
        Deno.exit(0);
    }
    if (args.init) {
        await initializeConfig(args.init);
        Deno.exit(0);
    }
    if (args.cmd.length === 0) {
        await printAvailableScripts(config);
        Deno.exit(0);
    }
    const script = args.cmd[0];
    const denon = new Denon(config);
    for await (const event of denon.run(script)) {
        if (event.type === "reload") {
            if (event.change.some((_) => reConfig.test(_.path) && _.path === config.configPath)) {
                config = await readConfig(args.config);
                logger.debug("reloading config");
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVub24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJodHRwczovL2Rlbm8ubGFuZC94L2Rlbm9uQDIuNC44L2Rlbm9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFaEMsT0FBTyxFQUFhLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekMsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIscUJBQXFCLEVBQ3JCLFNBQVMsRUFDVCxPQUFPLEdBQ1IsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUF1QixVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU1QyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBa0RsQyxNQUFNLE9BQU8sS0FBSztJQUlHO0lBSG5CLE9BQU8sQ0FBVTtJQUNqQixNQUFNLENBQVM7SUFFZixZQUFtQixNQUEyQjtRQUEzQixXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkUsQ0FB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