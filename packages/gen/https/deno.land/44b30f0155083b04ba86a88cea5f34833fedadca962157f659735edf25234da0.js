export function buildFlags(options) {
    const flags = [];
    if (options.allow) {
        if (Array.isArray(options.allow)) {
            options.allow.forEach((flag) => flags.push(`--allow-${flag}`));
        }
        else if (options.allow === "all") {
            flags.push(`--allow-all`);
        }
        else if (typeof options.allow === "object") {
            Object.entries(options.allow).map(([flag, value]) => {
                if (!value || (typeof value === "boolean" && value)) {
                    flags.push(`--allow-${flag}`);
                }
                else {
                    flags.push(`--allow-${flag}=${value}`);
                }
            });
        }
    }
    if (options.importMap) {
        flags.push("--import-map");
        flags.push(options.importMap);
    }
    if (options.lock) {
        flags.push("--lock");
        flags.push(options.lock);
    }
    if (options.log) {
        flags.push("--log-level");
        flags.push(options.log);
    }
    if (options.tsconfig) {
        flags.push("--config");
        flags.push(options.tsconfig);
    }
    if (options.cert) {
        flags.push("--cert");
        flags.push(options.cert);
    }
    if (options.inspect) {
        flags.push(`--inspect=${options.inspect}`);
    }
    if (options.inspectBrk) {
        flags.push(`--inspect-brk=${options.inspectBrk}`);
    }
    if (options.noCheck) {
        flags.push("--no-check");
    }
    if (options.unstable) {
        flags.push("--unstable");
    }
    return flags;
}
//# sourceMappingURL=data:application/json;base64,