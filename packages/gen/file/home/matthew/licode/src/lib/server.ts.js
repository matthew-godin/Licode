import { Status } from 'https://deno.land/std@0.97.0/http/http_status.ts';
export var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["PATCH"] = "PATCH";
    HttpMethod["DELETE"] = "DELETE";
})(HttpMethod || (HttpMethod = {}));
export const extractRouteParams = (route) => route.split('/').reduce((accum, curr, idx) => {
    if (/:[A-Za-z1-9]{1,}/.test(curr)) {
        const paramKey = curr.replace(':', '');
        const param = { idx, paramKey };
        return [...accum, param];
    }
    return accum;
}, []);
export const routeParamPattern = (route) => route.replace(/\/\:[^/]{1,}/gi, '/[^/]{1,}').replace(/\//g, '\\/');
export const basicRouteMatcher = (req, route) => req.method === route.method && req.url === route.route;
export const routeWithParamsRouteMatcher = (req, route) => {
    const routeMatcherRegEx = new RegExp(`^${routeParamPattern(route.route)}$`);
    return req.method === route.method && route.route.includes('/:') && routeMatcherRegEx.test(req.url);
};
export const matchRequestToRouteHandler = async (routes, req) => {
    let route = routes.find((route) => basicRouteMatcher(req, route));
    if (route) {
        await route.handler(req);
    }
    route = routes.find((route) => routeWithParamsRouteMatcher(req, route));
    if (route) {
        const routeParamsMap = extractRouteParams(route.route);
        const routeSegments = req.url.split('/');
        const routeParams = routeParamsMap.reduce((accum, curr) => {
            return {
                ...accum,
                [curr.paramKey]: routeSegments[curr.idx],
            };
        }, {});
        await route.handler(req, ...Object.values(routeParams));
    }
    return req.respond({ status: Status.NotFound, body: 'Route not found' });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxrREFBa0QsQ0FBQztBQUV4RSxNQUFNLENBQU4sSUFBa0IsVUFNZjtBQU5ILFdBQWtCLFVBQVU7SUFDeEIseUJBQVcsQ0FBQTtJQUNYLDJCQUFhLENBQUE7SUFDYix5QkFBVyxDQUFBO0lBQ1gsNkJBQWUsQ0FBQTtJQUNmLCtCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFOZSxVQUFVLEtBQVYsVUFBVSxRQU16QjtBQWtCRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBb0MsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUMzRSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQW1CLEVBQUUsSUFBWSxFQUFFLEdBQVcsRUFBRSxFQUFFO0lBQ3pFLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2pDLE1BQU0sUUFBUSxHQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sS0FBSyxHQUFlLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxHQUFHLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMxQjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRVQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQThCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDcEUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBT3BFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsR0FBa0IsRUFBRSxLQUFZLEVBQVcsRUFBRSxDQUMvRSxHQUFHLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBRXZELE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQUMsR0FBa0IsRUFBRSxLQUFZLEVBQVcsRUFBRTtJQUN4RixNQUFNLGlCQUFpQixHQUFHLElBQUksTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1RSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3RHLENBQUMsQ0FBQztBQU9ELE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEtBQUssRUFBRSxNQUFlLEVBQUUsR0FBa0IsRUFBaUIsRUFBRTtJQUN0RyxJQUFJLEtBQUssR0FBc0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDNUYsSUFBSSxLQUFLLEVBQUU7UUFDVCxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7S0FHMUI7SUFDRCxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsMkJBQTJCLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDL0UsSUFBSSxLQUFLLEVBQUU7UUFFVCxNQUFNLGNBQWMsR0FBaUIsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sYUFBYSxHQUFhLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sV0FBVyxHQUF1QyxjQUFjLENBQUMsTUFBTSxDQUMzRSxDQUFDLEtBQXlDLEVBQUUsSUFBZ0IsRUFBRSxFQUFFO1lBQzlELE9BQU87Z0JBQ0wsR0FBRyxLQUFLO2dCQUNSLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2FBQ3pDLENBQUM7UUFDSixDQUFDLEVBQ0QsRUFBRSxDQUNILENBQUM7UUFDRixNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0tBR3pEO0lBRUQsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztBQUMzRSxDQUFDLENBQUMifQ==