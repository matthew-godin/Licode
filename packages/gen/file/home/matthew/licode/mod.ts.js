import { Application, Router, Status, } from "https://deno.land/x/oak/mod.ts";
import { Client } from "https://deno.land/x/postgres@v0.15.0/mod.ts";
import { crypto } from "https://deno.land/std@0.132.0/crypto/mod.ts";
const client = new Client({
    user: "licode",
    database: "licode",
    password: "edocil",
    hostname: "localhost",
    port: 5432,
    tls: {
        enabled: false,
        enforce: false,
    },
});
const env = Deno.env.toObject();
const app = new Application();
const router = new Router();
let helloWorldVar = { text: 'Hello World' };
let userVar;
const port = +env.LICODE_PORT || 3000;
app.addEventListener("error", (evt) => {
    console.log(evt.error);
});
router
    .get("/api/hello-world", (context) => {
    try {
        context.response.body = helloWorldVar;
    }
    catch (err) {
        console.log(err);
    }
})
    .post("/api/post-hello-world", async (context) => {
    if (!context.request.hasBody) {
        context.throw(Status.BadRequest, "Bad Request");
    }
    const body = context.request.body();
    let helloWorld;
    if (body.type === "json") {
        helloWorld = await body.value;
    }
    else if (body.type === "form") {
        helloWorld = {};
        for (const [key, value] of await body.value) {
            helloWorld[key] = value;
        }
    }
    else if (body.type === "form-data") {
        const formData = await body.value.read();
        helloWorld = formData.fields;
    }
    if (helloWorld) {
        context.assert(typeof helloWorld.text === "string", Status.BadRequest);
        helloWorldVar = helloWorld;
        context.response.status = Status.OK;
        context.response.body = helloWorld;
        context.response.type = "json";
        return;
    }
    context.throw(Status.BadRequest, "Bad Request");
})
    .post("/api/register", async (context) => {
    try {
        if (!context.request.hasBody) {
            context.throw(Status.BadRequest, "Bad Request");
        }
        const body = context.request.body();
        let user;
        if (body.type === "json") {
            user = await body.value;
        }
        if (user) {
            context.assert(typeof user?.email?.value === "string"
                && typeof user?.username?.value === "string"
                && typeof user?.password?.value === "string", Status.BadRequest);
            userVar = user;
            context.response.status = Status.OK;
            await client.connect();
            console.log("CCCCCCCC");
            const usernameResult = await client.queryArray("select username from users where username='"
                + user?.username?.value + "'");
            console.log("DDDDDDDD");
            if (usernameResult.rows.length < 1) {
                console.log("FFFFFFFFFFF");
                const emailResult = await client.queryArray("select email from users where email='"
                    + user?.email?.value + "'");
                console.log("GGGGGGGGGGG");
                if (emailResult.rows.length < 1) {
                    console.log("EEEEEEEEE");
                    let saltHexString = '';
                    for (let i = 0; i < 32; ++i) {
                        saltHexString += Math.floor(Math.random() * Math.pow(2, 32)).toString(16);
                    }
                    let textEncoder = new TextEncoder();
                    let hashedPasswordUint8Array = new Uint8Array(await crypto.subtle.digest('SHA3-512', textEncoder.encode(user?.password?.value + saltHexString)));
                    let hashedPasswordHexString = '';
                    for (let i = 0; i < hashedPasswordUint8Array.length; ++i) {
                        hashedPasswordHexString += hashedPasswordUint8Array[i].toString(16);
                    }
                    let saltHexStringLength = saltHexString.length;
                    for (let i = 0; i < 256 - saltHexStringLength; ++i) {
                        saltHexString = "0" + saltHexString;
                    }
                    let hashedPasswordHexStringLength = hashedPasswordHexString.length;
                    for (let i = 0; i < 128 - hashedPasswordHexStringLength; ++i) {
                        hashedPasswordHexString = "0" + hashedPasswordHexString;
                    }
                    console.log("AAAAAAA");
                    await client.queryArray("insert into public.users(email, username, hashed_password, salt, created_at, updated_at)"
                        + " values ('" + user?.email?.value + "', '" + user?.username?.value + "', '"
                        + "\\x" + hashedPasswordHexString + "', '" + "\\x" + saltHexString + "', now(), now())");
                    context.response.body = user;
                    console.log("BBBBBBB");
                }
                else {
                    context.response.body = { text: 'Given Email Already Exists' };
                }
            }
            else {
                console.log("HHHHHHHHHHHHHHHH");
                context.response.body = { text: 'Given Username Already Exists' };
                console.log("IIIIIIIIIIII");
            }
            console.log("JJJJJJJJJJJJJJJ");
            await client.end();
            context.response.type = "json";
            console.log("KKKKKKKKKKKKKKKKKK");
            return;
        }
    }
    catch (err) {
        console.log(err);
    }
    context.throw(Status.BadRequest, "Bad Request");
})
    .post("/api/login", async (context) => {
    if (!context.request.hasBody) {
        context.throw(Status.BadRequest, "Bad Request");
    }
    const body = context.request.body();
    let user;
    if (body.type === "json") {
        user = await body.value;
    }
    if (user) {
        context.assert(typeof user?.email?.value === "string"
            && typeof user?.username?.value === "string"
            && typeof user?.password?.value === "string", Status.BadRequest);
        context.response.status = Status.OK;
        await client.connect();
        const usernameResult = await client.queryArray("select email, username from users where username='"
            + user?.email?.value + "'");
        if (usernameResult.rows.length < 1) {
            const emailResult = await client.queryArray("select email, username from users where email='"
                + user?.email?.value + "'");
            if (emailResult.rows.length < 1) {
                context.response.body = { text: 'Given Email or Username Does Not Exist' };
            }
            else {
                let foundUser = {
                    email: { value: emailResult.rows[0][0] },
                    username: { value: emailResult.rows[0][1] },
                    password: { value: '' },
                };
                context.response.body = foundUser;
            }
        }
        else {
            let foundUser = {
                email: { value: usernameResult.rows[0][0] },
                username: { value: usernameResult.rows[0][1] },
                password: { value: '' },
            };
            context.response.body = foundUser;
        }
        await client.end();
        if (1 > 2) {
            context.response.body = { text: 'Given Email or Username Does Not Exist' };
        }
        context.response.type = "json";
        return;
    }
    context.throw(Status.BadRequest, "Bad Request");
});
app.use(router.routes());
app.use(router.allowedMethods());
app.use(async (context) => {
    if (!context.request.url.pathname.endsWith('.js')
        && !context.request.url.pathname.endsWith('.png')
        && !context.request.url.pathname.endsWith('.ico')) {
        context.request.url.pathname = '/';
    }
    await context.send({
        root: `${Deno.cwd()}/react-app/build`,
        index: "index.html",
    });
});
console.log("Running on port", port);
await app.listen({ port });
//# sourceMappingURL=data:application/json;base64,